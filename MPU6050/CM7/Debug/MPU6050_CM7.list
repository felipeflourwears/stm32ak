
MPU6050_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7a0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  0800ba40  0800ba40  0001ba40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfcc  0800bfcc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfcc  0800bfcc  0001bfcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfd4  0800bfd4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfd4  0800bfd4  0001bfd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfd8  0800bfd8  0001bfd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  0800bfdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  240001e4  0800c1c0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000750  0800c1c0  00020750  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028958  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004001  00000000  00000000  00048b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  0004cb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001650  00000000  00000000  0004e2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bc96  00000000  00000000  0004f948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc07  00000000  00000000  0008b5de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00186a47  00000000  00000000  000a71e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022dc2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000791c  00000000  00000000  0022dc80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ba28 	.word	0x0800ba28

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	0800ba28 	.word	0x0800ba28

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a6 	b.w	8000a6c <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468c      	mov	ip, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 8083 	bne.w	80008be <__udivmoddi4+0x116>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d947      	bls.n	800084e <__udivmoddi4+0xa6>
 80007be:	fab2 f282 	clz	r2, r2
 80007c2:	b142      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	f1c2 0020 	rsb	r0, r2, #32
 80007c8:	fa24 f000 	lsr.w	r0, r4, r0
 80007cc:	4091      	lsls	r1, r2
 80007ce:	4097      	lsls	r7, r2
 80007d0:	ea40 0c01 	orr.w	ip, r0, r1
 80007d4:	4094      	lsls	r4, r2
 80007d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	fbbc f6f8 	udiv	r6, ip, r8
 80007e0:	fa1f fe87 	uxth.w	lr, r7
 80007e4:	fb08 c116 	mls	r1, r8, r6, ip
 80007e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ec:	fb06 f10e 	mul.w	r1, r6, lr
 80007f0:	4299      	cmp	r1, r3
 80007f2:	d909      	bls.n	8000808 <__udivmoddi4+0x60>
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fa:	f080 8119 	bcs.w	8000a30 <__udivmoddi4+0x288>
 80007fe:	4299      	cmp	r1, r3
 8000800:	f240 8116 	bls.w	8000a30 <__udivmoddi4+0x288>
 8000804:	3e02      	subs	r6, #2
 8000806:	443b      	add	r3, r7
 8000808:	1a5b      	subs	r3, r3, r1
 800080a:	b2a4      	uxth	r4, r4
 800080c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000810:	fb08 3310 	mls	r3, r8, r0, r3
 8000814:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000818:	fb00 fe0e 	mul.w	lr, r0, lr
 800081c:	45a6      	cmp	lr, r4
 800081e:	d909      	bls.n	8000834 <__udivmoddi4+0x8c>
 8000820:	193c      	adds	r4, r7, r4
 8000822:	f100 33ff 	add.w	r3, r0, #4294967295
 8000826:	f080 8105 	bcs.w	8000a34 <__udivmoddi4+0x28c>
 800082a:	45a6      	cmp	lr, r4
 800082c:	f240 8102 	bls.w	8000a34 <__udivmoddi4+0x28c>
 8000830:	3802      	subs	r0, #2
 8000832:	443c      	add	r4, r7
 8000834:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000838:	eba4 040e 	sub.w	r4, r4, lr
 800083c:	2600      	movs	r6, #0
 800083e:	b11d      	cbz	r5, 8000848 <__udivmoddi4+0xa0>
 8000840:	40d4      	lsrs	r4, r2
 8000842:	2300      	movs	r3, #0
 8000844:	e9c5 4300 	strd	r4, r3, [r5]
 8000848:	4631      	mov	r1, r6
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	b902      	cbnz	r2, 8000852 <__udivmoddi4+0xaa>
 8000850:	deff      	udf	#255	; 0xff
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	2a00      	cmp	r2, #0
 8000858:	d150      	bne.n	80008fc <__udivmoddi4+0x154>
 800085a:	1bcb      	subs	r3, r1, r7
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	fa1f f887 	uxth.w	r8, r7
 8000864:	2601      	movs	r6, #1
 8000866:	fbb3 fcfe 	udiv	ip, r3, lr
 800086a:	0c21      	lsrs	r1, r4, #16
 800086c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000870:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000874:	fb08 f30c 	mul.w	r3, r8, ip
 8000878:	428b      	cmp	r3, r1
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0xe4>
 800087c:	1879      	adds	r1, r7, r1
 800087e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0xe2>
 8000884:	428b      	cmp	r3, r1
 8000886:	f200 80e9 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 800088a:	4684      	mov	ip, r0
 800088c:	1ac9      	subs	r1, r1, r3
 800088e:	b2a3      	uxth	r3, r4
 8000890:	fbb1 f0fe 	udiv	r0, r1, lr
 8000894:	fb0e 1110 	mls	r1, lr, r0, r1
 8000898:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800089c:	fb08 f800 	mul.w	r8, r8, r0
 80008a0:	45a0      	cmp	r8, r4
 80008a2:	d907      	bls.n	80008b4 <__udivmoddi4+0x10c>
 80008a4:	193c      	adds	r4, r7, r4
 80008a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x10a>
 80008ac:	45a0      	cmp	r8, r4
 80008ae:	f200 80d9 	bhi.w	8000a64 <__udivmoddi4+0x2bc>
 80008b2:	4618      	mov	r0, r3
 80008b4:	eba4 0408 	sub.w	r4, r4, r8
 80008b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008bc:	e7bf      	b.n	800083e <__udivmoddi4+0x96>
 80008be:	428b      	cmp	r3, r1
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x12e>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	f000 80b1 	beq.w	8000a2a <__udivmoddi4+0x282>
 80008c8:	2600      	movs	r6, #0
 80008ca:	e9c5 0100 	strd	r0, r1, [r5]
 80008ce:	4630      	mov	r0, r6
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	fab3 f683 	clz	r6, r3
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d14a      	bne.n	8000974 <__udivmoddi4+0x1cc>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0x140>
 80008e2:	4282      	cmp	r2, r0
 80008e4:	f200 80b8 	bhi.w	8000a58 <__udivmoddi4+0x2b0>
 80008e8:	1a84      	subs	r4, r0, r2
 80008ea:	eb61 0103 	sbc.w	r1, r1, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	468c      	mov	ip, r1
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0a8      	beq.n	8000848 <__udivmoddi4+0xa0>
 80008f6:	e9c5 4c00 	strd	r4, ip, [r5]
 80008fa:	e7a5      	b.n	8000848 <__udivmoddi4+0xa0>
 80008fc:	f1c2 0320 	rsb	r3, r2, #32
 8000900:	fa20 f603 	lsr.w	r6, r0, r3
 8000904:	4097      	lsls	r7, r2
 8000906:	fa01 f002 	lsl.w	r0, r1, r2
 800090a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800090e:	40d9      	lsrs	r1, r3
 8000910:	4330      	orrs	r0, r6
 8000912:	0c03      	lsrs	r3, r0, #16
 8000914:	fbb1 f6fe 	udiv	r6, r1, lr
 8000918:	fa1f f887 	uxth.w	r8, r7
 800091c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000924:	fb06 f108 	mul.w	r1, r6, r8
 8000928:	4299      	cmp	r1, r3
 800092a:	fa04 f402 	lsl.w	r4, r4, r2
 800092e:	d909      	bls.n	8000944 <__udivmoddi4+0x19c>
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	f106 3cff 	add.w	ip, r6, #4294967295
 8000936:	f080 808d 	bcs.w	8000a54 <__udivmoddi4+0x2ac>
 800093a:	4299      	cmp	r1, r3
 800093c:	f240 808a 	bls.w	8000a54 <__udivmoddi4+0x2ac>
 8000940:	3e02      	subs	r6, #2
 8000942:	443b      	add	r3, r7
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	b281      	uxth	r1, r0
 8000948:	fbb3 f0fe 	udiv	r0, r3, lr
 800094c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000950:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000954:	fb00 f308 	mul.w	r3, r0, r8
 8000958:	428b      	cmp	r3, r1
 800095a:	d907      	bls.n	800096c <__udivmoddi4+0x1c4>
 800095c:	1879      	adds	r1, r7, r1
 800095e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000962:	d273      	bcs.n	8000a4c <__udivmoddi4+0x2a4>
 8000964:	428b      	cmp	r3, r1
 8000966:	d971      	bls.n	8000a4c <__udivmoddi4+0x2a4>
 8000968:	3802      	subs	r0, #2
 800096a:	4439      	add	r1, r7
 800096c:	1acb      	subs	r3, r1, r3
 800096e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000972:	e778      	b.n	8000866 <__udivmoddi4+0xbe>
 8000974:	f1c6 0c20 	rsb	ip, r6, #32
 8000978:	fa03 f406 	lsl.w	r4, r3, r6
 800097c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000980:	431c      	orrs	r4, r3
 8000982:	fa20 f70c 	lsr.w	r7, r0, ip
 8000986:	fa01 f306 	lsl.w	r3, r1, r6
 800098a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800098e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000992:	431f      	orrs	r7, r3
 8000994:	0c3b      	lsrs	r3, r7, #16
 8000996:	fbb1 f9fe 	udiv	r9, r1, lr
 800099a:	fa1f f884 	uxth.w	r8, r4
 800099e:	fb0e 1119 	mls	r1, lr, r9, r1
 80009a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009a6:	fb09 fa08 	mul.w	sl, r9, r8
 80009aa:	458a      	cmp	sl, r1
 80009ac:	fa02 f206 	lsl.w	r2, r2, r6
 80009b0:	fa00 f306 	lsl.w	r3, r0, r6
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x220>
 80009b6:	1861      	adds	r1, r4, r1
 80009b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009bc:	d248      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 80009be:	458a      	cmp	sl, r1
 80009c0:	d946      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 80009c2:	f1a9 0902 	sub.w	r9, r9, #2
 80009c6:	4421      	add	r1, r4
 80009c8:	eba1 010a 	sub.w	r1, r1, sl
 80009cc:	b2bf      	uxth	r7, r7
 80009ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009d6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009da:	fb00 f808 	mul.w	r8, r0, r8
 80009de:	45b8      	cmp	r8, r7
 80009e0:	d907      	bls.n	80009f2 <__udivmoddi4+0x24a>
 80009e2:	19e7      	adds	r7, r4, r7
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009e8:	d22e      	bcs.n	8000a48 <__udivmoddi4+0x2a0>
 80009ea:	45b8      	cmp	r8, r7
 80009ec:	d92c      	bls.n	8000a48 <__udivmoddi4+0x2a0>
 80009ee:	3802      	subs	r0, #2
 80009f0:	4427      	add	r7, r4
 80009f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009f6:	eba7 0708 	sub.w	r7, r7, r8
 80009fa:	fba0 8902 	umull	r8, r9, r0, r2
 80009fe:	454f      	cmp	r7, r9
 8000a00:	46c6      	mov	lr, r8
 8000a02:	4649      	mov	r1, r9
 8000a04:	d31a      	bcc.n	8000a3c <__udivmoddi4+0x294>
 8000a06:	d017      	beq.n	8000a38 <__udivmoddi4+0x290>
 8000a08:	b15d      	cbz	r5, 8000a22 <__udivmoddi4+0x27a>
 8000a0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a16:	40f2      	lsrs	r2, r6
 8000a18:	ea4c 0202 	orr.w	r2, ip, r2
 8000a1c:	40f7      	lsrs	r7, r6
 8000a1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a22:	2600      	movs	r6, #0
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	462e      	mov	r6, r5
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	e70b      	b.n	8000848 <__udivmoddi4+0xa0>
 8000a30:	4606      	mov	r6, r0
 8000a32:	e6e9      	b.n	8000808 <__udivmoddi4+0x60>
 8000a34:	4618      	mov	r0, r3
 8000a36:	e6fd      	b.n	8000834 <__udivmoddi4+0x8c>
 8000a38:	4543      	cmp	r3, r8
 8000a3a:	d2e5      	bcs.n	8000a08 <__udivmoddi4+0x260>
 8000a3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a40:	eb69 0104 	sbc.w	r1, r9, r4
 8000a44:	3801      	subs	r0, #1
 8000a46:	e7df      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a48:	4608      	mov	r0, r1
 8000a4a:	e7d2      	b.n	80009f2 <__udivmoddi4+0x24a>
 8000a4c:	4660      	mov	r0, ip
 8000a4e:	e78d      	b.n	800096c <__udivmoddi4+0x1c4>
 8000a50:	4681      	mov	r9, r0
 8000a52:	e7b9      	b.n	80009c8 <__udivmoddi4+0x220>
 8000a54:	4666      	mov	r6, ip
 8000a56:	e775      	b.n	8000944 <__udivmoddi4+0x19c>
 8000a58:	4630      	mov	r0, r6
 8000a5a:	e74a      	b.n	80008f2 <__udivmoddi4+0x14a>
 8000a5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a60:	4439      	add	r1, r7
 8000a62:	e713      	b.n	800088c <__udivmoddi4+0xe4>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	e724      	b.n	80008b4 <__udivmoddi4+0x10c>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_idiv0>:
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a74:	4b3f      	ldr	r3, [pc, #252]	; (8000b74 <SystemInit+0x104>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a3e      	ldr	r2, [pc, #248]	; (8000b74 <SystemInit+0x104>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a84:	4b3b      	ldr	r3, [pc, #236]	; (8000b74 <SystemInit+0x104>)
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	4a3a      	ldr	r2, [pc, #232]	; (8000b74 <SystemInit+0x104>)
 8000a8a:	f043 0310 	orr.w	r3, r3, #16
 8000a8e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <SystemInit+0x108>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f003 030f 	and.w	r3, r3, #15
 8000a98:	2b06      	cmp	r3, #6
 8000a9a:	d807      	bhi.n	8000aac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a9c:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <SystemInit+0x108>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f023 030f 	bic.w	r3, r3, #15
 8000aa4:	4a34      	ldr	r2, [pc, #208]	; (8000b78 <SystemInit+0x108>)
 8000aa6:	f043 0307 	orr.w	r3, r3, #7
 8000aaa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aac:	4b33      	ldr	r3, [pc, #204]	; (8000b7c <SystemInit+0x10c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <SystemInit+0x10c>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab8:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <SystemInit+0x10c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000abe:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <SystemInit+0x10c>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	492e      	ldr	r1, [pc, #184]	; (8000b7c <SystemInit+0x10c>)
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <SystemInit+0x110>)
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <SystemInit+0x108>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f003 0308 	and.w	r3, r3, #8
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d007      	beq.n	8000ae6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ad6:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <SystemInit+0x108>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f023 030f 	bic.w	r3, r3, #15
 8000ade:	4a26      	ldr	r2, [pc, #152]	; (8000b78 <SystemInit+0x108>)
 8000ae0:	f043 0307 	orr.w	r3, r3, #7
 8000ae4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ae6:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <SystemInit+0x10c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000aec:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <SystemInit+0x10c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000af2:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <SystemInit+0x10c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af8:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <SystemInit+0x10c>)
 8000afa:	4a22      	ldr	r2, [pc, #136]	; (8000b84 <SystemInit+0x114>)
 8000afc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <SystemInit+0x10c>)
 8000b00:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <SystemInit+0x118>)
 8000b02:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <SystemInit+0x10c>)
 8000b06:	4a21      	ldr	r2, [pc, #132]	; (8000b8c <SystemInit+0x11c>)
 8000b08:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <SystemInit+0x10c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b10:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <SystemInit+0x10c>)
 8000b12:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <SystemInit+0x11c>)
 8000b14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <SystemInit+0x10c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <SystemInit+0x10c>)
 8000b1e:	4a1b      	ldr	r2, [pc, #108]	; (8000b8c <SystemInit+0x11c>)
 8000b20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <SystemInit+0x10c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <SystemInit+0x10c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <SystemInit+0x10c>)
 8000b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <SystemInit+0x10c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <SystemInit+0x120>)
 8000b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3e:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <SystemInit+0x120>)
 8000b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b44:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <SystemInit+0x124>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <SystemInit+0x128>)
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b52:	d202      	bcs.n	8000b5a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <SystemInit+0x12c>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <SystemInit+0x130>)
 8000b5c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b60:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <SystemInit+0x104>)
 8000b64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b68:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00
 8000b78:	52002000 	.word	0x52002000
 8000b7c:	58024400 	.word	0x58024400
 8000b80:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b84:	02020200 	.word	0x02020200
 8000b88:	01ff0000 	.word	0x01ff0000
 8000b8c:	01010280 	.word	0x01010280
 8000b90:	580000c0 	.word	0x580000c0
 8000b94:	5c001000 	.word	0x5c001000
 8000b98:	ffff0000 	.word	0xffff0000
 8000b9c:	51008108 	.word	0x51008108
 8000ba0:	52004000 	.word	0x52004000

08000ba4 <MPU6050_init>:
#define GYRO_XOUT_H 0x43
#define PWR_MGMT_1 0x6B
#define MPU6050 0xD0 // acceletometer direciont


void MPU6050_init(){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af04      	add	r7, sp, #16
	uint8_t check; // check data
	uint8_t data; //send data



	HAL_I2C_Mem_Read(&hi2c2,  MPU6050 , WHO_AM_I, 1, &check, 1, 1000);
 8000baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bae:	9302      	str	r3, [sp, #8]
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	9301      	str	r3, [sp, #4]
 8000bb4:	1cfb      	adds	r3, r7, #3
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	2301      	movs	r3, #1
 8000bba:	2275      	movs	r2, #117	; 0x75
 8000bbc:	21d0      	movs	r1, #208	; 0xd0
 8000bbe:	4830      	ldr	r0, [pc, #192]	; (8000c80 <MPU6050_init+0xdc>)
 8000bc0:	f001 fc68 	bl	8002494 <HAL_I2C_Mem_Read>
	if(check == 104){ // WHO_I_AM Register default value
 8000bc4:	78fb      	ldrb	r3, [r7, #3]
 8000bc6:	2b68      	cmp	r3, #104	; 0x68
 8000bc8:	d156      	bne.n	8000c78 <MPU6050_init+0xd4>


		// COnfigure clock to 8MHZ oscilator
		data = 0x00;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	70bb      	strb	r3, [r7, #2]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050, PWR_MGMT_1, 1, &data, 1, 1000);
 8000bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd2:	9302      	str	r3, [sp, #8]
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	9301      	str	r3, [sp, #4]
 8000bd8:	1cbb      	adds	r3, r7, #2
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	2301      	movs	r3, #1
 8000bde:	226b      	movs	r2, #107	; 0x6b
 8000be0:	21d0      	movs	r1, #208	; 0xd0
 8000be2:	4827      	ldr	r0, [pc, #156]	; (8000c80 <MPU6050_init+0xdc>)
 8000be4:	f001 fb42 	bl	800226c <HAL_I2C_Mem_Write>
		/* Sample rate = 8khz/(1+SMPLRT_DIV)
		 * Send 7 to SMPLRT_DIV register to obtain 1khz sample rate
		 * */
		data = 0x07;
 8000be8:	2307      	movs	r3, #7
 8000bea:	70bb      	strb	r3, [r7, #2]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050 , SMPLRT_DIV, 1, &data, 1, 1000);
 8000bec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf0:	9302      	str	r3, [sp, #8]
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	9301      	str	r3, [sp, #4]
 8000bf6:	1cbb      	adds	r3, r7, #2
 8000bf8:	9300      	str	r3, [sp, #0]
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	2219      	movs	r2, #25
 8000bfe:	21d0      	movs	r1, #208	; 0xd0
 8000c00:	481f      	ldr	r0, [pc, #124]	; (8000c80 <MPU6050_init+0xdc>)
 8000c02:	f001 fb33 	bl	800226c <HAL_I2C_Mem_Write>

		// Configure giroscope Full scale range
		// +-250 °/s => FS_SEL = 0
		data = 0x00;
 8000c06:	2300      	movs	r3, #0
 8000c08:	70bb      	strb	r3, [r7, #2]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050 , GYRO_CONFIG, 1, &data, 1, 1000);
 8000c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0e:	9302      	str	r3, [sp, #8]
 8000c10:	2301      	movs	r3, #1
 8000c12:	9301      	str	r3, [sp, #4]
 8000c14:	1cbb      	adds	r3, r7, #2
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	221b      	movs	r2, #27
 8000c1c:	21d0      	movs	r1, #208	; 0xd0
 8000c1e:	4818      	ldr	r0, [pc, #96]	; (8000c80 <MPU6050_init+0xdc>)
 8000c20:	f001 fb24 	bl	800226c <HAL_I2C_Mem_Write>
		// cONFIGURE ACCELEROMETER
		// +-2 G => AFS_SEL = 0
		data = 0x00;
 8000c24:	2300      	movs	r3, #0
 8000c26:	70bb      	strb	r3, [r7, #2]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050 , ACCEL_CONFIG, 1, &data, 1, 1000);
 8000c28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2c:	9302      	str	r3, [sp, #8]
 8000c2e:	2301      	movs	r3, #1
 8000c30:	9301      	str	r3, [sp, #4]
 8000c32:	1cbb      	adds	r3, r7, #2
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	2301      	movs	r3, #1
 8000c38:	221c      	movs	r2, #28
 8000c3a:	21d0      	movs	r1, #208	; 0xd0
 8000c3c:	4810      	ldr	r0, [pc, #64]	; (8000c80 <MPU6050_init+0xdc>)
 8000c3e:	f001 fb15 	bl	800226c <HAL_I2C_Mem_Write>

		for(int i = 0;i < 5;i++){ // confirmation
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	e014      	b.n	8000c72 <MPU6050_init+0xce>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <MPU6050_init+0xe0>)
 8000c4e:	f001 fa35 	bl	80020bc <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000c52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c56:	f000 ff41 	bl	8001adc <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	4809      	ldr	r0, [pc, #36]	; (8000c84 <MPU6050_init+0xe0>)
 8000c60:	f001 fa2c 	bl	80020bc <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000c64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c68:	f000 ff38 	bl	8001adc <HAL_Delay>
		for(int i = 0;i < 5;i++){ // confirmation
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b04      	cmp	r3, #4
 8000c76:	dde7      	ble.n	8000c48 <MPU6050_init+0xa4>

		}

	}
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	240006a4 	.word	0x240006a4
 8000c84:	58020400 	.word	0x58020400

08000c88 <MPU6050_read_acc>:


void MPU6050_read_acc(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b098      	sub	sp, #96	; 0x60
 8000c8c:	af04      	add	r7, sp, #16
	uint8_t buffer[6];
	int16_t ax_raw,ay_raw,az_raw;
	float ax,ay,az;
	HAL_I2C_Mem_Read(&hi2c2, MPU6050, ACCEL_XOUT_H, 1, &buffer, 6, 1000);
 8000c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c92:	9302      	str	r3, [sp, #8]
 8000c94:	2306      	movs	r3, #6
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	223b      	movs	r2, #59	; 0x3b
 8000ca2:	21d0      	movs	r1, #208	; 0xd0
 8000ca4:	4852      	ldr	r0, [pc, #328]	; (8000df0 <MPU6050_read_acc+0x168>)
 8000ca6:	f001 fbf5 	bl	8002494 <HAL_I2C_Mem_Read>
	ax_raw = (int16_t)(buffer[0] << 8 | buffer[1]);
 8000caa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000cae:	021b      	lsls	r3, r3, #8
 8000cb0:	b21a      	sxth	r2, r3
 8000cb2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	ay_raw = (int16_t)(buffer[2] << 8 | buffer[3]);
 8000cbe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000cc2:	021b      	lsls	r3, r3, #8
 8000cc4:	b21a      	sxth	r2, r3
 8000cc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cca:	b21b      	sxth	r3, r3
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	az_raw = (int16_t)(buffer[4] << 8 | buffer[5]);
 8000cd2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000cd6:	021b      	lsls	r3, r3, #8
 8000cd8:	b21a      	sxth	r2, r3
 8000cda:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000cde:	b21b      	sxth	r3, r3
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	ax = ax_raw/16384.0;
 8000ce6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000cf2:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 8000de8 <MPU6050_read_acc+0x160>
 8000cf6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cfa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cfe:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	ay = ay_raw/16384.0;
 8000d02:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8000d06:	ee07 3a90 	vmov	s15, r3
 8000d0a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d0e:	ed9f 5b36 	vldr	d5, [pc, #216]	; 8000de8 <MPU6050_read_acc+0x160>
 8000d12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d16:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d1a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	az = az_raw/16384.0;
 8000d1e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000d22:	ee07 3a90 	vmov	s15, r3
 8000d26:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d2a:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8000de8 <MPU6050_read_acc+0x160>
 8000d2e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d36:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	// uart transfer
	char uartBuffer[50];
	uint8_t uart_buff_len;

	uart_buff_len = sprintf(uartBuffer,"Accelerometer \r\n");
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	492d      	ldr	r1, [pc, #180]	; (8000df4 <MPU6050_read_acc+0x16c>)
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f007 f96a 	bl	8008018 <siprintf>
 8000d44:	4603      	mov	r3, r0
 8000d46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	HAL_UART_Transmit(&huart3, (uint8_t *) uartBuffer, uart_buff_len, 1000);
 8000d4a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	4639      	mov	r1, r7
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	4828      	ldr	r0, [pc, #160]	; (8000df8 <MPU6050_read_acc+0x170>)
 8000d58:	f004 ffba 	bl	8005cd0 <HAL_UART_Transmit>

	uart_buff_len = sprintf(uartBuffer,"AX: %.2f m/s^2 \r\n",ax);
 8000d5c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000d60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d64:	4638      	mov	r0, r7
 8000d66:	ec53 2b17 	vmov	r2, r3, d7
 8000d6a:	4924      	ldr	r1, [pc, #144]	; (8000dfc <MPU6050_read_acc+0x174>)
 8000d6c:	f007 f954 	bl	8008018 <siprintf>
 8000d70:	4603      	mov	r3, r0
 8000d72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	HAL_UART_Transmit(&huart3, (uint8_t *) uartBuffer, uart_buff_len, 1000);
 8000d76:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	4639      	mov	r1, r7
 8000d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d82:	481d      	ldr	r0, [pc, #116]	; (8000df8 <MPU6050_read_acc+0x170>)
 8000d84:	f004 ffa4 	bl	8005cd0 <HAL_UART_Transmit>

	uart_buff_len = sprintf(uartBuffer,"AY: %.2f m/s^2 \r\n",ay);
 8000d88:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000d8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d90:	4638      	mov	r0, r7
 8000d92:	ec53 2b17 	vmov	r2, r3, d7
 8000d96:	491a      	ldr	r1, [pc, #104]	; (8000e00 <MPU6050_read_acc+0x178>)
 8000d98:	f007 f93e 	bl	8008018 <siprintf>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	HAL_UART_Transmit(&huart3, (uint8_t *) uartBuffer, uart_buff_len, 1000);
 8000da2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	4639      	mov	r1, r7
 8000daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dae:	4812      	ldr	r0, [pc, #72]	; (8000df8 <MPU6050_read_acc+0x170>)
 8000db0:	f004 ff8e 	bl	8005cd0 <HAL_UART_Transmit>

	uart_buff_len = sprintf(uartBuffer,"AZ: %.2f m/s^2 \r\n",az);
 8000db4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000db8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dbc:	4638      	mov	r0, r7
 8000dbe:	ec53 2b17 	vmov	r2, r3, d7
 8000dc2:	4910      	ldr	r1, [pc, #64]	; (8000e04 <MPU6050_read_acc+0x17c>)
 8000dc4:	f007 f928 	bl	8008018 <siprintf>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	HAL_UART_Transmit(&huart3, (uint8_t *) uartBuffer, uart_buff_len, 1000);
 8000dce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	4639      	mov	r1, r7
 8000dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dda:	4807      	ldr	r0, [pc, #28]	; (8000df8 <MPU6050_read_acc+0x170>)
 8000ddc:	f004 ff78 	bl	8005cd0 <HAL_UART_Transmit>

}
 8000de0:	bf00      	nop
 8000de2:	3750      	adds	r7, #80	; 0x50
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	00000000 	.word	0x00000000
 8000dec:	40d00000 	.word	0x40d00000
 8000df0:	240006a4 	.word	0x240006a4
 8000df4:	0800ba40 	.word	0x0800ba40
 8000df8:	2400020c 	.word	0x2400020c
 8000dfc:	0800ba54 	.word	0x0800ba54
 8000e00:	0800ba68 	.word	0x0800ba68
 8000e04:	0800ba7c 	.word	0x0800ba7c

08000e08 <MPU6050_read_gyro>:

void MPU6050_read_gyro(){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b098      	sub	sp, #96	; 0x60
 8000e0c:	af04      	add	r7, sp, #16
	uint8_t buffer[6];
	int16_t gx_raw,gy_raw,gz_raw;
	float gx,gy,gz;
	HAL_I2C_Mem_Read(&hi2c2, MPU6050, GYRO_XOUT_H, 1, buffer, 6, 1000);
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	9302      	str	r3, [sp, #8]
 8000e14:	2306      	movs	r3, #6
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	2301      	movs	r3, #1
 8000e20:	2243      	movs	r2, #67	; 0x43
 8000e22:	21d0      	movs	r1, #208	; 0xd0
 8000e24:	4852      	ldr	r0, [pc, #328]	; (8000f70 <MPU6050_read_gyro+0x168>)
 8000e26:	f001 fb35 	bl	8002494 <HAL_I2C_Mem_Read>
	gx_raw = (int16_t)(buffer[0] << 8 | buffer [1]);
 8000e2a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	gy_raw = (int16_t)(buffer[2] << 8 | buffer [3]);
 8000e3e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e4a:	b21b      	sxth	r3, r3
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	gz_raw = (int16_t)(buffer[4] << 8 | buffer [5]);
 8000e52:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000e56:	021b      	lsls	r3, r3, #8
 8000e58:	b21a      	sxth	r2, r3
 8000e5a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	4313      	orrs	r3, r2
 8000e62:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a


	gx = gx_raw/131.0;
 8000e66:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8000e6a:	ee07 3a90 	vmov	s15, r3
 8000e6e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e72:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 8000f68 <MPU6050_read_gyro+0x160>
 8000e76:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e7a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e7e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	gy = gy_raw/131.0;
 8000e82:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8000e86:	ee07 3a90 	vmov	s15, r3
 8000e8a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e8e:	ed9f 5b36 	vldr	d5, [pc, #216]	; 8000f68 <MPU6050_read_gyro+0x160>
 8000e92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e96:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e9a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	gz = gz_raw/131.0;
 8000e9e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000ea2:	ee07 3a90 	vmov	s15, r3
 8000ea6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000eaa:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8000f68 <MPU6050_read_gyro+0x160>
 8000eae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000eb2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eb6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	// uart transfer
	char uartBuffer[50];
	uint8_t uart_buff_len;


	uart_buff_len = sprintf(uartBuffer,"Giroscope \r\n");
 8000eba:	463b      	mov	r3, r7
 8000ebc:	492d      	ldr	r1, [pc, #180]	; (8000f74 <MPU6050_read_gyro+0x16c>)
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f007 f8aa 	bl	8008018 <siprintf>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	HAL_UART_Transmit(&huart3, (uint8_t *) uartBuffer, uart_buff_len, 1000);
 8000eca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4639      	mov	r1, r7
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	4828      	ldr	r0, [pc, #160]	; (8000f78 <MPU6050_read_gyro+0x170>)
 8000ed8:	f004 fefa 	bl	8005cd0 <HAL_UART_Transmit>

	uart_buff_len = sprintf(uartBuffer,"GX: %.2f °/s \r\n",gx);
 8000edc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000ee0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ee4:	4638      	mov	r0, r7
 8000ee6:	ec53 2b17 	vmov	r2, r3, d7
 8000eea:	4924      	ldr	r1, [pc, #144]	; (8000f7c <MPU6050_read_gyro+0x174>)
 8000eec:	f007 f894 	bl	8008018 <siprintf>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	HAL_UART_Transmit(&huart3, (uint8_t *) uartBuffer, uart_buff_len, 1000);
 8000ef6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	4639      	mov	r1, r7
 8000efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f02:	481d      	ldr	r0, [pc, #116]	; (8000f78 <MPU6050_read_gyro+0x170>)
 8000f04:	f004 fee4 	bl	8005cd0 <HAL_UART_Transmit>

	uart_buff_len = sprintf(uartBuffer,"GY: %.2f °/s \r\n",gy);
 8000f08:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000f0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f10:	4638      	mov	r0, r7
 8000f12:	ec53 2b17 	vmov	r2, r3, d7
 8000f16:	491a      	ldr	r1, [pc, #104]	; (8000f80 <MPU6050_read_gyro+0x178>)
 8000f18:	f007 f87e 	bl	8008018 <siprintf>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	HAL_UART_Transmit(&huart3, (uint8_t *) uartBuffer, uart_buff_len, 1000);
 8000f22:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	4639      	mov	r1, r7
 8000f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2e:	4812      	ldr	r0, [pc, #72]	; (8000f78 <MPU6050_read_gyro+0x170>)
 8000f30:	f004 fece 	bl	8005cd0 <HAL_UART_Transmit>

	uart_buff_len = sprintf(uartBuffer,"GZ: %.2f °/s \r\n",gz);
 8000f34:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000f38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	ec53 2b17 	vmov	r2, r3, d7
 8000f42:	4910      	ldr	r1, [pc, #64]	; (8000f84 <MPU6050_read_gyro+0x17c>)
 8000f44:	f007 f868 	bl	8008018 <siprintf>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	HAL_UART_Transmit(&huart3, (uint8_t *) uartBuffer, uart_buff_len, 1000);
 8000f4e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	4639      	mov	r1, r7
 8000f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5a:	4807      	ldr	r0, [pc, #28]	; (8000f78 <MPU6050_read_gyro+0x170>)
 8000f5c:	f004 feb8 	bl	8005cd0 <HAL_UART_Transmit>
}
 8000f60:	bf00      	nop
 8000f62:	3750      	adds	r7, #80	; 0x50
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	00000000 	.word	0x00000000
 8000f6c:	40606000 	.word	0x40606000
 8000f70:	240006a4 	.word	0x240006a4
 8000f74:	0800ba90 	.word	0x0800ba90
 8000f78:	2400020c 	.word	0x2400020c
 8000f7c:	0800baa0 	.word	0x0800baa0
 8000f80:	0800bab4 	.word	0x0800bab4
 8000f84:	0800bac8 	.word	0x0800bac8

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000f8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f92:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000f94:	bf00      	nop
 8000f96:	4b27      	ldr	r3, [pc, #156]	; (8001034 <main+0xac>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d004      	beq.n	8000fac <main+0x24>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	1e5a      	subs	r2, r3, #1
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	dcf4      	bgt.n	8000f96 <main+0xe>
  if ( timeout < 0 )
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	da01      	bge.n	8000fb6 <main+0x2e>
  {
  Error_Handler();
 8000fb2:	f000 fa41 	bl	8001438 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb6:	f000 fcff 	bl	80019b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fba:	f000 f83f 	bl	800103c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <main+0xac>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <main+0xac>)
 8000fc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <main+0xac>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f001 f887 	bl	80020f0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f001 f89d 	bl	8002124 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000fea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fee:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000ff0:	bf00      	nop
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <main+0xac>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d104      	bne.n	8001008 <main+0x80>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	1e5a      	subs	r2, r3, #1
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	dcf4      	bgt.n	8000ff2 <main+0x6a>
if ( timeout < 0 )
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	da01      	bge.n	8001012 <main+0x8a>
{
Error_Handler();
 800100e:	f000 fa13 	bl	8001438 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001012:	f000 f98d 	bl	8001330 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001016:	f000 f90d 	bl	8001234 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800101a:	f000 f957 	bl	80012cc <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 800101e:	f000 f8d1 	bl	80011c4 <MX_TIM7_Init>
  MX_I2C2_Init();
 8001022:	f000 f88f 	bl	8001144 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <main+0xb0>)
 8001028:	f004 fb0a 	bl	8005640 <HAL_TIM_Base_Start_IT>
  MPU6050_init();
 800102c:	f7ff fdba 	bl	8000ba4 <MPU6050_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001030:	e7fe      	b.n	8001030 <main+0xa8>
 8001032:	bf00      	nop
 8001034:	58024400 	.word	0x58024400
 8001038:	240006f0 	.word	0x240006f0

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b09c      	sub	sp, #112	; 0x70
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001046:	224c      	movs	r2, #76	; 0x4c
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f006 f98e 	bl	800736c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2220      	movs	r2, #32
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f006 f988 	bl	800736c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800105c:	2004      	movs	r0, #4
 800105e:	f001 ff2f 	bl	8002ec0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001062:	2300      	movs	r3, #0
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	4b34      	ldr	r3, [pc, #208]	; (8001138 <SystemClock_Config+0xfc>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	4a33      	ldr	r2, [pc, #204]	; (8001138 <SystemClock_Config+0xfc>)
 800106c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001070:	6193      	str	r3, [r2, #24]
 8001072:	4b31      	ldr	r3, [pc, #196]	; (8001138 <SystemClock_Config+0xfc>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	4b2f      	ldr	r3, [pc, #188]	; (800113c <SystemClock_Config+0x100>)
 800107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001080:	4a2e      	ldr	r2, [pc, #184]	; (800113c <SystemClock_Config+0x100>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001088:	4b2c      	ldr	r3, [pc, #176]	; (800113c <SystemClock_Config+0x100>)
 800108a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001094:	bf00      	nop
 8001096:	4b28      	ldr	r3, [pc, #160]	; (8001138 <SystemClock_Config+0xfc>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800109e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010a2:	d1f8      	bne.n	8001096 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80010a4:	4b26      	ldr	r3, [pc, #152]	; (8001140 <SystemClock_Config+0x104>)
 80010a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a8:	f023 0303 	bic.w	r3, r3, #3
 80010ac:	4a24      	ldr	r2, [pc, #144]	; (8001140 <SystemClock_Config+0x104>)
 80010ae:	f043 0302 	orr.w	r3, r3, #2
 80010b2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b4:	2301      	movs	r3, #1
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010be:	2302      	movs	r3, #2
 80010c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c2:	2302      	movs	r3, #2
 80010c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010c6:	2301      	movs	r3, #1
 80010c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80010ca:	2378      	movs	r3, #120	; 0x78
 80010cc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010d2:	2302      	movs	r3, #2
 80010d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010d6:	2302      	movs	r3, #2
 80010d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010da:	230c      	movs	r3, #12
 80010dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010de:	2300      	movs	r3, #0
 80010e0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ea:	4618      	mov	r0, r3
 80010ec:	f001 ff52 	bl	8002f94 <HAL_RCC_OscConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80010f6:	f000 f99f 	bl	8001438 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fa:	233f      	movs	r3, #63	; 0x3f
 80010fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fe:	2303      	movs	r3, #3
 8001100:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001106:	2308      	movs	r3, #8
 8001108:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800110a:	2340      	movs	r3, #64	; 0x40
 800110c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800110e:	2340      	movs	r3, #64	; 0x40
 8001110:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001116:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001118:	2340      	movs	r3, #64	; 0x40
 800111a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2104      	movs	r1, #4
 8001120:	4618      	mov	r0, r3
 8001122:	f002 fb47 	bl	80037b4 <HAL_RCC_ClockConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800112c:	f000 f984 	bl	8001438 <Error_Handler>
  }
}
 8001130:	bf00      	nop
 8001132:	3770      	adds	r7, #112	; 0x70
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	58024800 	.word	0x58024800
 800113c:	58000400 	.word	0x58000400
 8001140:	58024400 	.word	0x58024400

08001144 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_I2C2_Init+0x74>)
 800114a:	4a1c      	ldr	r2, [pc, #112]	; (80011bc <MX_I2C2_Init+0x78>)
 800114c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_I2C2_Init+0x74>)
 8001150:	4a1b      	ldr	r2, [pc, #108]	; (80011c0 <MX_I2C2_Init+0x7c>)
 8001152:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_I2C2_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_I2C2_Init+0x74>)
 800115c:	2201      	movs	r2, #1
 800115e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_I2C2_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_I2C2_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_I2C2_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_I2C2_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_I2C2_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800117e:	480e      	ldr	r0, [pc, #56]	; (80011b8 <MX_I2C2_Init+0x74>)
 8001180:	f000 ffe4 	bl	800214c <HAL_I2C_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800118a:	f000 f955 	bl	8001438 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800118e:	2100      	movs	r1, #0
 8001190:	4809      	ldr	r0, [pc, #36]	; (80011b8 <MX_I2C2_Init+0x74>)
 8001192:	f001 fcb5 	bl	8002b00 <HAL_I2CEx_ConfigAnalogFilter>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800119c:	f000 f94c 	bl	8001438 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011a0:	2100      	movs	r1, #0
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_I2C2_Init+0x74>)
 80011a4:	f001 fcf7 	bl	8002b96 <HAL_I2CEx_ConfigDigitalFilter>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80011ae:	f000 f943 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	240006a4 	.word	0x240006a4
 80011bc:	40005800 	.word	0x40005800
 80011c0:	307075b1 	.word	0x307075b1

080011c4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80011d4:	4b15      	ldr	r3, [pc, #84]	; (800122c <MX_TIM7_Init+0x68>)
 80011d6:	4a16      	ldr	r2, [pc, #88]	; (8001230 <MX_TIM7_Init+0x6c>)
 80011d8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 47999;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_TIM7_Init+0x68>)
 80011dc:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80011e0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_TIM7_Init+0x68>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4999;
 80011e8:	4b10      	ldr	r3, [pc, #64]	; (800122c <MX_TIM7_Init+0x68>)
 80011ea:	f241 3287 	movw	r2, #4999	; 0x1387
 80011ee:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_TIM7_Init+0x68>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80011f6:	480d      	ldr	r0, [pc, #52]	; (800122c <MX_TIM7_Init+0x68>)
 80011f8:	f004 f9ca 	bl	8005590 <HAL_TIM_Base_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001202:	f000 f919 	bl	8001438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	; (800122c <MX_TIM7_Init+0x68>)
 8001214:	f004 fc66 	bl	8005ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800121e:	f000 f90b 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	240006f0 	.word	0x240006f0
 8001230:	40001400 	.word	0x40001400

08001234 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001238:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 800123a:	4a23      	ldr	r2, [pc, #140]	; (80012c8 <MX_USART3_UART_Init+0x94>)
 800123c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800123e:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 8001240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001244:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001246:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001258:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 800125a:	220c      	movs	r2, #12
 800125c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001264:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 8001272:	2200      	movs	r2, #0
 8001274:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 8001278:	2200      	movs	r2, #0
 800127a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800127c:	4811      	ldr	r0, [pc, #68]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 800127e:	f004 fcd7 	bl	8005c30 <HAL_UART_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001288:	f000 f8d6 	bl	8001438 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800128c:	2100      	movs	r1, #0
 800128e:	480d      	ldr	r0, [pc, #52]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 8001290:	f005 fcba 	bl	8006c08 <HAL_UARTEx_SetTxFifoThreshold>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800129a:	f000 f8cd 	bl	8001438 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800129e:	2100      	movs	r1, #0
 80012a0:	4808      	ldr	r0, [pc, #32]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 80012a2:	f005 fcef 	bl	8006c84 <HAL_UARTEx_SetRxFifoThreshold>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80012ac:	f000 f8c4 	bl	8001438 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <MX_USART3_UART_Init+0x90>)
 80012b2:	f005 fc70 	bl	8006b96 <HAL_UARTEx_DisableFifoMode>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80012bc:	f000 f8bc 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	2400020c 	.word	0x2400020c
 80012c8:	40004800 	.word	0x40004800

080012cc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012d2:	4a16      	ldr	r2, [pc, #88]	; (800132c <MX_USB_OTG_FS_PCD_Init+0x60>)
 80012d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012d8:	2209      	movs	r2, #9
 80012da:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012de:	2202      	movs	r2, #2
 80012e0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012ea:	2202      	movs	r2, #2
 80012ec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001302:	2201      	movs	r2, #1
 8001304:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001308:	2201      	movs	r2, #1
 800130a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800130e:	2200      	movs	r2, #0
 8001310:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001314:	f001 fc8b 	bl	8002c2e <HAL_PCD_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800131e:	f000 f88b 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2400029c 	.word	0x2400029c
 800132c:	40080000 	.word	0x40080000

08001330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001346:	4b31      	ldr	r3, [pc, #196]	; (800140c <MX_GPIO_Init+0xdc>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134c:	4a2f      	ldr	r2, [pc, #188]	; (800140c <MX_GPIO_Init+0xdc>)
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001356:	4b2d      	ldr	r3, [pc, #180]	; (800140c <MX_GPIO_Init+0xdc>)
 8001358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <MX_GPIO_Init+0xdc>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136a:	4a28      	ldr	r2, [pc, #160]	; (800140c <MX_GPIO_Init+0xdc>)
 800136c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001370:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001374:	4b25      	ldr	r3, [pc, #148]	; (800140c <MX_GPIO_Init+0xdc>)
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	4b22      	ldr	r3, [pc, #136]	; (800140c <MX_GPIO_Init+0xdc>)
 8001384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001388:	4a20      	ldr	r2, [pc, #128]	; (800140c <MX_GPIO_Init+0xdc>)
 800138a:	f043 0302 	orr.w	r3, r3, #2
 800138e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001392:	4b1e      	ldr	r3, [pc, #120]	; (800140c <MX_GPIO_Init+0xdc>)
 8001394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <MX_GPIO_Init+0xdc>)
 80013a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a6:	4a19      	ldr	r2, [pc, #100]	; (800140c <MX_GPIO_Init+0xdc>)
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <MX_GPIO_Init+0xdc>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <MX_GPIO_Init+0xdc>)
 80013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c4:	4a11      	ldr	r2, [pc, #68]	; (800140c <MX_GPIO_Init+0xdc>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <MX_GPIO_Init+0xdc>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2101      	movs	r1, #1
 80013e0:	480b      	ldr	r0, [pc, #44]	; (8001410 <MX_GPIO_Init+0xe0>)
 80013e2:	f000 fe6b 	bl	80020bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80013e6:	2301      	movs	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ee:	2301      	movs	r3, #1
 80013f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f2:	2302      	movs	r3, #2
 80013f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_GPIO_Init+0xe0>)
 80013fe:	f000 fcad 	bl	8001d5c <HAL_GPIO_Init>

}
 8001402:	bf00      	nop
 8001404:	3728      	adds	r7, #40	; 0x28
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	58024400 	.word	0x58024400
 8001410:	58020400 	.word	0x58020400

08001414 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	if(htim == &htim7){
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a05      	ldr	r2, [pc, #20]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d103      	bne.n	800142c <HAL_TIM_PeriodElapsedCallback+0x18>
		MPU6050_read_acc();
 8001424:	f7ff fc30 	bl	8000c88 <MPU6050_read_acc>
		MPU6050_read_gyro();
 8001428:	f7ff fcee 	bl	8000e08 <MPU6050_read_gyro>
	}
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	240006f0 	.word	0x240006f0

08001438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800143c:	b672      	cpsid	i
}
 800143e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001440:	e7fe      	b.n	8001440 <Error_Handler+0x8>
	...

08001444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_MspInit+0x30>)
 800144c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001450:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_MspInit+0x30>)
 8001452:	f043 0302 	orr.w	r3, r3, #2
 8001456:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_MspInit+0x30>)
 800145c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	58024400 	.word	0x58024400

08001478 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b0b8      	sub	sp, #224	; 0xe0
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	22bc      	movs	r2, #188	; 0xbc
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f005 ff67 	bl	800736c <memset>
  if(hi2c->Instance==I2C2)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a25      	ldr	r2, [pc, #148]	; (8001538 <HAL_I2C_MspInit+0xc0>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d142      	bne.n	800152e <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80014a8:	2308      	movs	r3, #8
 80014aa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b2:	f107 0310 	add.w	r3, r7, #16
 80014b6:	4618      	mov	r0, r3
 80014b8:	f002 fd08 	bl	8003ecc <HAL_RCCEx_PeriphCLKConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80014c2:	f7ff ffb9 	bl	8001438 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	4b1d      	ldr	r3, [pc, #116]	; (800153c <HAL_I2C_MspInit+0xc4>)
 80014c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014cc:	4a1b      	ldr	r2, [pc, #108]	; (800153c <HAL_I2C_MspInit+0xc4>)
 80014ce:	f043 0302 	orr.w	r3, r3, #2
 80014d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d6:	4b19      	ldr	r3, [pc, #100]	; (800153c <HAL_I2C_MspInit+0xc4>)
 80014d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ec:	2312      	movs	r3, #18
 80014ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014fe:	2304      	movs	r3, #4
 8001500:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001504:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001508:	4619      	mov	r1, r3
 800150a:	480d      	ldr	r0, [pc, #52]	; (8001540 <HAL_I2C_MspInit+0xc8>)
 800150c:	f000 fc26 	bl	8001d5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_I2C_MspInit+0xc4>)
 8001512:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001516:	4a09      	ldr	r2, [pc, #36]	; (800153c <HAL_I2C_MspInit+0xc4>)
 8001518:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800151c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_I2C_MspInit+0xc4>)
 8001522:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800152e:	bf00      	nop
 8001530:	37e0      	adds	r7, #224	; 0xe0
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40005800 	.word	0x40005800
 800153c:	58024400 	.word	0x58024400
 8001540:	58020400 	.word	0x58020400

08001544 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0e      	ldr	r2, [pc, #56]	; (800158c <HAL_TIM_Base_MspInit+0x48>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d116      	bne.n	8001584 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <HAL_TIM_Base_MspInit+0x4c>)
 8001558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800155c:	4a0c      	ldr	r2, [pc, #48]	; (8001590 <HAL_TIM_Base_MspInit+0x4c>)
 800155e:	f043 0320 	orr.w	r3, r3, #32
 8001562:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <HAL_TIM_Base_MspInit+0x4c>)
 8001568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800156c:	f003 0320 	and.w	r3, r3, #32
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001574:	2200      	movs	r2, #0
 8001576:	2100      	movs	r1, #0
 8001578:	2037      	movs	r0, #55	; 0x37
 800157a:	f000 fbba 	bl	8001cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800157e:	2037      	movs	r0, #55	; 0x37
 8001580:	f000 fbd1 	bl	8001d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40001400 	.word	0x40001400
 8001590:	58024400 	.word	0x58024400

08001594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b0b8      	sub	sp, #224	; 0xe0
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	22bc      	movs	r2, #188	; 0xbc
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f005 fed9 	bl	800736c <memset>
  if(huart->Instance==USART3)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a25      	ldr	r2, [pc, #148]	; (8001654 <HAL_UART_MspInit+0xc0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d142      	bne.n	800164a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015c4:	2302      	movs	r3, #2
 80015c6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ce:	f107 0310 	add.w	r3, r7, #16
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 fc7a 	bl	8003ecc <HAL_RCCEx_PeriphCLKConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015de:	f7ff ff2b 	bl	8001438 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015e2:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <HAL_UART_MspInit+0xc4>)
 80015e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015e8:	4a1b      	ldr	r2, [pc, #108]	; (8001658 <HAL_UART_MspInit+0xc4>)
 80015ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_UART_MspInit+0xc4>)
 80015f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_UART_MspInit+0xc4>)
 8001602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001606:	4a14      	ldr	r2, [pc, #80]	; (8001658 <HAL_UART_MspInit+0xc4>)
 8001608:	f043 0308 	orr.w	r3, r3, #8
 800160c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <HAL_UART_MspInit+0xc4>)
 8001612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800161e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001622:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001638:	2307      	movs	r3, #7
 800163a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <HAL_UART_MspInit+0xc8>)
 8001646:	f000 fb89 	bl	8001d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800164a:	bf00      	nop
 800164c:	37e0      	adds	r7, #224	; 0xe0
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40004800 	.word	0x40004800
 8001658:	58024400 	.word	0x58024400
 800165c:	58020c00 	.word	0x58020c00

08001660 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b0b8      	sub	sp, #224	; 0xe0
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001678:	f107 0310 	add.w	r3, r7, #16
 800167c:	22bc      	movs	r2, #188	; 0xbc
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f005 fe73 	bl	800736c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a36      	ldr	r2, [pc, #216]	; (8001764 <HAL_PCD_MspInit+0x104>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d165      	bne.n	800175c <HAL_PCD_MspInit+0xfc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001690:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001694:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001696:	2301      	movs	r3, #1
 8001698:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 800169a:	2318      	movs	r3, #24
 800169c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800169e:	2302      	movs	r3, #2
 80016a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 80016a2:	2304      	movs	r3, #4
 80016a4:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80016a6:	2302      	movs	r3, #2
 80016a8:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80016aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016ae:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80016b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	4618      	mov	r0, r3
 80016c2:	f002 fc03 	bl	8003ecc <HAL_RCCEx_PeriphCLKConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80016cc:	f7ff feb4 	bl	8001438 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80016d0:	f001 fc50 	bl	8002f74 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d4:	4b24      	ldr	r3, [pc, #144]	; (8001768 <HAL_PCD_MspInit+0x108>)
 80016d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016da:	4a23      	ldr	r2, [pc, #140]	; (8001768 <HAL_PCD_MspInit+0x108>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e4:	4b20      	ldr	r3, [pc, #128]	; (8001768 <HAL_PCD_MspInit+0x108>)
 80016e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80016f2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80016f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800170c:	230a      	movs	r3, #10
 800170e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001716:	4619      	mov	r1, r3
 8001718:	4814      	ldr	r0, [pc, #80]	; (800176c <HAL_PCD_MspInit+0x10c>)
 800171a:	f000 fb1f 	bl	8001d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800171e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001722:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001726:	2300      	movs	r3, #0
 8001728:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001736:	4619      	mov	r1, r3
 8001738:	480c      	ldr	r0, [pc, #48]	; (800176c <HAL_PCD_MspInit+0x10c>)
 800173a:	f000 fb0f 	bl	8001d5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_PCD_MspInit+0x108>)
 8001740:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001744:	4a08      	ldr	r2, [pc, #32]	; (8001768 <HAL_PCD_MspInit+0x108>)
 8001746:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800174a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_PCD_MspInit+0x108>)
 8001750:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800175c:	bf00      	nop
 800175e:	37e0      	adds	r7, #224	; 0xe0
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40080000 	.word	0x40080000
 8001768:	58024400 	.word	0x58024400
 800176c:	58020000 	.word	0x58020000

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <NMI_Handler+0x4>

08001776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <HardFault_Handler+0x4>

0800177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <MemManage_Handler+0x4>

08001782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <UsageFault_Handler+0x4>

0800178e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017bc:	f000 f96e 	bl	8001a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <TIM7_IRQHandler+0x10>)
 80017ca:	f003 ffa9 	bl	8005720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	240006f0 	.word	0x240006f0

080017d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
	return 1;
 80017dc:	2301      	movs	r3, #1
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <_kill>:

int _kill(int pid, int sig)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017f2:	f005 fd91 	bl	8007318 <__errno>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2216      	movs	r2, #22
 80017fa:	601a      	str	r2, [r3, #0]
	return -1;
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <_exit>:

void _exit (int status)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001810:	f04f 31ff 	mov.w	r1, #4294967295
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ffe7 	bl	80017e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800181a:	e7fe      	b.n	800181a <_exit+0x12>

0800181c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	e00a      	b.n	8001844 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800182e:	f3af 8000 	nop.w
 8001832:	4601      	mov	r1, r0
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	60ba      	str	r2, [r7, #8]
 800183a:	b2ca      	uxtb	r2, r1
 800183c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	3301      	adds	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	429a      	cmp	r2, r3
 800184a:	dbf0      	blt.n	800182e <_read+0x12>
	}

return len;
 800184c:	687b      	ldr	r3, [r7, #4]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	e009      	b.n	800187c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	60ba      	str	r2, [r7, #8]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3301      	adds	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	429a      	cmp	r2, r3
 8001882:	dbf1      	blt.n	8001868 <_write+0x12>
	}
	return len;
 8001884:	687b      	ldr	r3, [r7, #4]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <_close>:

int _close(int file)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
	return -1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018b6:	605a      	str	r2, [r3, #4]
	return 0;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <_isatty>:

int _isatty(int file)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
	return 1;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
	return 0;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001900:	4a14      	ldr	r2, [pc, #80]	; (8001954 <_sbrk+0x5c>)
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <_sbrk+0x60>)
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <_sbrk+0x64>)
 8001916:	4a12      	ldr	r2, [pc, #72]	; (8001960 <_sbrk+0x68>)
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	429a      	cmp	r2, r3
 8001926:	d207      	bcs.n	8001938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001928:	f005 fcf6 	bl	8007318 <__errno>
 800192c:	4603      	mov	r3, r0
 800192e:	220c      	movs	r2, #12
 8001930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	e009      	b.n	800194c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	4a05      	ldr	r2, [pc, #20]	; (800195c <_sbrk+0x64>)
 8001948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	24080000 	.word	0x24080000
 8001958:	00000400 	.word	0x00000400
 800195c:	24000200 	.word	0x24000200
 8001960:	24000750 	.word	0x24000750

08001964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800199c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001968:	f7ff f882 	bl	8000a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800196c:	480c      	ldr	r0, [pc, #48]	; (80019a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800196e:	490d      	ldr	r1, [pc, #52]	; (80019a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001970:	4a0d      	ldr	r2, [pc, #52]	; (80019a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001974:	e002      	b.n	800197c <LoopCopyDataInit>

08001976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197a:	3304      	adds	r3, #4

0800197c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800197c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001980:	d3f9      	bcc.n	8001976 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001984:	4c0a      	ldr	r4, [pc, #40]	; (80019b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001988:	e001      	b.n	800198e <LoopFillZerobss>

0800198a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800198c:	3204      	adds	r2, #4

0800198e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001990:	d3fb      	bcc.n	800198a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001992:	f005 fcc7 	bl	8007324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001996:	f7ff faf7 	bl	8000f88 <main>
  bx  lr
 800199a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800199c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80019a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019a4:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 80019a8:	0800bfdc 	.word	0x0800bfdc
  ldr r2, =_sbss
 80019ac:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 80019b0:	24000750 	.word	0x24000750

080019b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b4:	e7fe      	b.n	80019b4 <ADC3_IRQHandler>
	...

080019b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019be:	2003      	movs	r0, #3
 80019c0:	f000 f98c 	bl	8001cdc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019c4:	f002 f8ac 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 80019c8:	4602      	mov	r2, r0
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_Init+0x68>)
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	0a1b      	lsrs	r3, r3, #8
 80019d0:	f003 030f 	and.w	r3, r3, #15
 80019d4:	4913      	ldr	r1, [pc, #76]	; (8001a24 <HAL_Init+0x6c>)
 80019d6:	5ccb      	ldrb	r3, [r1, r3]
 80019d8:	f003 031f 	and.w	r3, r3, #31
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
 80019e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_Init+0x68>)
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <HAL_Init+0x6c>)
 80019ec:	5cd3      	ldrb	r3, [r2, r3]
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
 80019f8:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <HAL_Init+0x70>)
 80019fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019fc:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <HAL_Init+0x74>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a02:	2000      	movs	r0, #0
 8001a04:	f000 f814 	bl	8001a30 <HAL_InitTick>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e002      	b.n	8001a18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a12:	f7ff fd17 	bl	8001444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	58024400 	.word	0x58024400
 8001a24:	0800badc 	.word	0x0800badc
 8001a28:	24000004 	.word	0x24000004
 8001a2c:	24000000 	.word	0x24000000

08001a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <HAL_InitTick+0x60>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e021      	b.n	8001a88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_InitTick+0x64>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <HAL_InitTick+0x60>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f971 	bl	8001d42 <HAL_SYSTICK_Config>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00e      	b.n	8001a88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b0f      	cmp	r3, #15
 8001a6e:	d80a      	bhi.n	8001a86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a70:	2200      	movs	r2, #0
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	f000 f93b 	bl	8001cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a7c:	4a06      	ldr	r2, [pc, #24]	; (8001a98 <HAL_InitTick+0x68>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e000      	b.n	8001a88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	2400000c 	.word	0x2400000c
 8001a94:	24000000 	.word	0x24000000
 8001a98:	24000008 	.word	0x24000008

08001a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_IncTick+0x20>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_IncTick+0x24>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <HAL_IncTick+0x24>)
 8001aae:	6013      	str	r3, [r2, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	2400000c 	.word	0x2400000c
 8001ac0:	2400073c 	.word	0x2400073c

08001ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <HAL_GetTick+0x14>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	2400073c 	.word	0x2400073c

08001adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae4:	f7ff ffee 	bl	8001ac4 <HAL_GetTick>
 8001ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af4:	d005      	beq.n	8001b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <HAL_Delay+0x44>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b02:	bf00      	nop
 8001b04:	f7ff ffde 	bl	8001ac4 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d8f7      	bhi.n	8001b04 <HAL_Delay+0x28>
  {
  }
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2400000c 	.word	0x2400000c

08001b24 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_GetREVID+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	0c1b      	lsrs	r3, r3, #16
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	5c001000 	.word	0x5c001000

08001b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <__NVIC_SetPriorityGrouping+0x40>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6a:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <__NVIC_SetPriorityGrouping+0x40>)
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	60d3      	str	r3, [r2, #12]
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000ed00 	.word	0xe000ed00
 8001b80:	05fa0000 	.word	0x05fa0000

08001b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <__NVIC_GetPriorityGrouping+0x18>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	0a1b      	lsrs	r3, r3, #8
 8001b8e:	f003 0307 	and.w	r3, r3, #7
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001baa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	db0b      	blt.n	8001bca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	f003 021f 	and.w	r2, r3, #31
 8001bb8:	4907      	ldr	r1, [pc, #28]	; (8001bd8 <__NVIC_EnableIRQ+0x38>)
 8001bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bbe:	095b      	lsrs	r3, r3, #5
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000e100 	.word	0xe000e100

08001bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	6039      	str	r1, [r7, #0]
 8001be6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001be8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	db0a      	blt.n	8001c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	490c      	ldr	r1, [pc, #48]	; (8001c28 <__NVIC_SetPriority+0x4c>)
 8001bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bfa:	0112      	lsls	r2, r2, #4
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	440b      	add	r3, r1
 8001c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c04:	e00a      	b.n	8001c1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4908      	ldr	r1, [pc, #32]	; (8001c2c <__NVIC_SetPriority+0x50>)
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	3b04      	subs	r3, #4
 8001c14:	0112      	lsls	r2, r2, #4
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	440b      	add	r3, r1
 8001c1a:	761a      	strb	r2, [r3, #24]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000e100 	.word	0xe000e100
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	; 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f1c3 0307 	rsb	r3, r3, #7
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	bf28      	it	cs
 8001c4e:	2304      	movcs	r3, #4
 8001c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3304      	adds	r3, #4
 8001c56:	2b06      	cmp	r3, #6
 8001c58:	d902      	bls.n	8001c60 <NVIC_EncodePriority+0x30>
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3b03      	subs	r3, #3
 8001c5e:	e000      	b.n	8001c62 <NVIC_EncodePriority+0x32>
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	f04f 32ff 	mov.w	r2, #4294967295
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	401a      	ands	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	43d9      	mvns	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	4313      	orrs	r3, r2
         );
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3724      	adds	r7, #36	; 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ca8:	d301      	bcc.n	8001cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001caa:	2301      	movs	r3, #1
 8001cac:	e00f      	b.n	8001cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cae:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <SysTick_Config+0x40>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb6:	210f      	movs	r1, #15
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbc:	f7ff ff8e 	bl	8001bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <SysTick_Config+0x40>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc6:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <SysTick_Config+0x40>)
 8001cc8:	2207      	movs	r2, #7
 8001cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	e000e010 	.word	0xe000e010

08001cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ff29 	bl	8001b3c <__NVIC_SetPriorityGrouping>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d00:	f7ff ff40 	bl	8001b84 <__NVIC_GetPriorityGrouping>
 8001d04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	6978      	ldr	r0, [r7, #20]
 8001d0c:	f7ff ff90 	bl	8001c30 <NVIC_EncodePriority>
 8001d10:	4602      	mov	r2, r0
 8001d12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d16:	4611      	mov	r1, r2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff5f 	bl	8001bdc <__NVIC_SetPriority>
}
 8001d1e:	bf00      	nop
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff33 	bl	8001ba0 <__NVIC_EnableIRQ>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ffa4 	bl	8001c98 <SysTick_Config>
 8001d50:	4603      	mov	r3, r0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d6a:	4b89      	ldr	r3, [pc, #548]	; (8001f90 <HAL_GPIO_Init+0x234>)
 8001d6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d6e:	e194      	b.n	800209a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	2101      	movs	r1, #1
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 8186 	beq.w	8002094 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d00b      	beq.n	8001da8 <HAL_GPIO_Init+0x4c>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d007      	beq.n	8001da8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d9c:	2b11      	cmp	r3, #17
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b12      	cmp	r3, #18
 8001da6:	d130      	bne.n	8001e0a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	2203      	movs	r2, #3
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dde:	2201      	movs	r2, #1
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	f003 0201 	and.w	r2, r3, #1
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	2203      	movs	r2, #3
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0xee>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b12      	cmp	r3, #18
 8001e48:	d123      	bne.n	8001e92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	08da      	lsrs	r2, r3, #3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3208      	adds	r2, #8
 8001e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	220f      	movs	r2, #15
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	691a      	ldr	r2, [r3, #16]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	08da      	lsrs	r2, r3, #3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3208      	adds	r2, #8
 8001e8c:	69b9      	ldr	r1, [r7, #24]
 8001e8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 0203 	and.w	r2, r3, #3
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 80e0 	beq.w	8002094 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed4:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <HAL_GPIO_Init+0x238>)
 8001ed6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001eda:	4a2e      	ldr	r2, [pc, #184]	; (8001f94 <HAL_GPIO_Init+0x238>)
 8001edc:	f043 0302 	orr.w	r3, r3, #2
 8001ee0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ee4:	4b2b      	ldr	r3, [pc, #172]	; (8001f94 <HAL_GPIO_Init+0x238>)
 8001ee6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ef2:	4a29      	ldr	r2, [pc, #164]	; (8001f98 <HAL_GPIO_Init+0x23c>)
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	3302      	adds	r3, #2
 8001efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	220f      	movs	r2, #15
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a20      	ldr	r2, [pc, #128]	; (8001f9c <HAL_GPIO_Init+0x240>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d052      	beq.n	8001fc4 <HAL_GPIO_Init+0x268>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a1f      	ldr	r2, [pc, #124]	; (8001fa0 <HAL_GPIO_Init+0x244>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d031      	beq.n	8001f8a <HAL_GPIO_Init+0x22e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a1e      	ldr	r2, [pc, #120]	; (8001fa4 <HAL_GPIO_Init+0x248>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d02b      	beq.n	8001f86 <HAL_GPIO_Init+0x22a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a1d      	ldr	r2, [pc, #116]	; (8001fa8 <HAL_GPIO_Init+0x24c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d025      	beq.n	8001f82 <HAL_GPIO_Init+0x226>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a1c      	ldr	r2, [pc, #112]	; (8001fac <HAL_GPIO_Init+0x250>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d01f      	beq.n	8001f7e <HAL_GPIO_Init+0x222>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <HAL_GPIO_Init+0x254>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d019      	beq.n	8001f7a <HAL_GPIO_Init+0x21e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a1a      	ldr	r2, [pc, #104]	; (8001fb4 <HAL_GPIO_Init+0x258>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_GPIO_Init+0x21a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a19      	ldr	r2, [pc, #100]	; (8001fb8 <HAL_GPIO_Init+0x25c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00d      	beq.n	8001f72 <HAL_GPIO_Init+0x216>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a18      	ldr	r2, [pc, #96]	; (8001fbc <HAL_GPIO_Init+0x260>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d007      	beq.n	8001f6e <HAL_GPIO_Init+0x212>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <HAL_GPIO_Init+0x264>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d101      	bne.n	8001f6a <HAL_GPIO_Init+0x20e>
 8001f66:	2309      	movs	r3, #9
 8001f68:	e02d      	b.n	8001fc6 <HAL_GPIO_Init+0x26a>
 8001f6a:	230a      	movs	r3, #10
 8001f6c:	e02b      	b.n	8001fc6 <HAL_GPIO_Init+0x26a>
 8001f6e:	2308      	movs	r3, #8
 8001f70:	e029      	b.n	8001fc6 <HAL_GPIO_Init+0x26a>
 8001f72:	2307      	movs	r3, #7
 8001f74:	e027      	b.n	8001fc6 <HAL_GPIO_Init+0x26a>
 8001f76:	2306      	movs	r3, #6
 8001f78:	e025      	b.n	8001fc6 <HAL_GPIO_Init+0x26a>
 8001f7a:	2305      	movs	r3, #5
 8001f7c:	e023      	b.n	8001fc6 <HAL_GPIO_Init+0x26a>
 8001f7e:	2304      	movs	r3, #4
 8001f80:	e021      	b.n	8001fc6 <HAL_GPIO_Init+0x26a>
 8001f82:	2303      	movs	r3, #3
 8001f84:	e01f      	b.n	8001fc6 <HAL_GPIO_Init+0x26a>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e01d      	b.n	8001fc6 <HAL_GPIO_Init+0x26a>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e01b      	b.n	8001fc6 <HAL_GPIO_Init+0x26a>
 8001f8e:	bf00      	nop
 8001f90:	58000080 	.word	0x58000080
 8001f94:	58024400 	.word	0x58024400
 8001f98:	58000400 	.word	0x58000400
 8001f9c:	58020000 	.word	0x58020000
 8001fa0:	58020400 	.word	0x58020400
 8001fa4:	58020800 	.word	0x58020800
 8001fa8:	58020c00 	.word	0x58020c00
 8001fac:	58021000 	.word	0x58021000
 8001fb0:	58021400 	.word	0x58021400
 8001fb4:	58021800 	.word	0x58021800
 8001fb8:	58021c00 	.word	0x58021c00
 8001fbc:	58022000 	.word	0x58022000
 8001fc0:	58022400 	.word	0x58022400
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	f002 0203 	and.w	r2, r2, #3
 8001fcc:	0092      	lsls	r2, r2, #2
 8001fce:	4093      	lsls	r3, r2
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fd6:	4938      	ldr	r1, [pc, #224]	; (80020b8 <HAL_GPIO_Init+0x35c>)
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	3302      	adds	r3, #2
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800205e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800208c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	3301      	adds	r3, #1
 8002098:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f47f ae63 	bne.w	8001d70 <HAL_GPIO_Init+0x14>
  }
}
 80020aa:	bf00      	nop
 80020ac:	bf00      	nop
 80020ae:	3724      	adds	r7, #36	; 0x24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	58000400 	.word	0x58000400

080020bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
 80020c8:	4613      	mov	r3, r2
 80020ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020cc:	787b      	ldrb	r3, [r7, #1]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020d2:	887a      	ldrh	r2, [r7, #2]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020d8:	e003      	b.n	80020e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020da:	887b      	ldrh	r3, [r7, #2]
 80020dc:	041a      	lsls	r2, r3, #16
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	619a      	str	r2, [r3, #24]
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80020f8:	4a08      	ldr	r2, [pc, #32]	; (800211c <HAL_HSEM_FastTake+0x2c>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3320      	adds	r3, #32
 80020fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002102:	4a07      	ldr	r2, [pc, #28]	; (8002120 <HAL_HSEM_FastTake+0x30>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d101      	bne.n	800210c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	e000      	b.n	800210e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	58026400 	.word	0x58026400
 8002120:	80000300 	.word	0x80000300

08002124 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800212e:	4906      	ldr	r1, [pc, #24]	; (8002148 <HAL_HSEM_Release+0x24>)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	58026400 	.word	0x58026400

0800214c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e07f      	b.n	800225e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d106      	bne.n	8002178 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff f980 	bl	8001478 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2224      	movs	r2, #36	; 0x24
 800217c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0201 	bic.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800219c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d107      	bne.n	80021c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	e006      	b.n	80021d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d104      	bne.n	80021e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <HAL_I2C_Init+0x11c>)
 80021f2:	430b      	orrs	r3, r1
 80021f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002204:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691a      	ldr	r2, [r3, #16]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	ea42 0103 	orr.w	r1, r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	021a      	lsls	r2, r3, #8
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69d9      	ldr	r1, [r3, #28]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1a      	ldr	r2, [r3, #32]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0201 	orr.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2220      	movs	r2, #32
 800224a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	02008000 	.word	0x02008000

0800226c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af02      	add	r7, sp, #8
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	4608      	mov	r0, r1
 8002276:	4611      	mov	r1, r2
 8002278:	461a      	mov	r2, r3
 800227a:	4603      	mov	r3, r0
 800227c:	817b      	strh	r3, [r7, #10]
 800227e:	460b      	mov	r3, r1
 8002280:	813b      	strh	r3, [r7, #8]
 8002282:	4613      	mov	r3, r2
 8002284:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b20      	cmp	r3, #32
 8002290:	f040 80f9 	bne.w	8002486 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <HAL_I2C_Mem_Write+0x34>
 800229a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800229c:	2b00      	cmp	r3, #0
 800229e:	d105      	bne.n	80022ac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0ed      	b.n	8002488 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_I2C_Mem_Write+0x4e>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e0e6      	b.n	8002488 <HAL_I2C_Mem_Write+0x21c>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022c2:	f7ff fbff 	bl	8001ac4 <HAL_GetTick>
 80022c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	2319      	movs	r3, #25
 80022ce:	2201      	movs	r2, #1
 80022d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 fac3 	bl	8002860 <I2C_WaitOnFlagUntilTimeout>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0d1      	b.n	8002488 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2221      	movs	r2, #33	; 0x21
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2240      	movs	r2, #64	; 0x40
 80022f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a3a      	ldr	r2, [r7, #32]
 80022fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002304:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800230c:	88f8      	ldrh	r0, [r7, #6]
 800230e:	893a      	ldrh	r2, [r7, #8]
 8002310:	8979      	ldrh	r1, [r7, #10]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	9301      	str	r3, [sp, #4]
 8002316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	4603      	mov	r3, r0
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 f9d3 	bl	80026c8 <I2C_RequestMemoryWrite>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0a9      	b.n	8002488 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002338:	b29b      	uxth	r3, r3
 800233a:	2bff      	cmp	r3, #255	; 0xff
 800233c:	d90e      	bls.n	800235c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	22ff      	movs	r2, #255	; 0xff
 8002342:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002348:	b2da      	uxtb	r2, r3
 800234a:	8979      	ldrh	r1, [r7, #10]
 800234c:	2300      	movs	r3, #0
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 fba5 	bl	8002aa4 <I2C_TransferConfig>
 800235a:	e00f      	b.n	800237c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236a:	b2da      	uxtb	r2, r3
 800236c:	8979      	ldrh	r1, [r7, #10]
 800236e:	2300      	movs	r3, #0
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 fb94 	bl	8002aa4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 faad 	bl	80028e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e07b      	b.n	8002488 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	781a      	ldrb	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d034      	beq.n	8002434 <HAL_I2C_Mem_Write+0x1c8>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d130      	bne.n	8002434 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d8:	2200      	movs	r2, #0
 80023da:	2180      	movs	r1, #128	; 0x80
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 fa3f 	bl	8002860 <I2C_WaitOnFlagUntilTimeout>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e04d      	b.n	8002488 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	2bff      	cmp	r3, #255	; 0xff
 80023f4:	d90e      	bls.n	8002414 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	22ff      	movs	r2, #255	; 0xff
 80023fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002400:	b2da      	uxtb	r2, r3
 8002402:	8979      	ldrh	r1, [r7, #10]
 8002404:	2300      	movs	r3, #0
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 fb49 	bl	8002aa4 <I2C_TransferConfig>
 8002412:	e00f      	b.n	8002434 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002418:	b29a      	uxth	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002422:	b2da      	uxtb	r2, r3
 8002424:	8979      	ldrh	r1, [r7, #10]
 8002426:	2300      	movs	r3, #0
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 fb38 	bl	8002aa4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002438:	b29b      	uxth	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d19e      	bne.n	800237c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 fa8c 	bl	8002960 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e01a      	b.n	8002488 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2220      	movs	r2, #32
 8002458:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6859      	ldr	r1, [r3, #4]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_I2C_Mem_Write+0x224>)
 8002466:	400b      	ands	r3, r1
 8002468:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2220      	movs	r2, #32
 800246e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	e000      	b.n	8002488 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002486:	2302      	movs	r3, #2
  }
}
 8002488:	4618      	mov	r0, r3
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	fe00e800 	.word	0xfe00e800

08002494 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	4608      	mov	r0, r1
 800249e:	4611      	mov	r1, r2
 80024a0:	461a      	mov	r2, r3
 80024a2:	4603      	mov	r3, r0
 80024a4:	817b      	strh	r3, [r7, #10]
 80024a6:	460b      	mov	r3, r1
 80024a8:	813b      	strh	r3, [r7, #8]
 80024aa:	4613      	mov	r3, r2
 80024ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b20      	cmp	r3, #32
 80024b8:	f040 80fd 	bne.w	80026b6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <HAL_I2C_Mem_Read+0x34>
 80024c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d105      	bne.n	80024d4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0f1      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_I2C_Mem_Read+0x4e>
 80024de:	2302      	movs	r3, #2
 80024e0:	e0ea      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024ea:	f7ff faeb 	bl	8001ac4 <HAL_GetTick>
 80024ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	2319      	movs	r3, #25
 80024f6:	2201      	movs	r2, #1
 80024f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 f9af 	bl	8002860 <I2C_WaitOnFlagUntilTimeout>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0d5      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2222      	movs	r2, #34	; 0x22
 8002510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2240      	movs	r2, #64	; 0x40
 8002518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a3a      	ldr	r2, [r7, #32]
 8002526:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800252c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002534:	88f8      	ldrh	r0, [r7, #6]
 8002536:	893a      	ldrh	r2, [r7, #8]
 8002538:	8979      	ldrh	r1, [r7, #10]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	4603      	mov	r3, r0
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 f913 	bl	8002770 <I2C_RequestMemoryRead>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0ad      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002560:	b29b      	uxth	r3, r3
 8002562:	2bff      	cmp	r3, #255	; 0xff
 8002564:	d90e      	bls.n	8002584 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	22ff      	movs	r2, #255	; 0xff
 800256a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002570:	b2da      	uxtb	r2, r3
 8002572:	8979      	ldrh	r1, [r7, #10]
 8002574:	4b52      	ldr	r3, [pc, #328]	; (80026c0 <HAL_I2C_Mem_Read+0x22c>)
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 fa91 	bl	8002aa4 <I2C_TransferConfig>
 8002582:	e00f      	b.n	80025a4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002592:	b2da      	uxtb	r2, r3
 8002594:	8979      	ldrh	r1, [r7, #10]
 8002596:	4b4a      	ldr	r3, [pc, #296]	; (80026c0 <HAL_I2C_Mem_Read+0x22c>)
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 fa80 	bl	8002aa4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025aa:	2200      	movs	r2, #0
 80025ac:	2104      	movs	r1, #4
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f956 	bl	8002860 <I2C_WaitOnFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e07c      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d034      	beq.n	8002664 <HAL_I2C_Mem_Read+0x1d0>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d130      	bne.n	8002664 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	2200      	movs	r2, #0
 800260a:	2180      	movs	r1, #128	; 0x80
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 f927 	bl	8002860 <I2C_WaitOnFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e04d      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002620:	b29b      	uxth	r3, r3
 8002622:	2bff      	cmp	r3, #255	; 0xff
 8002624:	d90e      	bls.n	8002644 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	22ff      	movs	r2, #255	; 0xff
 800262a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002630:	b2da      	uxtb	r2, r3
 8002632:	8979      	ldrh	r1, [r7, #10]
 8002634:	2300      	movs	r3, #0
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 fa31 	bl	8002aa4 <I2C_TransferConfig>
 8002642:	e00f      	b.n	8002664 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002652:	b2da      	uxtb	r2, r3
 8002654:	8979      	ldrh	r1, [r7, #10]
 8002656:	2300      	movs	r3, #0
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 fa20 	bl	8002aa4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002668:	b29b      	uxth	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d19a      	bne.n	80025a4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 f974 	bl	8002960 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e01a      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2220      	movs	r2, #32
 8002688:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6859      	ldr	r1, [r3, #4]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_I2C_Mem_Read+0x230>)
 8002696:	400b      	ands	r3, r1
 8002698:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2220      	movs	r2, #32
 800269e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	e000      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026b6:	2302      	movs	r3, #2
  }
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	80002400 	.word	0x80002400
 80026c4:	fe00e800 	.word	0xfe00e800

080026c8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	4608      	mov	r0, r1
 80026d2:	4611      	mov	r1, r2
 80026d4:	461a      	mov	r2, r3
 80026d6:	4603      	mov	r3, r0
 80026d8:	817b      	strh	r3, [r7, #10]
 80026da:	460b      	mov	r3, r1
 80026dc:	813b      	strh	r3, [r7, #8]
 80026de:	4613      	mov	r3, r2
 80026e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80026e2:	88fb      	ldrh	r3, [r7, #6]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	8979      	ldrh	r1, [r7, #10]
 80026e8:	4b20      	ldr	r3, [pc, #128]	; (800276c <I2C_RequestMemoryWrite+0xa4>)
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 f9d7 	bl	8002aa4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	69b9      	ldr	r1, [r7, #24]
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 f8f0 	bl	80028e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e02c      	b.n	8002764 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d105      	bne.n	800271c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002710:	893b      	ldrh	r3, [r7, #8]
 8002712:	b2da      	uxtb	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	629a      	str	r2, [r3, #40]	; 0x28
 800271a:	e015      	b.n	8002748 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800271c:	893b      	ldrh	r3, [r7, #8]
 800271e:	0a1b      	lsrs	r3, r3, #8
 8002720:	b29b      	uxth	r3, r3
 8002722:	b2da      	uxtb	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	69b9      	ldr	r1, [r7, #24]
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 f8d6 	bl	80028e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e012      	b.n	8002764 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800273e:	893b      	ldrh	r3, [r7, #8]
 8002740:	b2da      	uxtb	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	2200      	movs	r2, #0
 8002750:	2180      	movs	r1, #128	; 0x80
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 f884 	bl	8002860 <I2C_WaitOnFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	80002000 	.word	0x80002000

08002770 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af02      	add	r7, sp, #8
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	4608      	mov	r0, r1
 800277a:	4611      	mov	r1, r2
 800277c:	461a      	mov	r2, r3
 800277e:	4603      	mov	r3, r0
 8002780:	817b      	strh	r3, [r7, #10]
 8002782:	460b      	mov	r3, r1
 8002784:	813b      	strh	r3, [r7, #8]
 8002786:	4613      	mov	r3, r2
 8002788:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800278a:	88fb      	ldrh	r3, [r7, #6]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	8979      	ldrh	r1, [r7, #10]
 8002790:	4b20      	ldr	r3, [pc, #128]	; (8002814 <I2C_RequestMemoryRead+0xa4>)
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2300      	movs	r3, #0
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f984 	bl	8002aa4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	69b9      	ldr	r1, [r7, #24]
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 f89d 	bl	80028e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e02c      	b.n	800280a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d105      	bne.n	80027c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027b6:	893b      	ldrh	r3, [r7, #8]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	629a      	str	r2, [r3, #40]	; 0x28
 80027c0:	e015      	b.n	80027ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027c2:	893b      	ldrh	r3, [r7, #8]
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d0:	69fa      	ldr	r2, [r7, #28]
 80027d2:	69b9      	ldr	r1, [r7, #24]
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f883 	bl	80028e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e012      	b.n	800280a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027e4:	893b      	ldrh	r3, [r7, #8]
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	2200      	movs	r2, #0
 80027f6:	2140      	movs	r1, #64	; 0x40
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 f831 	bl	8002860 <I2C_WaitOnFlagUntilTimeout>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	80002000 	.word	0x80002000

08002818 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b02      	cmp	r3, #2
 800282c:	d103      	bne.n	8002836 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2200      	movs	r2, #0
 8002834:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b01      	cmp	r3, #1
 8002842:	d007      	beq.n	8002854 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699a      	ldr	r2, [r3, #24]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	619a      	str	r2, [r3, #24]
  }
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	4613      	mov	r3, r2
 800286e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002870:	e022      	b.n	80028b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002878:	d01e      	beq.n	80028b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800287a:	f7ff f923 	bl	8001ac4 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d302      	bcc.n	8002890 <I2C_WaitOnFlagUntilTimeout+0x30>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d113      	bne.n	80028b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002894:	f043 0220 	orr.w	r2, r3, #32
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e00f      	b.n	80028d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699a      	ldr	r2, [r3, #24]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	4013      	ands	r3, r2
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	bf0c      	ite	eq
 80028c8:	2301      	moveq	r3, #1
 80028ca:	2300      	movne	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d0cd      	beq.n	8002872 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028ec:	e02c      	b.n	8002948 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 f870 	bl	80029d8 <I2C_IsAcknowledgeFailed>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e02a      	b.n	8002958 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002908:	d01e      	beq.n	8002948 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290a:	f7ff f8db 	bl	8001ac4 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	429a      	cmp	r2, r3
 8002918:	d302      	bcc.n	8002920 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d113      	bne.n	8002948 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002924:	f043 0220 	orr.w	r2, r3, #32
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e007      	b.n	8002958 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b02      	cmp	r3, #2
 8002954:	d1cb      	bne.n	80028ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800296c:	e028      	b.n	80029c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68b9      	ldr	r1, [r7, #8]
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 f830 	bl	80029d8 <I2C_IsAcknowledgeFailed>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e026      	b.n	80029d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002982:	f7ff f89f 	bl	8001ac4 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	429a      	cmp	r2, r3
 8002990:	d302      	bcc.n	8002998 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d113      	bne.n	80029c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299c:	f043 0220 	orr.w	r2, r3, #32
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e007      	b.n	80029d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	d1cf      	bne.n	800296e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	2b10      	cmp	r3, #16
 80029f0:	d151      	bne.n	8002a96 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029f2:	e022      	b.n	8002a3a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fa:	d01e      	beq.n	8002a3a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fc:	f7ff f862 	bl	8001ac4 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d302      	bcc.n	8002a12 <I2C_IsAcknowledgeFailed+0x3a>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d113      	bne.n	8002a3a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	f043 0220 	orr.w	r2, r3, #32
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e02e      	b.n	8002a98 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	f003 0320 	and.w	r3, r3, #32
 8002a44:	2b20      	cmp	r3, #32
 8002a46:	d1d5      	bne.n	80029f4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2210      	movs	r2, #16
 8002a4e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2220      	movs	r2, #32
 8002a56:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f7ff fedd 	bl	8002818 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6859      	ldr	r1, [r3, #4]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <I2C_IsAcknowledgeFailed+0xc8>)
 8002a6a:	400b      	ands	r3, r1
 8002a6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f043 0204 	orr.w	r2, r3, #4
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	fe00e800 	.word	0xfe00e800

08002aa4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	817b      	strh	r3, [r7, #10]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	0d5b      	lsrs	r3, r3, #21
 8002ac0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002ac4:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <I2C_TransferConfig+0x58>)
 8002ac6:	430b      	orrs	r3, r1
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	ea02 0103 	and.w	r1, r2, r3
 8002ace:	897b      	ldrh	r3, [r7, #10]
 8002ad0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ad4:	7a7b      	ldrb	r3, [r7, #9]
 8002ad6:	041b      	lsls	r3, r3, #16
 8002ad8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002aee:	bf00      	nop
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	03ff63ff 	.word	0x03ff63ff

08002b00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d138      	bne.n	8002b88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e032      	b.n	8002b8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2224      	movs	r2, #36	; 0x24
 8002b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0201 	bic.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6819      	ldr	r1, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	e000      	b.n	8002b8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b88:	2302      	movs	r3, #2
  }
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b085      	sub	sp, #20
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	d139      	bne.n	8002c20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e033      	b.n	8002c22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2224      	movs	r2, #36	; 0x24
 8002bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0201 	bic.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002be8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	e000      	b.n	8002c22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c20:	2302      	movs	r3, #2
  }
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c30:	b08f      	sub	sp, #60	; 0x3c
 8002c32:	af0a      	add	r7, sp, #40	; 0x28
 8002c34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e116      	b.n	8002e6e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d106      	bne.n	8002c60 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7fe fd00 	bl	8001660 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2203      	movs	r2, #3
 8002c64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d102      	bne.n	8002c7a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f004 f8fa 	bl	8006e78 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	603b      	str	r3, [r7, #0]
 8002c8a:	687e      	ldr	r6, [r7, #4]
 8002c8c:	466d      	mov	r5, sp
 8002c8e:	f106 0410 	add.w	r4, r6, #16
 8002c92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ca2:	1d33      	adds	r3, r6, #4
 8002ca4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ca6:	6838      	ldr	r0, [r7, #0]
 8002ca8:	f004 f878 	bl	8006d9c <USB_CoreInit>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e0d7      	b.n	8002e6e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f004 f8e8 	bl	8006e9a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cca:	2300      	movs	r3, #0
 8002ccc:	73fb      	strb	r3, [r7, #15]
 8002cce:	e04a      	b.n	8002d66 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cd0:	7bfa      	ldrb	r2, [r7, #15]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	333d      	adds	r3, #61	; 0x3d
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ce4:	7bfa      	ldrb	r2, [r7, #15]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	333c      	adds	r3, #60	; 0x3c
 8002cf4:	7bfa      	ldrb	r2, [r7, #15]
 8002cf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cf8:	7bfa      	ldrb	r2, [r7, #15]
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	b298      	uxth	r0, r3
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	3342      	adds	r3, #66	; 0x42
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d10:	7bfa      	ldrb	r2, [r7, #15]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	333f      	adds	r3, #63	; 0x3f
 8002d20:	2200      	movs	r2, #0
 8002d22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d24:	7bfa      	ldrb	r2, [r7, #15]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	3344      	adds	r3, #68	; 0x44
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d38:	7bfa      	ldrb	r2, [r7, #15]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	3348      	adds	r3, #72	; 0x48
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d4c:	7bfa      	ldrb	r2, [r7, #15]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	3350      	adds	r3, #80	; 0x50
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	3301      	adds	r3, #1
 8002d64:	73fb      	strb	r3, [r7, #15]
 8002d66:	7bfa      	ldrb	r2, [r7, #15]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d3af      	bcc.n	8002cd0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d70:	2300      	movs	r3, #0
 8002d72:	73fb      	strb	r3, [r7, #15]
 8002d74:	e044      	b.n	8002e00 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d76:	7bfa      	ldrb	r2, [r7, #15]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002d9e:	7bfa      	ldrb	r2, [r7, #15]
 8002da0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002da2:	7bfa      	ldrb	r2, [r7, #15]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002db4:	2200      	movs	r2, #0
 8002db6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002db8:	7bfa      	ldrb	r2, [r7, #15]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	1a9b      	subs	r3, r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002dce:	7bfa      	ldrb	r2, [r7, #15]
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	1a9b      	subs	r3, r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002de4:	7bfa      	ldrb	r2, [r7, #15]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
 8002e00:	7bfa      	ldrb	r2, [r7, #15]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d3b5      	bcc.n	8002d76 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	687e      	ldr	r6, [r7, #4]
 8002e12:	466d      	mov	r5, sp
 8002e14:	f106 0410 	add.w	r4, r6, #16
 8002e18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e24:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e28:	1d33      	adds	r3, r6, #4
 8002e2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e2c:	6838      	ldr	r0, [r7, #0]
 8002e2e:	f004 f85f 	bl	8006ef0 <USB_DevInit>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e014      	b.n	8002e6e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d102      	bne.n	8002e62 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f80b 	bl	8002e78 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f004 fa01 	bl	800726e <USB_DevDisconnect>

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002e78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ea6:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <HAL_PCDEx_ActivateLPM+0x44>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	10000003 	.word	0x10000003

08002ec0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002ec8:	4b29      	ldr	r3, [pc, #164]	; (8002f70 <HAL_PWREx_ConfigSupply+0xb0>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	2b06      	cmp	r3, #6
 8002ed2:	d00a      	beq.n	8002eea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002ed4:	4b26      	ldr	r3, [pc, #152]	; (8002f70 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d001      	beq.n	8002ee6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e040      	b.n	8002f68 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e03e      	b.n	8002f68 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002eea:	4b21      	ldr	r3, [pc, #132]	; (8002f70 <HAL_PWREx_ConfigSupply+0xb0>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002ef2:	491f      	ldr	r1, [pc, #124]	; (8002f70 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002efa:	f7fe fde3 	bl	8001ac4 <HAL_GetTick>
 8002efe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f00:	e009      	b.n	8002f16 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f02:	f7fe fddf 	bl	8001ac4 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f10:	d901      	bls.n	8002f16 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e028      	b.n	8002f68 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f16:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f22:	d1ee      	bne.n	8002f02 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b1e      	cmp	r3, #30
 8002f28:	d008      	beq.n	8002f3c <HAL_PWREx_ConfigSupply+0x7c>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b2e      	cmp	r3, #46	; 0x2e
 8002f2e:	d005      	beq.n	8002f3c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b1d      	cmp	r3, #29
 8002f34:	d002      	beq.n	8002f3c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b2d      	cmp	r3, #45	; 0x2d
 8002f3a:	d114      	bne.n	8002f66 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002f3c:	f7fe fdc2 	bl	8001ac4 <HAL_GetTick>
 8002f40:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002f42:	e009      	b.n	8002f58 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f44:	f7fe fdbe 	bl	8001ac4 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f52:	d901      	bls.n	8002f58 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e007      	b.n	8002f68 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f64:	d1ee      	bne.n	8002f44 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	58024800 	.word	0x58024800

08002f74 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002f78:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4a04      	ldr	r2, [pc, #16]	; (8002f90 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f82:	60d3      	str	r3, [r2, #12]
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	58024800 	.word	0x58024800

08002f94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08c      	sub	sp, #48	; 0x30
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e3ff      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 8087 	beq.w	80030c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb4:	4b99      	ldr	r3, [pc, #612]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fbe:	4b97      	ldr	r3, [pc, #604]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc6:	2b10      	cmp	r3, #16
 8002fc8:	d007      	beq.n	8002fda <HAL_RCC_OscConfig+0x46>
 8002fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fcc:	2b18      	cmp	r3, #24
 8002fce:	d110      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x5e>
 8002fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d10b      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fda:	4b90      	ldr	r3, [pc, #576]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d06c      	beq.n	80030c0 <HAL_RCC_OscConfig+0x12c>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d168      	bne.n	80030c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e3d9      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffa:	d106      	bne.n	800300a <HAL_RCC_OscConfig+0x76>
 8002ffc:	4b87      	ldr	r3, [pc, #540]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a86      	ldr	r2, [pc, #536]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	e02e      	b.n	8003068 <HAL_RCC_OscConfig+0xd4>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10c      	bne.n	800302c <HAL_RCC_OscConfig+0x98>
 8003012:	4b82      	ldr	r3, [pc, #520]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a81      	ldr	r2, [pc, #516]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	4b7f      	ldr	r3, [pc, #508]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a7e      	ldr	r2, [pc, #504]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	e01d      	b.n	8003068 <HAL_RCC_OscConfig+0xd4>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003034:	d10c      	bne.n	8003050 <HAL_RCC_OscConfig+0xbc>
 8003036:	4b79      	ldr	r3, [pc, #484]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a78      	ldr	r2, [pc, #480]	; (800321c <HAL_RCC_OscConfig+0x288>)
 800303c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	4b76      	ldr	r3, [pc, #472]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a75      	ldr	r2, [pc, #468]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e00b      	b.n	8003068 <HAL_RCC_OscConfig+0xd4>
 8003050:	4b72      	ldr	r3, [pc, #456]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a71      	ldr	r2, [pc, #452]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	4b6f      	ldr	r3, [pc, #444]	; (800321c <HAL_RCC_OscConfig+0x288>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a6e      	ldr	r2, [pc, #440]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d013      	beq.n	8003098 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7fe fd28 	bl	8001ac4 <HAL_GetTick>
 8003074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003078:	f7fe fd24 	bl	8001ac4 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b64      	cmp	r3, #100	; 0x64
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e38d      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800308a:	4b64      	ldr	r3, [pc, #400]	; (800321c <HAL_RCC_OscConfig+0x288>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f0      	beq.n	8003078 <HAL_RCC_OscConfig+0xe4>
 8003096:	e014      	b.n	80030c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe fd14 	bl	8001ac4 <HAL_GetTick>
 800309c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a0:	f7fe fd10 	bl	8001ac4 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	; 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e379      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030b2:	4b5a      	ldr	r3, [pc, #360]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x10c>
 80030be:	e000      	b.n	80030c2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 80ae 	beq.w	800322c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030d0:	4b52      	ldr	r3, [pc, #328]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030da:	4b50      	ldr	r3, [pc, #320]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80030dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030de:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <HAL_RCC_OscConfig+0x162>
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	2b18      	cmp	r3, #24
 80030ea:	d13a      	bne.n	8003162 <HAL_RCC_OscConfig+0x1ce>
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d135      	bne.n	8003162 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030f6:	4b49      	ldr	r3, [pc, #292]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_RCC_OscConfig+0x17a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e34b      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310e:	f7fe fd09 	bl	8001b24 <HAL_GetREVID>
 8003112:	4603      	mov	r3, r0
 8003114:	f241 0203 	movw	r2, #4099	; 0x1003
 8003118:	4293      	cmp	r3, r2
 800311a:	d817      	bhi.n	800314c <HAL_RCC_OscConfig+0x1b8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	2b40      	cmp	r3, #64	; 0x40
 8003122:	d108      	bne.n	8003136 <HAL_RCC_OscConfig+0x1a2>
 8003124:	4b3d      	ldr	r3, [pc, #244]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800312c:	4a3b      	ldr	r2, [pc, #236]	; (800321c <HAL_RCC_OscConfig+0x288>)
 800312e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003132:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003134:	e07a      	b.n	800322c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003136:	4b39      	ldr	r3, [pc, #228]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	031b      	lsls	r3, r3, #12
 8003144:	4935      	ldr	r1, [pc, #212]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003146:	4313      	orrs	r3, r2
 8003148:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800314a:	e06f      	b.n	800322c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314c:	4b33      	ldr	r3, [pc, #204]	; (800321c <HAL_RCC_OscConfig+0x288>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	061b      	lsls	r3, r3, #24
 800315a:	4930      	ldr	r1, [pc, #192]	; (800321c <HAL_RCC_OscConfig+0x288>)
 800315c:	4313      	orrs	r3, r2
 800315e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003160:	e064      	b.n	800322c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d045      	beq.n	80031f6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800316a:	4b2c      	ldr	r3, [pc, #176]	; (800321c <HAL_RCC_OscConfig+0x288>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 0219 	bic.w	r2, r3, #25
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	4929      	ldr	r1, [pc, #164]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003178:	4313      	orrs	r3, r2
 800317a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317c:	f7fe fca2 	bl	8001ac4 <HAL_GetTick>
 8003180:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003184:	f7fe fc9e 	bl	8001ac4 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e307      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003196:	4b21      	ldr	r3, [pc, #132]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a2:	f7fe fcbf 	bl	8001b24 <HAL_GetREVID>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d817      	bhi.n	80031e0 <HAL_RCC_OscConfig+0x24c>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	2b40      	cmp	r3, #64	; 0x40
 80031b6:	d108      	bne.n	80031ca <HAL_RCC_OscConfig+0x236>
 80031b8:	4b18      	ldr	r3, [pc, #96]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80031c0:	4a16      	ldr	r2, [pc, #88]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80031c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c6:	6053      	str	r3, [r2, #4]
 80031c8:	e030      	b.n	800322c <HAL_RCC_OscConfig+0x298>
 80031ca:	4b14      	ldr	r3, [pc, #80]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	031b      	lsls	r3, r3, #12
 80031d8:	4910      	ldr	r1, [pc, #64]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	604b      	str	r3, [r1, #4]
 80031de:	e025      	b.n	800322c <HAL_RCC_OscConfig+0x298>
 80031e0:	4b0e      	ldr	r3, [pc, #56]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	061b      	lsls	r3, r3, #24
 80031ee:	490b      	ldr	r1, [pc, #44]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	604b      	str	r3, [r1, #4]
 80031f4:	e01a      	b.n	800322c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a08      	ldr	r2, [pc, #32]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80031fc:	f023 0301 	bic.w	r3, r3, #1
 8003200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003202:	f7fe fc5f 	bl	8001ac4 <HAL_GetTick>
 8003206:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003208:	e00a      	b.n	8003220 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800320a:	f7fe fc5b 	bl	8001ac4 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d903      	bls.n	8003220 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e2c4      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
 800321c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003220:	4ba4      	ldr	r3, [pc, #656]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1ee      	bne.n	800320a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0310 	and.w	r3, r3, #16
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80a9 	beq.w	800338c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800323a:	4b9e      	ldr	r3, [pc, #632]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003242:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003244:	4b9b      	ldr	r3, [pc, #620]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	2b08      	cmp	r3, #8
 800324e:	d007      	beq.n	8003260 <HAL_RCC_OscConfig+0x2cc>
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2b18      	cmp	r3, #24
 8003254:	d13a      	bne.n	80032cc <HAL_RCC_OscConfig+0x338>
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d135      	bne.n	80032cc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003260:	4b94      	ldr	r3, [pc, #592]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_RCC_OscConfig+0x2e4>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	2b80      	cmp	r3, #128	; 0x80
 8003272:	d001      	beq.n	8003278 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e296      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003278:	f7fe fc54 	bl	8001b24 <HAL_GetREVID>
 800327c:	4603      	mov	r3, r0
 800327e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003282:	4293      	cmp	r3, r2
 8003284:	d817      	bhi.n	80032b6 <HAL_RCC_OscConfig+0x322>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	2b20      	cmp	r3, #32
 800328c:	d108      	bne.n	80032a0 <HAL_RCC_OscConfig+0x30c>
 800328e:	4b89      	ldr	r3, [pc, #548]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003296:	4a87      	ldr	r2, [pc, #540]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003298:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800329c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800329e:	e075      	b.n	800338c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032a0:	4b84      	ldr	r3, [pc, #528]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	069b      	lsls	r3, r3, #26
 80032ae:	4981      	ldr	r1, [pc, #516]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032b4:	e06a      	b.n	800338c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032b6:	4b7f      	ldr	r3, [pc, #508]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	061b      	lsls	r3, r3, #24
 80032c4:	497b      	ldr	r1, [pc, #492]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032ca:	e05f      	b.n	800338c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d042      	beq.n	800335a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80032d4:	4b77      	ldr	r3, [pc, #476]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a76      	ldr	r2, [pc, #472]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80032da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fe fbf0 	bl	8001ac4 <HAL_GetTick>
 80032e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80032e8:	f7fe fbec 	bl	8001ac4 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e255      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032fa:	4b6e      	ldr	r3, [pc, #440]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003306:	f7fe fc0d 	bl	8001b24 <HAL_GetREVID>
 800330a:	4603      	mov	r3, r0
 800330c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003310:	4293      	cmp	r3, r2
 8003312:	d817      	bhi.n	8003344 <HAL_RCC_OscConfig+0x3b0>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	2b20      	cmp	r3, #32
 800331a:	d108      	bne.n	800332e <HAL_RCC_OscConfig+0x39a>
 800331c:	4b65      	ldr	r3, [pc, #404]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003324:	4a63      	ldr	r2, [pc, #396]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003326:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800332a:	6053      	str	r3, [r2, #4]
 800332c:	e02e      	b.n	800338c <HAL_RCC_OscConfig+0x3f8>
 800332e:	4b61      	ldr	r3, [pc, #388]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	069b      	lsls	r3, r3, #26
 800333c:	495d      	ldr	r1, [pc, #372]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 800333e:	4313      	orrs	r3, r2
 8003340:	604b      	str	r3, [r1, #4]
 8003342:	e023      	b.n	800338c <HAL_RCC_OscConfig+0x3f8>
 8003344:	4b5b      	ldr	r3, [pc, #364]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	061b      	lsls	r3, r3, #24
 8003352:	4958      	ldr	r1, [pc, #352]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003354:	4313      	orrs	r3, r2
 8003356:	60cb      	str	r3, [r1, #12]
 8003358:	e018      	b.n	800338c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800335a:	4b56      	ldr	r3, [pc, #344]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a55      	ldr	r2, [pc, #340]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003366:	f7fe fbad 	bl	8001ac4 <HAL_GetTick>
 800336a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800336e:	f7fe fba9 	bl	8001ac4 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e212      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003380:	4b4c      	ldr	r3, [pc, #304]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f0      	bne.n	800336e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b00      	cmp	r3, #0
 8003396:	d036      	beq.n	8003406 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d019      	beq.n	80033d4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a0:	4b44      	ldr	r3, [pc, #272]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80033a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a4:	4a43      	ldr	r2, [pc, #268]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ac:	f7fe fb8a 	bl	8001ac4 <HAL_GetTick>
 80033b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b4:	f7fe fb86 	bl	8001ac4 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e1ef      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033c6:	4b3b      	ldr	r3, [pc, #236]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80033c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0x420>
 80033d2:	e018      	b.n	8003406 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d4:	4b37      	ldr	r3, [pc, #220]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80033d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d8:	4a36      	ldr	r2, [pc, #216]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80033da:	f023 0301 	bic.w	r3, r3, #1
 80033de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e0:	f7fe fb70 	bl	8001ac4 <HAL_GetTick>
 80033e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e8:	f7fe fb6c 	bl	8001ac4 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e1d5      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033fa:	4b2e      	ldr	r3, [pc, #184]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80033fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b00      	cmp	r3, #0
 8003410:	d036      	beq.n	8003480 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d019      	beq.n	800344e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800341a:	4b26      	ldr	r3, [pc, #152]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a25      	ldr	r2, [pc, #148]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003420:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003424:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003426:	f7fe fb4d 	bl	8001ac4 <HAL_GetTick>
 800342a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800342e:	f7fe fb49 	bl	8001ac4 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e1b2      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003440:	4b1c      	ldr	r3, [pc, #112]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x49a>
 800344c:	e018      	b.n	8003480 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800344e:	4b19      	ldr	r3, [pc, #100]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a18      	ldr	r2, [pc, #96]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003458:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800345a:	f7fe fb33 	bl	8001ac4 <HAL_GetTick>
 800345e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003462:	f7fe fb2f 	bl	8001ac4 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e198      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003474:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f0      	bne.n	8003462 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 8085 	beq.w	8003598 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <HAL_RCC_OscConfig+0x524>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a09      	ldr	r2, [pc, #36]	; (80034b8 <HAL_RCC_OscConfig+0x524>)
 8003494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003498:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800349a:	f7fe fb13 	bl	8001ac4 <HAL_GetTick>
 800349e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034a0:	e00c      	b.n	80034bc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034a2:	f7fe fb0f 	bl	8001ac4 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b64      	cmp	r3, #100	; 0x64
 80034ae:	d905      	bls.n	80034bc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e178      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
 80034b4:	58024400 	.word	0x58024400
 80034b8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034bc:	4b96      	ldr	r3, [pc, #600]	; (8003718 <HAL_RCC_OscConfig+0x784>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0ec      	beq.n	80034a2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d106      	bne.n	80034de <HAL_RCC_OscConfig+0x54a>
 80034d0:	4b92      	ldr	r3, [pc, #584]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d4:	4a91      	ldr	r2, [pc, #580]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	6713      	str	r3, [r2, #112]	; 0x70
 80034dc:	e02d      	b.n	800353a <HAL_RCC_OscConfig+0x5a6>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10c      	bne.n	8003500 <HAL_RCC_OscConfig+0x56c>
 80034e6:	4b8d      	ldr	r3, [pc, #564]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80034e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ea:	4a8c      	ldr	r2, [pc, #560]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80034ec:	f023 0301 	bic.w	r3, r3, #1
 80034f0:	6713      	str	r3, [r2, #112]	; 0x70
 80034f2:	4b8a      	ldr	r3, [pc, #552]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f6:	4a89      	ldr	r2, [pc, #548]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80034f8:	f023 0304 	bic.w	r3, r3, #4
 80034fc:	6713      	str	r3, [r2, #112]	; 0x70
 80034fe:	e01c      	b.n	800353a <HAL_RCC_OscConfig+0x5a6>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2b05      	cmp	r3, #5
 8003506:	d10c      	bne.n	8003522 <HAL_RCC_OscConfig+0x58e>
 8003508:	4b84      	ldr	r3, [pc, #528]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350c:	4a83      	ldr	r2, [pc, #524]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800350e:	f043 0304 	orr.w	r3, r3, #4
 8003512:	6713      	str	r3, [r2, #112]	; 0x70
 8003514:	4b81      	ldr	r3, [pc, #516]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003518:	4a80      	ldr	r2, [pc, #512]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6713      	str	r3, [r2, #112]	; 0x70
 8003520:	e00b      	b.n	800353a <HAL_RCC_OscConfig+0x5a6>
 8003522:	4b7e      	ldr	r3, [pc, #504]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	4a7d      	ldr	r2, [pc, #500]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003528:	f023 0301 	bic.w	r3, r3, #1
 800352c:	6713      	str	r3, [r2, #112]	; 0x70
 800352e:	4b7b      	ldr	r3, [pc, #492]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003532:	4a7a      	ldr	r2, [pc, #488]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003534:	f023 0304 	bic.w	r3, r3, #4
 8003538:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d015      	beq.n	800356e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003542:	f7fe fabf 	bl	8001ac4 <HAL_GetTick>
 8003546:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003548:	e00a      	b.n	8003560 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800354a:	f7fe fabb 	bl	8001ac4 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	f241 3288 	movw	r2, #5000	; 0x1388
 8003558:	4293      	cmp	r3, r2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e122      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003560:	4b6e      	ldr	r3, [pc, #440]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0ee      	beq.n	800354a <HAL_RCC_OscConfig+0x5b6>
 800356c:	e014      	b.n	8003598 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356e:	f7fe faa9 	bl	8001ac4 <HAL_GetTick>
 8003572:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003574:	e00a      	b.n	800358c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003576:	f7fe faa5 	bl	8001ac4 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	f241 3288 	movw	r2, #5000	; 0x1388
 8003584:	4293      	cmp	r3, r2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e10c      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800358c:	4b63      	ldr	r3, [pc, #396]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800358e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1ee      	bne.n	8003576 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8101 	beq.w	80037a4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80035a2:	4b5e      	ldr	r3, [pc, #376]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035aa:	2b18      	cmp	r3, #24
 80035ac:	f000 80bc 	beq.w	8003728 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	f040 8095 	bne.w	80036e4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ba:	4b58      	ldr	r3, [pc, #352]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a57      	ldr	r2, [pc, #348]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80035c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c6:	f7fe fa7d 	bl	8001ac4 <HAL_GetTick>
 80035ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ce:	f7fe fa79 	bl	8001ac4 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e0e2      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035e0:	4b4e      	ldr	r3, [pc, #312]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1f0      	bne.n	80035ce <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ec:	4b4b      	ldr	r3, [pc, #300]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80035ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035f0:	4b4b      	ldr	r3, [pc, #300]	; (8003720 <HAL_RCC_OscConfig+0x78c>)
 80035f2:	4013      	ands	r3, r2
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80035fc:	0112      	lsls	r2, r2, #4
 80035fe:	430a      	orrs	r2, r1
 8003600:	4946      	ldr	r1, [pc, #280]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003602:	4313      	orrs	r3, r2
 8003604:	628b      	str	r3, [r1, #40]	; 0x28
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	3b01      	subs	r3, #1
 800360c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003614:	3b01      	subs	r3, #1
 8003616:	025b      	lsls	r3, r3, #9
 8003618:	b29b      	uxth	r3, r3
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	3b01      	subs	r3, #1
 8003622:	041b      	lsls	r3, r3, #16
 8003624:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362e:	3b01      	subs	r3, #1
 8003630:	061b      	lsls	r3, r3, #24
 8003632:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003636:	4939      	ldr	r1, [pc, #228]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003638:	4313      	orrs	r3, r2
 800363a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800363c:	4b37      	ldr	r3, [pc, #220]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003640:	4a36      	ldr	r2, [pc, #216]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003642:	f023 0301 	bic.w	r3, r3, #1
 8003646:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003648:	4b34      	ldr	r3, [pc, #208]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800364a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800364c:	4b35      	ldr	r3, [pc, #212]	; (8003724 <HAL_RCC_OscConfig+0x790>)
 800364e:	4013      	ands	r3, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003654:	00d2      	lsls	r2, r2, #3
 8003656:	4931      	ldr	r1, [pc, #196]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003658:	4313      	orrs	r3, r2
 800365a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800365c:	4b2f      	ldr	r3, [pc, #188]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	f023 020c 	bic.w	r2, r3, #12
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	492c      	ldr	r1, [pc, #176]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800366a:	4313      	orrs	r3, r2
 800366c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800366e:	4b2b      	ldr	r3, [pc, #172]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	f023 0202 	bic.w	r2, r3, #2
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	4928      	ldr	r1, [pc, #160]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800367c:	4313      	orrs	r3, r2
 800367e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003680:	4b26      	ldr	r3, [pc, #152]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	4a25      	ldr	r2, [pc, #148]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800368c:	4b23      	ldr	r3, [pc, #140]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	4a22      	ldr	r2, [pc, #136]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003696:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003698:	4b20      	ldr	r3, [pc, #128]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	4a1f      	ldr	r2, [pc, #124]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800369e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80036a4:	4b1d      	ldr	r3, [pc, #116]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	4a1c      	ldr	r2, [pc, #112]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b0:	4b1a      	ldr	r3, [pc, #104]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a19      	ldr	r2, [pc, #100]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80036b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fe fa02 	bl	8001ac4 <HAL_GetTick>
 80036c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c4:	f7fe f9fe 	bl	8001ac4 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e067      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036d6:	4b11      	ldr	r3, [pc, #68]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0x730>
 80036e2:	e05f      	b.n	80037a4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e4:	4b0d      	ldr	r3, [pc, #52]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a0c      	ldr	r2, [pc, #48]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80036ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f0:	f7fe f9e8 	bl	8001ac4 <HAL_GetTick>
 80036f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f8:	f7fe f9e4 	bl	8001ac4 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e04d      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800370a:	4b04      	ldr	r3, [pc, #16]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_RCC_OscConfig+0x764>
 8003716:	e045      	b.n	80037a4 <HAL_RCC_OscConfig+0x810>
 8003718:	58024800 	.word	0x58024800
 800371c:	58024400 	.word	0x58024400
 8003720:	fffffc0c 	.word	0xfffffc0c
 8003724:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003728:	4b21      	ldr	r3, [pc, #132]	; (80037b0 <HAL_RCC_OscConfig+0x81c>)
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800372e:	4b20      	ldr	r3, [pc, #128]	; (80037b0 <HAL_RCC_OscConfig+0x81c>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	2b01      	cmp	r3, #1
 800373a:	d031      	beq.n	80037a0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f003 0203 	and.w	r2, r3, #3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003746:	429a      	cmp	r2, r3
 8003748:	d12a      	bne.n	80037a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003756:	429a      	cmp	r2, r3
 8003758:	d122      	bne.n	80037a0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003766:	429a      	cmp	r2, r3
 8003768:	d11a      	bne.n	80037a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	0a5b      	lsrs	r3, r3, #9
 800376e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003776:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d111      	bne.n	80037a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	0c1b      	lsrs	r3, r3, #16
 8003780:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003788:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800378a:	429a      	cmp	r2, r3
 800378c:	d108      	bne.n	80037a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	0e1b      	lsrs	r3, r3, #24
 8003792:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3730      	adds	r7, #48	; 0x30
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	58024400 	.word	0x58024400

080037b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e19c      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037c8:	4b8a      	ldr	r3, [pc, #552]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 030f 	and.w	r3, r3, #15
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d910      	bls.n	80037f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d6:	4b87      	ldr	r3, [pc, #540]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 020f 	bic.w	r2, r3, #15
 80037de:	4985      	ldr	r1, [pc, #532]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e6:	4b83      	ldr	r3, [pc, #524]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e184      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d010      	beq.n	8003826 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	4b7b      	ldr	r3, [pc, #492]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003810:	429a      	cmp	r2, r3
 8003812:	d908      	bls.n	8003826 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003814:	4b78      	ldr	r3, [pc, #480]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	4975      	ldr	r1, [pc, #468]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003822:	4313      	orrs	r3, r2
 8003824:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d010      	beq.n	8003854 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	4b70      	ldr	r3, [pc, #448]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800383e:	429a      	cmp	r2, r3
 8003840:	d908      	bls.n	8003854 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003842:	4b6d      	ldr	r3, [pc, #436]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	496a      	ldr	r1, [pc, #424]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003850:	4313      	orrs	r3, r2
 8003852:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	2b00      	cmp	r3, #0
 800385e:	d010      	beq.n	8003882 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699a      	ldr	r2, [r3, #24]
 8003864:	4b64      	ldr	r3, [pc, #400]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800386c:	429a      	cmp	r2, r3
 800386e:	d908      	bls.n	8003882 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003870:	4b61      	ldr	r3, [pc, #388]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	495e      	ldr	r1, [pc, #376]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 800387e:	4313      	orrs	r3, r2
 8003880:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	d010      	beq.n	80038b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69da      	ldr	r2, [r3, #28]
 8003892:	4b59      	ldr	r3, [pc, #356]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800389a:	429a      	cmp	r2, r3
 800389c:	d908      	bls.n	80038b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800389e:	4b56      	ldr	r3, [pc, #344]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	4953      	ldr	r1, [pc, #332]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d010      	beq.n	80038de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	4b4d      	ldr	r3, [pc, #308]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d908      	bls.n	80038de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038cc:	4b4a      	ldr	r3, [pc, #296]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	f023 020f 	bic.w	r2, r3, #15
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	4947      	ldr	r1, [pc, #284]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d055      	beq.n	8003996 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80038ea:	4b43      	ldr	r3, [pc, #268]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	4940      	ldr	r1, [pc, #256]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b02      	cmp	r3, #2
 8003902:	d107      	bne.n	8003914 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003904:	4b3c      	ldr	r3, [pc, #240]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d121      	bne.n	8003954 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0f6      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b03      	cmp	r3, #3
 800391a:	d107      	bne.n	800392c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800391c:	4b36      	ldr	r3, [pc, #216]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d115      	bne.n	8003954 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0ea      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d107      	bne.n	8003944 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003934:	4b30      	ldr	r3, [pc, #192]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d109      	bne.n	8003954 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0de      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003944:	4b2c      	ldr	r3, [pc, #176]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0d6      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003954:	4b28      	ldr	r3, [pc, #160]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	f023 0207 	bic.w	r2, r3, #7
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	4925      	ldr	r1, [pc, #148]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003962:	4313      	orrs	r3, r2
 8003964:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003966:	f7fe f8ad 	bl	8001ac4 <HAL_GetTick>
 800396a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396c:	e00a      	b.n	8003984 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800396e:	f7fe f8a9 	bl	8001ac4 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	f241 3288 	movw	r2, #5000	; 0x1388
 800397c:	4293      	cmp	r3, r2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e0be      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003984:	4b1c      	ldr	r3, [pc, #112]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	429a      	cmp	r2, r3
 8003994:	d1eb      	bne.n	800396e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d010      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	4b14      	ldr	r3, [pc, #80]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d208      	bcs.n	80039c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b2:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f023 020f 	bic.w	r2, r3, #15
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	490e      	ldr	r1, [pc, #56]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d214      	bcs.n	80039fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 020f 	bic.w	r2, r3, #15
 80039da:	4906      	ldr	r1, [pc, #24]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	4313      	orrs	r3, r2
 80039e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e086      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>
 80039f4:	52002000 	.word	0x52002000
 80039f8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d010      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	4b3f      	ldr	r3, [pc, #252]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d208      	bcs.n	8003a2a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a18:	4b3c      	ldr	r3, [pc, #240]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	4939      	ldr	r1, [pc, #228]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d010      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	4b34      	ldr	r3, [pc, #208]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d208      	bcs.n	8003a58 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a46:	4b31      	ldr	r3, [pc, #196]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	492e      	ldr	r1, [pc, #184]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d010      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	699a      	ldr	r2, [r3, #24]
 8003a68:	4b28      	ldr	r3, [pc, #160]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d208      	bcs.n	8003a86 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a74:	4b25      	ldr	r3, [pc, #148]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	4922      	ldr	r1, [pc, #136]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d010      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69da      	ldr	r2, [r3, #28]
 8003a96:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d208      	bcs.n	8003ab4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003aa2:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	4917      	ldr	r1, [pc, #92]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ab4:	f000 f834 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	4b14      	ldr	r3, [pc, #80]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	0a1b      	lsrs	r3, r3, #8
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	4912      	ldr	r1, [pc, #72]	; (8003b10 <HAL_RCC_ClockConfig+0x35c>)
 8003ac6:	5ccb      	ldrb	r3, [r1, r3]
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ad2:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	4a0d      	ldr	r2, [pc, #52]	; (8003b10 <HAL_RCC_ClockConfig+0x35c>)
 8003adc:	5cd3      	ldrb	r3, [r2, r3]
 8003ade:	f003 031f 	and.w	r3, r3, #31
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae8:	4a0a      	ldr	r2, [pc, #40]	; (8003b14 <HAL_RCC_ClockConfig+0x360>)
 8003aea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003aec:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <HAL_RCC_ClockConfig+0x364>)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003af2:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <HAL_RCC_ClockConfig+0x368>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fd ff9a 	bl	8001a30 <HAL_InitTick>
 8003afc:	4603      	mov	r3, r0
 8003afe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	58024400 	.word	0x58024400
 8003b10:	0800badc 	.word	0x0800badc
 8003b14:	24000004 	.word	0x24000004
 8003b18:	24000000 	.word	0x24000000
 8003b1c:	24000008 	.word	0x24000008

08003b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b089      	sub	sp, #36	; 0x24
 8003b24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b26:	4bb3      	ldr	r3, [pc, #716]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b2e:	2b18      	cmp	r3, #24
 8003b30:	f200 8155 	bhi.w	8003dde <HAL_RCC_GetSysClockFreq+0x2be>
 8003b34:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003ba1 	.word	0x08003ba1
 8003b40:	08003ddf 	.word	0x08003ddf
 8003b44:	08003ddf 	.word	0x08003ddf
 8003b48:	08003ddf 	.word	0x08003ddf
 8003b4c:	08003ddf 	.word	0x08003ddf
 8003b50:	08003ddf 	.word	0x08003ddf
 8003b54:	08003ddf 	.word	0x08003ddf
 8003b58:	08003ddf 	.word	0x08003ddf
 8003b5c:	08003bc7 	.word	0x08003bc7
 8003b60:	08003ddf 	.word	0x08003ddf
 8003b64:	08003ddf 	.word	0x08003ddf
 8003b68:	08003ddf 	.word	0x08003ddf
 8003b6c:	08003ddf 	.word	0x08003ddf
 8003b70:	08003ddf 	.word	0x08003ddf
 8003b74:	08003ddf 	.word	0x08003ddf
 8003b78:	08003ddf 	.word	0x08003ddf
 8003b7c:	08003bcd 	.word	0x08003bcd
 8003b80:	08003ddf 	.word	0x08003ddf
 8003b84:	08003ddf 	.word	0x08003ddf
 8003b88:	08003ddf 	.word	0x08003ddf
 8003b8c:	08003ddf 	.word	0x08003ddf
 8003b90:	08003ddf 	.word	0x08003ddf
 8003b94:	08003ddf 	.word	0x08003ddf
 8003b98:	08003ddf 	.word	0x08003ddf
 8003b9c:	08003bd3 	.word	0x08003bd3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ba0:	4b94      	ldr	r3, [pc, #592]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d009      	beq.n	8003bc0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003bac:	4b91      	ldr	r3, [pc, #580]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	08db      	lsrs	r3, r3, #3
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	4a90      	ldr	r2, [pc, #576]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003bbe:	e111      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003bc0:	4b8d      	ldr	r3, [pc, #564]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bc2:	61bb      	str	r3, [r7, #24]
    break;
 8003bc4:	e10e      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003bc6:	4b8d      	ldr	r3, [pc, #564]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003bc8:	61bb      	str	r3, [r7, #24]
    break;
 8003bca:	e10b      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003bcc:	4b8c      	ldr	r3, [pc, #560]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003bce:	61bb      	str	r3, [r7, #24]
    break;
 8003bd0:	e108      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bd2:	4b88      	ldr	r3, [pc, #544]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003bdc:	4b85      	ldr	r3, [pc, #532]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	091b      	lsrs	r3, r3, #4
 8003be2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003be8:	4b82      	ldr	r3, [pc, #520]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003bf2:	4b80      	ldr	r3, [pc, #512]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf6:	08db      	lsrs	r3, r3, #3
 8003bf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	fb02 f303 	mul.w	r3, r2, r3
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 80e1 	beq.w	8003dd8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	f000 8083 	beq.w	8003d24 <HAL_RCC_GetSysClockFreq+0x204>
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	f200 80a1 	bhi.w	8003d68 <HAL_RCC_GetSysClockFreq+0x248>
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0x114>
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d056      	beq.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003c32:	e099      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c34:	4b6f      	ldr	r3, [pc, #444]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0320 	and.w	r3, r3, #32
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d02d      	beq.n	8003c9c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c40:	4b6c      	ldr	r3, [pc, #432]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	08db      	lsrs	r3, r3, #3
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	4a6b      	ldr	r2, [pc, #428]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c50:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	ee07 3a90 	vmov	s15, r3
 8003c58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c6a:	4b62      	ldr	r3, [pc, #392]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c72:	ee07 3a90 	vmov	s15, r3
 8003c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c7e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003e04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003c9a:	e087      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	ee07 3a90 	vmov	s15, r3
 8003ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003e08 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cae:	4b51      	ldr	r3, [pc, #324]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cb6:	ee07 3a90 	vmov	s15, r3
 8003cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cc2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003e04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cde:	e065      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cea:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003e0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cf2:	4b40      	ldr	r3, [pc, #256]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cfa:	ee07 3a90 	vmov	s15, r3
 8003cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d02:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d06:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003e04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d22:	e043      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	ee07 3a90 	vmov	s15, r3
 8003d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003e10 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d36:	4b2f      	ldr	r3, [pc, #188]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3e:	ee07 3a90 	vmov	s15, r3
 8003d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d46:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d4a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003e04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d66:	e021      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d72:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003e0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d7a:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d8e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003e04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003daa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003dac:	4b11      	ldr	r3, [pc, #68]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db0:	0a5b      	lsrs	r3, r3, #9
 8003db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003db6:	3301      	adds	r3, #1
 8003db8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	ee07 3a90 	vmov	s15, r3
 8003dc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003dc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dd0:	ee17 3a90 	vmov	r3, s15
 8003dd4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003dd6:	e005      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61bb      	str	r3, [r7, #24]
    break;
 8003ddc:	e002      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003dde:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003de0:	61bb      	str	r3, [r7, #24]
    break;
 8003de2:	bf00      	nop
  }

  return sysclockfreq;
 8003de4:	69bb      	ldr	r3, [r7, #24]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3724      	adds	r7, #36	; 0x24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	58024400 	.word	0x58024400
 8003df8:	03d09000 	.word	0x03d09000
 8003dfc:	003d0900 	.word	0x003d0900
 8003e00:	007a1200 	.word	0x007a1200
 8003e04:	46000000 	.word	0x46000000
 8003e08:	4c742400 	.word	0x4c742400
 8003e0c:	4a742400 	.word	0x4a742400
 8003e10:	4af42400 	.word	0x4af42400

08003e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003e1a:	f7ff fe81 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	4b10      	ldr	r3, [pc, #64]	; (8003e64 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	0a1b      	lsrs	r3, r3, #8
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	490f      	ldr	r1, [pc, #60]	; (8003e68 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e2c:	5ccb      	ldrb	r3, [r1, r3]
 8003e2e:	f003 031f 	and.w	r3, r3, #31
 8003e32:	fa22 f303 	lsr.w	r3, r2, r3
 8003e36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e38:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	4a09      	ldr	r2, [pc, #36]	; (8003e68 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e42:	5cd3      	ldrb	r3, [r2, r3]
 8003e44:	f003 031f 	and.w	r3, r3, #31
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4e:	4a07      	ldr	r2, [pc, #28]	; (8003e6c <HAL_RCC_GetHCLKFreq+0x58>)
 8003e50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e52:	4a07      	ldr	r2, [pc, #28]	; (8003e70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003e58:	4b04      	ldr	r3, [pc, #16]	; (8003e6c <HAL_RCC_GetHCLKFreq+0x58>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	58024400 	.word	0x58024400
 8003e68:	0800badc 	.word	0x0800badc
 8003e6c:	24000004 	.word	0x24000004
 8003e70:	24000000 	.word	0x24000000

08003e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003e78:	f7ff ffcc 	bl	8003e14 <HAL_RCC_GetHCLKFreq>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	091b      	lsrs	r3, r3, #4
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	4904      	ldr	r1, [pc, #16]	; (8003e9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e8a:	5ccb      	ldrb	r3, [r1, r3]
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	58024400 	.word	0x58024400
 8003e9c:	0800badc 	.word	0x0800badc

08003ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003ea4:	f7ff ffb6 	bl	8003e14 <HAL_RCC_GetHCLKFreq>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	0a1b      	lsrs	r3, r3, #8
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	4904      	ldr	r1, [pc, #16]	; (8003ec8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eb6:	5ccb      	ldrb	r3, [r1, r3]
 8003eb8:	f003 031f 	and.w	r3, r3, #31
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	58024400 	.word	0x58024400
 8003ec8:	0800badc 	.word	0x0800badc

08003ecc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ed8:	2300      	movs	r3, #0
 8003eda:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d03f      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ef0:	d02a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ef2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ef6:	d824      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ef8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003efc:	d018      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003efe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f02:	d81e      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f0c:	d007      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f0e:	e018      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f10:	4bab      	ldr	r3, [pc, #684]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	4aaa      	ldr	r2, [pc, #680]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f1c:	e015      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3304      	adds	r3, #4
 8003f22:	2102      	movs	r1, #2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f001 f9cf 	bl	80052c8 <RCCEx_PLL2_Config>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f2e:	e00c      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3324      	adds	r3, #36	; 0x24
 8003f34:	2102      	movs	r1, #2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f001 fa78 	bl	800542c <RCCEx_PLL3_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f40:	e003      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	75fb      	strb	r3, [r7, #23]
      break;
 8003f46:	e000      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f4a:	7dfb      	ldrb	r3, [r7, #23]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d109      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f50:	4b9b      	ldr	r3, [pc, #620]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f5c:	4998      	ldr	r1, [pc, #608]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	650b      	str	r3, [r1, #80]	; 0x50
 8003f62:	e001      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f64:	7dfb      	ldrb	r3, [r7, #23]
 8003f66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d03d      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d826      	bhi.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003f7c:	a201      	add	r2, pc, #4	; (adr r2, 8003f84 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f82:	bf00      	nop
 8003f84:	08003f99 	.word	0x08003f99
 8003f88:	08003fa7 	.word	0x08003fa7
 8003f8c:	08003fb9 	.word	0x08003fb9
 8003f90:	08003fd1 	.word	0x08003fd1
 8003f94:	08003fd1 	.word	0x08003fd1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f98:	4b89      	ldr	r3, [pc, #548]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	4a88      	ldr	r2, [pc, #544]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fa4:	e015      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	2100      	movs	r1, #0
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 f98b 	bl	80052c8 <RCCEx_PLL2_Config>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fb6:	e00c      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3324      	adds	r3, #36	; 0x24
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f001 fa34 	bl	800542c <RCCEx_PLL3_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fc8:	e003      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8003fce:	e000      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d109      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fd8:	4b79      	ldr	r3, [pc, #484]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fdc:	f023 0207 	bic.w	r2, r3, #7
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe4:	4976      	ldr	r1, [pc, #472]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	650b      	str	r3, [r1, #80]	; 0x50
 8003fea:	e001      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d042      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004004:	d02b      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800400a:	d825      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800400c:	2bc0      	cmp	r3, #192	; 0xc0
 800400e:	d028      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004010:	2bc0      	cmp	r3, #192	; 0xc0
 8004012:	d821      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004014:	2b80      	cmp	r3, #128	; 0x80
 8004016:	d016      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004018:	2b80      	cmp	r3, #128	; 0x80
 800401a:	d81d      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004020:	2b40      	cmp	r3, #64	; 0x40
 8004022:	d007      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004024:	e018      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004026:	4b66      	ldr	r3, [pc, #408]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	4a65      	ldr	r2, [pc, #404]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800402c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004030:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004032:	e017      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	2100      	movs	r1, #0
 800403a:	4618      	mov	r0, r3
 800403c:	f001 f944 	bl	80052c8 <RCCEx_PLL2_Config>
 8004040:	4603      	mov	r3, r0
 8004042:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004044:	e00e      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3324      	adds	r3, #36	; 0x24
 800404a:	2100      	movs	r1, #0
 800404c:	4618      	mov	r0, r3
 800404e:	f001 f9ed 	bl	800542c <RCCEx_PLL3_Config>
 8004052:	4603      	mov	r3, r0
 8004054:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004056:	e005      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	75fb      	strb	r3, [r7, #23]
      break;
 800405c:	e002      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800405e:	bf00      	nop
 8004060:	e000      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004064:	7dfb      	ldrb	r3, [r7, #23]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d109      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800406a:	4b55      	ldr	r3, [pc, #340]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800406c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004076:	4952      	ldr	r1, [pc, #328]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004078:	4313      	orrs	r3, r2
 800407a:	650b      	str	r3, [r1, #80]	; 0x50
 800407c:	e001      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407e:	7dfb      	ldrb	r3, [r7, #23]
 8004080:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408a:	2b00      	cmp	r3, #0
 800408c:	d049      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004094:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004098:	d030      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800409a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800409e:	d82a      	bhi.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80040a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040a4:	d02c      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80040a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040aa:	d824      	bhi.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80040ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b0:	d018      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80040b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b6:	d81e      	bhi.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80040bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040c0:	d007      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80040c2:	e018      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040c4:	4b3e      	ldr	r3, [pc, #248]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	4a3d      	ldr	r2, [pc, #244]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040d0:	e017      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3304      	adds	r3, #4
 80040d6:	2100      	movs	r1, #0
 80040d8:	4618      	mov	r0, r3
 80040da:	f001 f8f5 	bl	80052c8 <RCCEx_PLL2_Config>
 80040de:	4603      	mov	r3, r0
 80040e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80040e2:	e00e      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3324      	adds	r3, #36	; 0x24
 80040e8:	2100      	movs	r1, #0
 80040ea:	4618      	mov	r0, r3
 80040ec:	f001 f99e 	bl	800542c <RCCEx_PLL3_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040f4:	e005      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	75fb      	strb	r3, [r7, #23]
      break;
 80040fa:	e002      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80040fc:	bf00      	nop
 80040fe:	e000      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004102:	7dfb      	ldrb	r3, [r7, #23]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004108:	4b2d      	ldr	r3, [pc, #180]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800410a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004116:	492a      	ldr	r1, [pc, #168]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004118:	4313      	orrs	r3, r2
 800411a:	658b      	str	r3, [r1, #88]	; 0x58
 800411c:	e001      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411e:	7dfb      	ldrb	r3, [r7, #23]
 8004120:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800412a:	2b00      	cmp	r3, #0
 800412c:	d04c      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004134:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004138:	d030      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800413a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800413e:	d82a      	bhi.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004140:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004144:	d02c      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004146:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800414a:	d824      	bhi.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800414c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004150:	d018      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004152:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004156:	d81e      	bhi.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800415c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004160:	d007      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004162:	e018      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004164:	4b16      	ldr	r3, [pc, #88]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	4a15      	ldr	r2, [pc, #84]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800416a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800416e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004170:	e017      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3304      	adds	r3, #4
 8004176:	2100      	movs	r1, #0
 8004178:	4618      	mov	r0, r3
 800417a:	f001 f8a5 	bl	80052c8 <RCCEx_PLL2_Config>
 800417e:	4603      	mov	r3, r0
 8004180:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004182:	e00e      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3324      	adds	r3, #36	; 0x24
 8004188:	2100      	movs	r1, #0
 800418a:	4618      	mov	r0, r3
 800418c:	f001 f94e 	bl	800542c <RCCEx_PLL3_Config>
 8004190:	4603      	mov	r3, r0
 8004192:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004194:	e005      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	75fb      	strb	r3, [r7, #23]
      break;
 800419a:	e002      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800419c:	bf00      	nop
 800419e:	e000      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80041a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a2:	7dfb      	ldrb	r3, [r7, #23]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10d      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80041b6:	4902      	ldr	r1, [pc, #8]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	658b      	str	r3, [r1, #88]	; 0x58
 80041bc:	e004      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80041be:	bf00      	nop
 80041c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c4:	7dfb      	ldrb	r3, [r7, #23]
 80041c6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d032      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d8:	2b30      	cmp	r3, #48	; 0x30
 80041da:	d01c      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80041dc:	2b30      	cmp	r3, #48	; 0x30
 80041de:	d817      	bhi.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d00c      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x332>
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d813      	bhi.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d016      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80041ec:	2b10      	cmp	r3, #16
 80041ee:	d10f      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041f0:	4baf      	ldr	r3, [pc, #700]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	4aae      	ldr	r2, [pc, #696]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80041f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80041fc:	e00e      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3304      	adds	r3, #4
 8004202:	2102      	movs	r1, #2
 8004204:	4618      	mov	r0, r3
 8004206:	f001 f85f 	bl	80052c8 <RCCEx_PLL2_Config>
 800420a:	4603      	mov	r3, r0
 800420c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800420e:	e005      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	75fb      	strb	r3, [r7, #23]
      break;
 8004214:	e002      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004216:	bf00      	nop
 8004218:	e000      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800421a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800421c:	7dfb      	ldrb	r3, [r7, #23]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d109      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004222:	4ba3      	ldr	r3, [pc, #652]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004226:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422e:	49a0      	ldr	r1, [pc, #640]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004230:	4313      	orrs	r3, r2
 8004232:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004234:	e001      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004236:	7dfb      	ldrb	r3, [r7, #23]
 8004238:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d047      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800424e:	d030      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004254:	d82a      	bhi.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004256:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800425a:	d02c      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800425c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004260:	d824      	bhi.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004266:	d018      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800426c:	d81e      	bhi.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004276:	d007      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004278:	e018      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800427a:	4b8d      	ldr	r3, [pc, #564]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	4a8c      	ldr	r2, [pc, #560]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004284:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004286:	e017      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3304      	adds	r3, #4
 800428c:	2100      	movs	r1, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f001 f81a 	bl	80052c8 <RCCEx_PLL2_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004298:	e00e      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	3324      	adds	r3, #36	; 0x24
 800429e:	2100      	movs	r1, #0
 80042a0:	4618      	mov	r0, r3
 80042a2:	f001 f8c3 	bl	800542c <RCCEx_PLL3_Config>
 80042a6:	4603      	mov	r3, r0
 80042a8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80042aa:	e005      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	75fb      	strb	r3, [r7, #23]
      break;
 80042b0:	e002      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80042b2:	bf00      	nop
 80042b4:	e000      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80042b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042b8:	7dfb      	ldrb	r3, [r7, #23]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d109      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80042be:	4b7c      	ldr	r3, [pc, #496]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80042c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ca:	4979      	ldr	r1, [pc, #484]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	650b      	str	r3, [r1, #80]	; 0x50
 80042d0:	e001      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d2:	7dfb      	ldrb	r3, [r7, #23]
 80042d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d049      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042ea:	d02e      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80042ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042f0:	d828      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80042f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042f6:	d02a      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x482>
 80042f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042fc:	d822      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80042fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004302:	d026      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004304:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004308:	d81c      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800430a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800430e:	d010      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004310:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004314:	d816      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004316:	2b00      	cmp	r3, #0
 8004318:	d01d      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800431a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800431e:	d111      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3304      	adds	r3, #4
 8004324:	2101      	movs	r1, #1
 8004326:	4618      	mov	r0, r3
 8004328:	f000 ffce 	bl	80052c8 <RCCEx_PLL2_Config>
 800432c:	4603      	mov	r3, r0
 800432e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004330:	e012      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3324      	adds	r3, #36	; 0x24
 8004336:	2101      	movs	r1, #1
 8004338:	4618      	mov	r0, r3
 800433a:	f001 f877 	bl	800542c <RCCEx_PLL3_Config>
 800433e:	4603      	mov	r3, r0
 8004340:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004342:	e009      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	75fb      	strb	r3, [r7, #23]
      break;
 8004348:	e006      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800434a:	bf00      	nop
 800434c:	e004      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800434e:	bf00      	nop
 8004350:	e002      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004352:	bf00      	nop
 8004354:	e000      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004356:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004358:	7dfb      	ldrb	r3, [r7, #23]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d109      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800435e:	4b54      	ldr	r3, [pc, #336]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004362:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800436a:	4951      	ldr	r1, [pc, #324]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800436c:	4313      	orrs	r3, r2
 800436e:	650b      	str	r3, [r1, #80]	; 0x50
 8004370:	e001      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004372:	7dfb      	ldrb	r3, [r7, #23]
 8004374:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d04b      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800438c:	d02e      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x520>
 800438e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004392:	d828      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004398:	d02a      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800439a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439e:	d822      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80043a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043a4:	d026      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80043a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043aa:	d81c      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80043ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043b0:	d010      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80043b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043b6:	d816      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01d      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80043bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043c0:	d111      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3304      	adds	r3, #4
 80043c6:	2101      	movs	r1, #1
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 ff7d 	bl	80052c8 <RCCEx_PLL2_Config>
 80043ce:	4603      	mov	r3, r0
 80043d0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80043d2:	e012      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3324      	adds	r3, #36	; 0x24
 80043d8:	2101      	movs	r1, #1
 80043da:	4618      	mov	r0, r3
 80043dc:	f001 f826 	bl	800542c <RCCEx_PLL3_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80043e4:	e009      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	75fb      	strb	r3, [r7, #23]
      break;
 80043ea:	e006      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80043ec:	bf00      	nop
 80043ee:	e004      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80043f0:	bf00      	nop
 80043f2:	e002      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80043f4:	bf00      	nop
 80043f6:	e000      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80043f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043fa:	7dfb      	ldrb	r3, [r7, #23]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004400:	4b2b      	ldr	r3, [pc, #172]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004404:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800440e:	4928      	ldr	r1, [pc, #160]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004410:	4313      	orrs	r3, r2
 8004412:	658b      	str	r3, [r1, #88]	; 0x58
 8004414:	e001      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004416:	7dfb      	ldrb	r3, [r7, #23]
 8004418:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d02f      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800442a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800442e:	d00e      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004434:	d814      	bhi.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004436:	2b00      	cmp	r3, #0
 8004438:	d015      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800443a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800443e:	d10f      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004440:	4b1b      	ldr	r3, [pc, #108]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	4a1a      	ldr	r2, [pc, #104]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800444a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800444c:	e00c      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3304      	adds	r3, #4
 8004452:	2101      	movs	r1, #1
 8004454:	4618      	mov	r0, r3
 8004456:	f000 ff37 	bl	80052c8 <RCCEx_PLL2_Config>
 800445a:	4603      	mov	r3, r0
 800445c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800445e:	e003      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	75fb      	strb	r3, [r7, #23]
      break;
 8004464:	e000      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004466:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004468:	7dfb      	ldrb	r3, [r7, #23]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d109      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800446e:	4b10      	ldr	r3, [pc, #64]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004472:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800447a:	490d      	ldr	r1, [pc, #52]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800447c:	4313      	orrs	r3, r2
 800447e:	650b      	str	r3, [r1, #80]	; 0x50
 8004480:	e001      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004482:	7dfb      	ldrb	r3, [r7, #23]
 8004484:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d033      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	2b03      	cmp	r3, #3
 8004498:	d81c      	bhi.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800449a:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800449c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a0:	080044db 	.word	0x080044db
 80044a4:	080044b5 	.word	0x080044b5
 80044a8:	080044c3 	.word	0x080044c3
 80044ac:	080044db 	.word	0x080044db
 80044b0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044b4:	4bb8      	ldr	r3, [pc, #736]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	4ab7      	ldr	r2, [pc, #732]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80044c0:	e00c      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3304      	adds	r3, #4
 80044c6:	2102      	movs	r1, #2
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fefd 	bl	80052c8 <RCCEx_PLL2_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80044d2:	e003      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	75fb      	strb	r3, [r7, #23]
      break;
 80044d8:	e000      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80044da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044dc:	7dfb      	ldrb	r3, [r7, #23]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d109      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80044e2:	4bad      	ldr	r3, [pc, #692]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e6:	f023 0203 	bic.w	r2, r3, #3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ee:	49aa      	ldr	r1, [pc, #680]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044f4:	e001      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f6:	7dfb      	ldrb	r3, [r7, #23]
 80044f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8086 	beq.w	8004614 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004508:	4ba4      	ldr	r3, [pc, #656]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4aa3      	ldr	r2, [pc, #652]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800450e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004512:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004514:	f7fd fad6 	bl	8001ac4 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800451a:	e009      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800451c:	f7fd fad2 	bl	8001ac4 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b64      	cmp	r3, #100	; 0x64
 8004528:	d902      	bls.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	75fb      	strb	r3, [r7, #23]
        break;
 800452e:	e005      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004530:	4b9a      	ldr	r3, [pc, #616]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0ef      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800453c:	7dfb      	ldrb	r3, [r7, #23]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d166      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004542:	4b95      	ldr	r3, [pc, #596]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004544:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800454c:	4053      	eors	r3, r2
 800454e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004552:	2b00      	cmp	r3, #0
 8004554:	d013      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004556:	4b90      	ldr	r3, [pc, #576]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004560:	4b8d      	ldr	r3, [pc, #564]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004564:	4a8c      	ldr	r2, [pc, #560]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800456a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800456c:	4b8a      	ldr	r3, [pc, #552]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800456e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004570:	4a89      	ldr	r2, [pc, #548]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004576:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004578:	4a87      	ldr	r2, [pc, #540]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004588:	d115      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458a:	f7fd fa9b 	bl	8001ac4 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004590:	e00b      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004592:	f7fd fa97 	bl	8001ac4 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d902      	bls.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	75fb      	strb	r3, [r7, #23]
            break;
 80045a8:	e005      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045aa:	4b7b      	ldr	r3, [pc, #492]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0ed      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80045b6:	7dfb      	ldrb	r3, [r7, #23]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d126      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ca:	d10d      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80045cc:	4b72      	ldr	r3, [pc, #456]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045da:	0919      	lsrs	r1, r3, #4
 80045dc:	4b70      	ldr	r3, [pc, #448]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80045de:	400b      	ands	r3, r1
 80045e0:	496d      	ldr	r1, [pc, #436]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	610b      	str	r3, [r1, #16]
 80045e6:	e005      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80045e8:	4b6b      	ldr	r3, [pc, #428]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	4a6a      	ldr	r2, [pc, #424]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80045ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045f2:	6113      	str	r3, [r2, #16]
 80045f4:	4b68      	ldr	r3, [pc, #416]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80045f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004602:	4965      	ldr	r1, [pc, #404]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004604:	4313      	orrs	r3, r2
 8004606:	670b      	str	r3, [r1, #112]	; 0x70
 8004608:	e004      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800460a:	7dfb      	ldrb	r3, [r7, #23]
 800460c:	75bb      	strb	r3, [r7, #22]
 800460e:	e001      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004610:	7dfb      	ldrb	r3, [r7, #23]
 8004612:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d07e      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004624:	2b28      	cmp	r3, #40	; 0x28
 8004626:	d867      	bhi.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004628:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800462a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462e:	bf00      	nop
 8004630:	080046ff 	.word	0x080046ff
 8004634:	080046f9 	.word	0x080046f9
 8004638:	080046f9 	.word	0x080046f9
 800463c:	080046f9 	.word	0x080046f9
 8004640:	080046f9 	.word	0x080046f9
 8004644:	080046f9 	.word	0x080046f9
 8004648:	080046f9 	.word	0x080046f9
 800464c:	080046f9 	.word	0x080046f9
 8004650:	080046d5 	.word	0x080046d5
 8004654:	080046f9 	.word	0x080046f9
 8004658:	080046f9 	.word	0x080046f9
 800465c:	080046f9 	.word	0x080046f9
 8004660:	080046f9 	.word	0x080046f9
 8004664:	080046f9 	.word	0x080046f9
 8004668:	080046f9 	.word	0x080046f9
 800466c:	080046f9 	.word	0x080046f9
 8004670:	080046e7 	.word	0x080046e7
 8004674:	080046f9 	.word	0x080046f9
 8004678:	080046f9 	.word	0x080046f9
 800467c:	080046f9 	.word	0x080046f9
 8004680:	080046f9 	.word	0x080046f9
 8004684:	080046f9 	.word	0x080046f9
 8004688:	080046f9 	.word	0x080046f9
 800468c:	080046f9 	.word	0x080046f9
 8004690:	080046ff 	.word	0x080046ff
 8004694:	080046f9 	.word	0x080046f9
 8004698:	080046f9 	.word	0x080046f9
 800469c:	080046f9 	.word	0x080046f9
 80046a0:	080046f9 	.word	0x080046f9
 80046a4:	080046f9 	.word	0x080046f9
 80046a8:	080046f9 	.word	0x080046f9
 80046ac:	080046f9 	.word	0x080046f9
 80046b0:	080046ff 	.word	0x080046ff
 80046b4:	080046f9 	.word	0x080046f9
 80046b8:	080046f9 	.word	0x080046f9
 80046bc:	080046f9 	.word	0x080046f9
 80046c0:	080046f9 	.word	0x080046f9
 80046c4:	080046f9 	.word	0x080046f9
 80046c8:	080046f9 	.word	0x080046f9
 80046cc:	080046f9 	.word	0x080046f9
 80046d0:	080046ff 	.word	0x080046ff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3304      	adds	r3, #4
 80046d8:	2101      	movs	r1, #1
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fdf4 	bl	80052c8 <RCCEx_PLL2_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80046e4:	e00c      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3324      	adds	r3, #36	; 0x24
 80046ea:	2101      	movs	r1, #1
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fe9d 	bl	800542c <RCCEx_PLL3_Config>
 80046f2:	4603      	mov	r3, r0
 80046f4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80046f6:	e003      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	75fb      	strb	r3, [r7, #23]
      break;
 80046fc:	e000      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80046fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004700:	7dfb      	ldrb	r3, [r7, #23]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d109      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004706:	4b24      	ldr	r3, [pc, #144]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004712:	4921      	ldr	r1, [pc, #132]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004714:	4313      	orrs	r3, r2
 8004716:	654b      	str	r3, [r1, #84]	; 0x54
 8004718:	e001      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471a:	7dfb      	ldrb	r3, [r7, #23]
 800471c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d03e      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472e:	2b05      	cmp	r3, #5
 8004730:	d820      	bhi.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004732:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004738:	0800477b 	.word	0x0800477b
 800473c:	08004751 	.word	0x08004751
 8004740:	08004763 	.word	0x08004763
 8004744:	0800477b 	.word	0x0800477b
 8004748:	0800477b 	.word	0x0800477b
 800474c:	0800477b 	.word	0x0800477b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3304      	adds	r3, #4
 8004754:	2101      	movs	r1, #1
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fdb6 	bl	80052c8 <RCCEx_PLL2_Config>
 800475c:	4603      	mov	r3, r0
 800475e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004760:	e00c      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3324      	adds	r3, #36	; 0x24
 8004766:	2101      	movs	r1, #1
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fe5f 	bl	800542c <RCCEx_PLL3_Config>
 800476e:	4603      	mov	r3, r0
 8004770:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004772:	e003      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	75fb      	strb	r3, [r7, #23]
      break;
 8004778:	e000      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800477a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800477c:	7dfb      	ldrb	r3, [r7, #23]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d110      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004782:	4b05      	ldr	r3, [pc, #20]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004786:	f023 0207 	bic.w	r2, r3, #7
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478e:	4902      	ldr	r1, [pc, #8]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004790:	4313      	orrs	r3, r2
 8004792:	654b      	str	r3, [r1, #84]	; 0x54
 8004794:	e008      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8004796:	bf00      	nop
 8004798:	58024400 	.word	0x58024400
 800479c:	58024800 	.word	0x58024800
 80047a0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a4:	7dfb      	ldrb	r3, [r7, #23]
 80047a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d039      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ba:	2b05      	cmp	r3, #5
 80047bc:	d820      	bhi.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80047be:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80047c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c4:	08004807 	.word	0x08004807
 80047c8:	080047dd 	.word	0x080047dd
 80047cc:	080047ef 	.word	0x080047ef
 80047d0:	08004807 	.word	0x08004807
 80047d4:	08004807 	.word	0x08004807
 80047d8:	08004807 	.word	0x08004807
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3304      	adds	r3, #4
 80047e0:	2101      	movs	r1, #1
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fd70 	bl	80052c8 <RCCEx_PLL2_Config>
 80047e8:	4603      	mov	r3, r0
 80047ea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80047ec:	e00c      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3324      	adds	r3, #36	; 0x24
 80047f2:	2101      	movs	r1, #1
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fe19 	bl	800542c <RCCEx_PLL3_Config>
 80047fa:	4603      	mov	r3, r0
 80047fc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80047fe:	e003      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	75fb      	strb	r3, [r7, #23]
      break;
 8004804:	e000      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004806:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004808:	7dfb      	ldrb	r3, [r7, #23]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10a      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800480e:	4bb7      	ldr	r3, [pc, #732]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004812:	f023 0207 	bic.w	r2, r3, #7
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481c:	49b3      	ldr	r1, [pc, #716]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800481e:	4313      	orrs	r3, r2
 8004820:	658b      	str	r3, [r1, #88]	; 0x58
 8004822:	e001      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004824:	7dfb      	ldrb	r3, [r7, #23]
 8004826:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0320 	and.w	r3, r3, #32
 8004830:	2b00      	cmp	r3, #0
 8004832:	d04b      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800483a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800483e:	d02e      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004840:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004844:	d828      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484a:	d02a      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800484c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004850:	d822      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004852:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004856:	d026      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004858:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800485c:	d81c      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800485e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004862:	d010      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004868:	d816      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d01d      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800486e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004872:	d111      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3304      	adds	r3, #4
 8004878:	2100      	movs	r1, #0
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fd24 	bl	80052c8 <RCCEx_PLL2_Config>
 8004880:	4603      	mov	r3, r0
 8004882:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004884:	e012      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3324      	adds	r3, #36	; 0x24
 800488a:	2102      	movs	r1, #2
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fdcd 	bl	800542c <RCCEx_PLL3_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004896:	e009      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	75fb      	strb	r3, [r7, #23]
      break;
 800489c:	e006      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800489e:	bf00      	nop
 80048a0:	e004      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80048a2:	bf00      	nop
 80048a4:	e002      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80048a6:	bf00      	nop
 80048a8:	e000      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80048aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ac:	7dfb      	ldrb	r3, [r7, #23]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10a      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048b2:	4b8e      	ldr	r3, [pc, #568]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80048b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048c0:	498a      	ldr	r1, [pc, #552]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	654b      	str	r3, [r1, #84]	; 0x54
 80048c6:	e001      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c8:	7dfb      	ldrb	r3, [r7, #23]
 80048ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d04b      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048e2:	d02e      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80048e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048e8:	d828      	bhi.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80048ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ee:	d02a      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80048f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f4:	d822      	bhi.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80048f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048fa:	d026      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80048fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004900:	d81c      	bhi.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004902:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004906:	d010      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800490c:	d816      	bhi.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800490e:	2b00      	cmp	r3, #0
 8004910:	d01d      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004916:	d111      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3304      	adds	r3, #4
 800491c:	2100      	movs	r1, #0
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fcd2 	bl	80052c8 <RCCEx_PLL2_Config>
 8004924:	4603      	mov	r3, r0
 8004926:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004928:	e012      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3324      	adds	r3, #36	; 0x24
 800492e:	2102      	movs	r1, #2
 8004930:	4618      	mov	r0, r3
 8004932:	f000 fd7b 	bl	800542c <RCCEx_PLL3_Config>
 8004936:	4603      	mov	r3, r0
 8004938:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800493a:	e009      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	75fb      	strb	r3, [r7, #23]
      break;
 8004940:	e006      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004942:	bf00      	nop
 8004944:	e004      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004946:	bf00      	nop
 8004948:	e002      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800494a:	bf00      	nop
 800494c:	e000      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800494e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004950:	7dfb      	ldrb	r3, [r7, #23]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10a      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004956:	4b65      	ldr	r3, [pc, #404]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004964:	4961      	ldr	r1, [pc, #388]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004966:	4313      	orrs	r3, r2
 8004968:	658b      	str	r3, [r1, #88]	; 0x58
 800496a:	e001      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496c:	7dfb      	ldrb	r3, [r7, #23]
 800496e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004978:	2b00      	cmp	r3, #0
 800497a:	d04b      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004982:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004986:	d02e      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004988:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800498c:	d828      	bhi.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800498e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004992:	d02a      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004998:	d822      	bhi.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800499a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800499e:	d026      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80049a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80049a4:	d81c      	bhi.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80049a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049aa:	d010      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80049ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049b0:	d816      	bhi.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01d      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80049b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ba:	d111      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3304      	adds	r3, #4
 80049c0:	2100      	movs	r1, #0
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fc80 	bl	80052c8 <RCCEx_PLL2_Config>
 80049c8:	4603      	mov	r3, r0
 80049ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80049cc:	e012      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	3324      	adds	r3, #36	; 0x24
 80049d2:	2102      	movs	r1, #2
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 fd29 	bl	800542c <RCCEx_PLL3_Config>
 80049da:	4603      	mov	r3, r0
 80049dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80049de:	e009      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	75fb      	strb	r3, [r7, #23]
      break;
 80049e4:	e006      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80049e6:	bf00      	nop
 80049e8:	e004      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80049ea:	bf00      	nop
 80049ec:	e002      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80049ee:	bf00      	nop
 80049f0:	e000      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80049f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049f4:	7dfb      	ldrb	r3, [r7, #23]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10a      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80049fa:	4b3c      	ldr	r3, [pc, #240]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80049fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a08:	4938      	ldr	r1, [pc, #224]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	658b      	str	r3, [r1, #88]	; 0x58
 8004a0e:	e001      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a10:	7dfb      	ldrb	r3, [r7, #23]
 8004a12:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d01a      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2a:	d10a      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3324      	adds	r3, #36	; 0x24
 8004a30:	2102      	movs	r1, #2
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fcfa 	bl	800542c <RCCEx_PLL3_Config>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004a42:	4b2a      	ldr	r3, [pc, #168]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a50:	4926      	ldr	r1, [pc, #152]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0310 	and.w	r3, r3, #16
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d01a      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a6c:	d10a      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	3324      	adds	r3, #36	; 0x24
 8004a72:	2102      	movs	r1, #2
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fcd9 	bl	800542c <RCCEx_PLL3_Config>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a84:	4b19      	ldr	r3, [pc, #100]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a92:	4916      	ldr	r1, [pc, #88]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d036      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004aaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aae:	d01f      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004ab0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ab4:	d817      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004abe:	d009      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004ac0:	e011      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fbfd 	bl	80052c8 <RCCEx_PLL2_Config>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004ad2:	e00e      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3324      	adds	r3, #36	; 0x24
 8004ad8:	2102      	movs	r1, #2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fca6 	bl	800542c <RCCEx_PLL3_Config>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004ae4:	e005      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8004aea:	e002      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004aec:	58024400 	.word	0x58024400
      break;
 8004af0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004af2:	7dfb      	ldrb	r3, [r7, #23]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10a      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004af8:	4b93      	ldr	r3, [pc, #588]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b06:	4990      	ldr	r1, [pc, #576]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	658b      	str	r3, [r1, #88]	; 0x58
 8004b0c:	e001      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0e:	7dfb      	ldrb	r3, [r7, #23]
 8004b10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d033      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b28:	d01c      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004b2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b2e:	d816      	bhi.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b34:	d003      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004b36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b3a:	d007      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004b3c:	e00f      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b3e:	4b82      	ldr	r3, [pc, #520]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	4a81      	ldr	r2, [pc, #516]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004b4a:	e00c      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3324      	adds	r3, #36	; 0x24
 8004b50:	2101      	movs	r1, #1
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fc6a 	bl	800542c <RCCEx_PLL3_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004b5c:	e003      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	75fb      	strb	r3, [r7, #23]
      break;
 8004b62:	e000      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004b64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b66:	7dfb      	ldrb	r3, [r7, #23]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b6c:	4b76      	ldr	r3, [pc, #472]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b7a:	4973      	ldr	r1, [pc, #460]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	654b      	str	r3, [r1, #84]	; 0x54
 8004b80:	e001      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b82:	7dfb      	ldrb	r3, [r7, #23]
 8004b84:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d029      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8004b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9e:	d007      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004ba0:	e00f      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba2:	4b69      	ldr	r3, [pc, #420]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba6:	4a68      	ldr	r2, [pc, #416]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004bae:	e00b      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	2102      	movs	r1, #2
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fb86 	bl	80052c8 <RCCEx_PLL2_Config>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004bc0:	e002      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bc8:	7dfb      	ldrb	r3, [r7, #23]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d109      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004bce:	4b5e      	ldr	r3, [pc, #376]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bda:	495b      	ldr	r1, [pc, #364]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004be0:	e001      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be2:	7dfb      	ldrb	r3, [r7, #23]
 8004be4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	3324      	adds	r3, #36	; 0x24
 8004bf6:	2102      	movs	r1, #2
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fc17 	bl	800542c <RCCEx_PLL3_Config>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d030      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c1c:	d017      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004c1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c22:	d811      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c28:	d013      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c2e:	d80b      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d010      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c38:	d106      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c3a:	4b43      	ldr	r3, [pc, #268]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3e:	4a42      	ldr	r2, [pc, #264]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004c46:	e007      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c4c:	e004      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004c4e:	bf00      	nop
 8004c50:	e002      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004c52:	bf00      	nop
 8004c54:	e000      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004c56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c58:	7dfb      	ldrb	r3, [r7, #23]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c5e:	4b3a      	ldr	r3, [pc, #232]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c6a:	4937      	ldr	r1, [pc, #220]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	654b      	str	r3, [r1, #84]	; 0x54
 8004c70:	e001      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c72:	7dfb      	ldrb	r3, [r7, #23]
 8004c74:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d008      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c82:	4b31      	ldr	r3, [pc, #196]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8e:	492e      	ldr	r1, [pc, #184]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d009      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004ca0:	4b29      	ldr	r3, [pc, #164]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004cae:	4926      	ldr	r1, [pc, #152]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d008      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cc0:	4b21      	ldr	r3, [pc, #132]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ccc:	491e      	ldr	r1, [pc, #120]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00d      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cde:	4b1a      	ldr	r3, [pc, #104]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	4a19      	ldr	r2, [pc, #100]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ce4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ce8:	6113      	str	r3, [r2, #16]
 8004cea:	4b17      	ldr	r3, [pc, #92]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004cec:	691a      	ldr	r2, [r3, #16]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004cf4:	4914      	ldr	r1, [pc, #80]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	da08      	bge.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d02:	4b11      	ldr	r3, [pc, #68]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0e:	490e      	ldr	r1, [pc, #56]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d009      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d20:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2e:	4906      	ldr	r1, [pc, #24]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004d34:	7dbb      	ldrb	r3, [r7, #22]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	e000      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	58024400 	.word	0x58024400

08004d4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004d50:	f7ff f860 	bl	8003e14 <HAL_RCC_GetHCLKFreq>
 8004d54:	4602      	mov	r2, r0
 8004d56:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	091b      	lsrs	r3, r3, #4
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	4904      	ldr	r1, [pc, #16]	; (8004d74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004d62:	5ccb      	ldrb	r3, [r1, r3]
 8004d64:	f003 031f 	and.w	r3, r3, #31
 8004d68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	58024400 	.word	0x58024400
 8004d74:	0800badc 	.word	0x0800badc

08004d78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b089      	sub	sp, #36	; 0x24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d80:	4ba1      	ldr	r3, [pc, #644]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d84:	f003 0303 	and.w	r3, r3, #3
 8004d88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004d8a:	4b9f      	ldr	r3, [pc, #636]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	0b1b      	lsrs	r3, r3, #12
 8004d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004d96:	4b9c      	ldr	r3, [pc, #624]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9a:	091b      	lsrs	r3, r3, #4
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004da2:	4b99      	ldr	r3, [pc, #612]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da6:	08db      	lsrs	r3, r3, #3
 8004da8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	fb02 f303 	mul.w	r3, r2, r3
 8004db2:	ee07 3a90 	vmov	s15, r3
 8004db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 8111 	beq.w	8004fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	f000 8083 	beq.w	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	f200 80a1 	bhi.w	8004f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d056      	beq.n	8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004de2:	e099      	b.n	8004f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004de4:	4b88      	ldr	r3, [pc, #544]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0320 	and.w	r3, r3, #32
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d02d      	beq.n	8004e4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004df0:	4b85      	ldr	r3, [pc, #532]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	08db      	lsrs	r3, r3, #3
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	4a84      	ldr	r2, [pc, #528]	; (800500c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004e00:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	ee07 3a90 	vmov	s15, r3
 8004e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e1a:	4b7b      	ldr	r3, [pc, #492]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e46:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004e4a:	e087      	b.n	8004f5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e5e:	4b6a      	ldr	r3, [pc, #424]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e72:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e8e:	e065      	b.n	8004f5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	ee07 3a90 	vmov	s15, r3
 8004e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ea2:	4b59      	ldr	r3, [pc, #356]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eaa:	ee07 3a90 	vmov	s15, r3
 8004eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eb6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ece:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ed2:	e043      	b.n	8004f5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	ee07 3a90 	vmov	s15, r3
 8004eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ede:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800501c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ee6:	4b48      	ldr	r3, [pc, #288]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004efa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f16:	e021      	b.n	8004f5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f2a:	4b37      	ldr	r3, [pc, #220]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004f5c:	4b2a      	ldr	r3, [pc, #168]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f60:	0a5b      	lsrs	r3, r3, #9
 8004f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f76:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f82:	ee17 2a90 	vmov	r2, s15
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004f8a:	4b1f      	ldr	r3, [pc, #124]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	0c1b      	lsrs	r3, r3, #16
 8004f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f94:	ee07 3a90 	vmov	s15, r3
 8004f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fb0:	ee17 2a90 	vmov	r2, s15
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004fb8:	4b13      	ldr	r3, [pc, #76]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbc:	0e1b      	lsrs	r3, r3, #24
 8004fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fde:	ee17 2a90 	vmov	r2, s15
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004fe6:	e008      	b.n	8004ffa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	609a      	str	r2, [r3, #8]
}
 8004ffa:	bf00      	nop
 8004ffc:	3724      	adds	r7, #36	; 0x24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	58024400 	.word	0x58024400
 800500c:	03d09000 	.word	0x03d09000
 8005010:	46000000 	.word	0x46000000
 8005014:	4c742400 	.word	0x4c742400
 8005018:	4a742400 	.word	0x4a742400
 800501c:	4af42400 	.word	0x4af42400

08005020 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005020:	b480      	push	{r7}
 8005022:	b089      	sub	sp, #36	; 0x24
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005028:	4ba1      	ldr	r3, [pc, #644]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502c:	f003 0303 	and.w	r3, r3, #3
 8005030:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005032:	4b9f      	ldr	r3, [pc, #636]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	0d1b      	lsrs	r3, r3, #20
 8005038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800503c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800503e:	4b9c      	ldr	r3, [pc, #624]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	0a1b      	lsrs	r3, r3, #8
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800504a:	4b99      	ldr	r3, [pc, #612]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800504c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504e:	08db      	lsrs	r3, r3, #3
 8005050:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	fb02 f303 	mul.w	r3, r2, r3
 800505a:	ee07 3a90 	vmov	s15, r3
 800505e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005062:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 8111 	beq.w	8005290 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2b02      	cmp	r3, #2
 8005072:	f000 8083 	beq.w	800517c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b02      	cmp	r3, #2
 800507a:	f200 80a1 	bhi.w	80051c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d056      	beq.n	8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800508a:	e099      	b.n	80051c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800508c:	4b88      	ldr	r3, [pc, #544]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b00      	cmp	r3, #0
 8005096:	d02d      	beq.n	80050f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005098:	4b85      	ldr	r3, [pc, #532]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	08db      	lsrs	r3, r3, #3
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	4a84      	ldr	r2, [pc, #528]	; (80052b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
 80050a8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	ee07 3a90 	vmov	s15, r3
 80050b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	ee07 3a90 	vmov	s15, r3
 80050ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050c2:	4b7b      	ldr	r3, [pc, #492]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80050f2:	e087      	b.n	8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005106:	4b6a      	ldr	r3, [pc, #424]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005116:	ed97 6a03 	vldr	s12, [r7, #12]
 800511a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800511e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800512a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800512e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005132:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005136:	e065      	b.n	8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005142:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800514a:	4b59      	ldr	r3, [pc, #356]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800515a:	ed97 6a03 	vldr	s12, [r7, #12]
 800515e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800516a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800516e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005176:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800517a:	e043      	b.n	8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005186:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800518a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800518e:	4b48      	ldr	r3, [pc, #288]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800519e:	ed97 6a03 	vldr	s12, [r7, #12]
 80051a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051be:	e021      	b.n	8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	ee07 3a90 	vmov	s15, r3
 80051c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80051ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051d2:	4b37      	ldr	r3, [pc, #220]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005202:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005204:	4b2a      	ldr	r3, [pc, #168]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	0a5b      	lsrs	r3, r3, #9
 800520a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005216:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800521a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800521e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800522a:	ee17 2a90 	vmov	r2, s15
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005232:	4b1f      	ldr	r3, [pc, #124]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	0c1b      	lsrs	r3, r3, #16
 8005238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800523c:	ee07 3a90 	vmov	s15, r3
 8005240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005244:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005248:	ee37 7a87 	vadd.f32	s14, s15, s14
 800524c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005258:	ee17 2a90 	vmov	r2, s15
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005260:	4b13      	ldr	r3, [pc, #76]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	0e1b      	lsrs	r3, r3, #24
 8005266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005272:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005276:	ee37 7a87 	vadd.f32	s14, s15, s14
 800527a:	edd7 6a07 	vldr	s13, [r7, #28]
 800527e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005286:	ee17 2a90 	vmov	r2, s15
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800528e:	e008      	b.n	80052a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	609a      	str	r2, [r3, #8]
}
 80052a2:	bf00      	nop
 80052a4:	3724      	adds	r7, #36	; 0x24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	58024400 	.word	0x58024400
 80052b4:	03d09000 	.word	0x03d09000
 80052b8:	46000000 	.word	0x46000000
 80052bc:	4c742400 	.word	0x4c742400
 80052c0:	4a742400 	.word	0x4a742400
 80052c4:	4af42400 	.word	0x4af42400

080052c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052d6:	4b53      	ldr	r3, [pc, #332]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d101      	bne.n	80052e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e099      	b.n	800541a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80052e6:	4b4f      	ldr	r3, [pc, #316]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a4e      	ldr	r2, [pc, #312]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80052ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052f2:	f7fc fbe7 	bl	8001ac4 <HAL_GetTick>
 80052f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052f8:	e008      	b.n	800530c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80052fa:	f7fc fbe3 	bl	8001ac4 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d901      	bls.n	800530c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e086      	b.n	800541a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800530c:	4b45      	ldr	r3, [pc, #276]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1f0      	bne.n	80052fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005318:	4b42      	ldr	r3, [pc, #264]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 800531a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	031b      	lsls	r3, r3, #12
 8005326:	493f      	ldr	r1, [pc, #252]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005328:	4313      	orrs	r3, r2
 800532a:	628b      	str	r3, [r1, #40]	; 0x28
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	3b01      	subs	r3, #1
 8005332:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	3b01      	subs	r3, #1
 800533c:	025b      	lsls	r3, r3, #9
 800533e:	b29b      	uxth	r3, r3
 8005340:	431a      	orrs	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	3b01      	subs	r3, #1
 8005348:	041b      	lsls	r3, r3, #16
 800534a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	3b01      	subs	r3, #1
 8005356:	061b      	lsls	r3, r3, #24
 8005358:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800535c:	4931      	ldr	r1, [pc, #196]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 800535e:	4313      	orrs	r3, r2
 8005360:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005362:	4b30      	ldr	r3, [pc, #192]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005366:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	492d      	ldr	r1, [pc, #180]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005370:	4313      	orrs	r3, r2
 8005372:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005374:	4b2b      	ldr	r3, [pc, #172]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	f023 0220 	bic.w	r2, r3, #32
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	4928      	ldr	r1, [pc, #160]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005382:	4313      	orrs	r3, r2
 8005384:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005386:	4b27      	ldr	r3, [pc, #156]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	4a26      	ldr	r2, [pc, #152]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 800538c:	f023 0310 	bic.w	r3, r3, #16
 8005390:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005392:	4b24      	ldr	r3, [pc, #144]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005394:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005396:	4b24      	ldr	r3, [pc, #144]	; (8005428 <RCCEx_PLL2_Config+0x160>)
 8005398:	4013      	ands	r3, r2
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	69d2      	ldr	r2, [r2, #28]
 800539e:	00d2      	lsls	r2, r2, #3
 80053a0:	4920      	ldr	r1, [pc, #128]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80053a6:	4b1f      	ldr	r3, [pc, #124]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053aa:	4a1e      	ldr	r2, [pc, #120]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053ac:	f043 0310 	orr.w	r3, r3, #16
 80053b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d106      	bne.n	80053c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80053b8:	4b1a      	ldr	r3, [pc, #104]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053bc:	4a19      	ldr	r2, [pc, #100]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053c4:	e00f      	b.n	80053e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d106      	bne.n	80053da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80053cc:	4b15      	ldr	r3, [pc, #84]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	4a14      	ldr	r2, [pc, #80]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053d8:	e005      	b.n	80053e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80053da:	4b12      	ldr	r3, [pc, #72]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053de:	4a11      	ldr	r2, [pc, #68]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80053e6:	4b0f      	ldr	r3, [pc, #60]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a0e      	ldr	r2, [pc, #56]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053f2:	f7fc fb67 	bl	8001ac4 <HAL_GetTick>
 80053f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053f8:	e008      	b.n	800540c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80053fa:	f7fc fb63 	bl	8001ac4 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d901      	bls.n	800540c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e006      	b.n	800541a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800540c:	4b05      	ldr	r3, [pc, #20]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0f0      	beq.n	80053fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005418:	7bfb      	ldrb	r3, [r7, #15]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	58024400 	.word	0x58024400
 8005428:	ffff0007 	.word	0xffff0007

0800542c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800543a:	4b53      	ldr	r3, [pc, #332]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 800543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	2b03      	cmp	r3, #3
 8005444:	d101      	bne.n	800544a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e099      	b.n	800557e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800544a:	4b4f      	ldr	r3, [pc, #316]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a4e      	ldr	r2, [pc, #312]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005456:	f7fc fb35 	bl	8001ac4 <HAL_GetTick>
 800545a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800545c:	e008      	b.n	8005470 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800545e:	f7fc fb31 	bl	8001ac4 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d901      	bls.n	8005470 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e086      	b.n	800557e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005470:	4b45      	ldr	r3, [pc, #276]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1f0      	bne.n	800545e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800547c:	4b42      	ldr	r3, [pc, #264]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	051b      	lsls	r3, r3, #20
 800548a:	493f      	ldr	r1, [pc, #252]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 800548c:	4313      	orrs	r3, r2
 800548e:	628b      	str	r3, [r1, #40]	; 0x28
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	3b01      	subs	r3, #1
 8005496:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	3b01      	subs	r3, #1
 80054a0:	025b      	lsls	r3, r3, #9
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	431a      	orrs	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	041b      	lsls	r3, r3, #16
 80054ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	3b01      	subs	r3, #1
 80054ba:	061b      	lsls	r3, r3, #24
 80054bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80054c0:	4931      	ldr	r1, [pc, #196]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80054c6:	4b30      	ldr	r3, [pc, #192]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	492d      	ldr	r1, [pc, #180]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80054d8:	4b2b      	ldr	r3, [pc, #172]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	4928      	ldr	r1, [pc, #160]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80054ea:	4b27      	ldr	r3, [pc, #156]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	4a26      	ldr	r2, [pc, #152]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80054f6:	4b24      	ldr	r3, [pc, #144]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054fa:	4b24      	ldr	r3, [pc, #144]	; (800558c <RCCEx_PLL3_Config+0x160>)
 80054fc:	4013      	ands	r3, r2
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	69d2      	ldr	r2, [r2, #28]
 8005502:	00d2      	lsls	r2, r2, #3
 8005504:	4920      	ldr	r1, [pc, #128]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005506:	4313      	orrs	r3, r2
 8005508:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800550a:	4b1f      	ldr	r3, [pc, #124]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 800550c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550e:	4a1e      	ldr	r2, [pc, #120]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005514:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d106      	bne.n	800552a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800551c:	4b1a      	ldr	r3, [pc, #104]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 800551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005520:	4a19      	ldr	r2, [pc, #100]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005522:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005526:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005528:	e00f      	b.n	800554a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d106      	bne.n	800553e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005530:	4b15      	ldr	r3, [pc, #84]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	4a14      	ldr	r2, [pc, #80]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005536:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800553a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800553c:	e005      	b.n	800554a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800553e:	4b12      	ldr	r3, [pc, #72]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005542:	4a11      	ldr	r2, [pc, #68]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005544:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005548:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800554a:	4b0f      	ldr	r3, [pc, #60]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a0e      	ldr	r2, [pc, #56]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005556:	f7fc fab5 	bl	8001ac4 <HAL_GetTick>
 800555a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800555c:	e008      	b.n	8005570 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800555e:	f7fc fab1 	bl	8001ac4 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e006      	b.n	800557e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0f0      	beq.n	800555e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800557c:	7bfb      	ldrb	r3, [r7, #15]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	58024400 	.word	0x58024400
 800558c:	ffff0007 	.word	0xffff0007

08005590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e049      	b.n	8005636 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fb ffc4 	bl	8001544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3304      	adds	r3, #4
 80055cc:	4619      	mov	r1, r3
 80055ce:	4610      	mov	r0, r2
 80055d0:	f000 f9ee 	bl	80059b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
	...

08005640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b01      	cmp	r3, #1
 8005652:	d001      	beq.n	8005658 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e04f      	b.n	80056f8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0201 	orr.w	r2, r2, #1
 800566e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a23      	ldr	r2, [pc, #140]	; (8005704 <HAL_TIM_Base_Start_IT+0xc4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d01d      	beq.n	80056b6 <HAL_TIM_Base_Start_IT+0x76>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005682:	d018      	beq.n	80056b6 <HAL_TIM_Base_Start_IT+0x76>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a1f      	ldr	r2, [pc, #124]	; (8005708 <HAL_TIM_Base_Start_IT+0xc8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d013      	beq.n	80056b6 <HAL_TIM_Base_Start_IT+0x76>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a1e      	ldr	r2, [pc, #120]	; (800570c <HAL_TIM_Base_Start_IT+0xcc>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00e      	beq.n	80056b6 <HAL_TIM_Base_Start_IT+0x76>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a1c      	ldr	r2, [pc, #112]	; (8005710 <HAL_TIM_Base_Start_IT+0xd0>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d009      	beq.n	80056b6 <HAL_TIM_Base_Start_IT+0x76>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a1b      	ldr	r2, [pc, #108]	; (8005714 <HAL_TIM_Base_Start_IT+0xd4>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d004      	beq.n	80056b6 <HAL_TIM_Base_Start_IT+0x76>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a19      	ldr	r2, [pc, #100]	; (8005718 <HAL_TIM_Base_Start_IT+0xd8>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d115      	bne.n	80056e2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	4b17      	ldr	r3, [pc, #92]	; (800571c <HAL_TIM_Base_Start_IT+0xdc>)
 80056be:	4013      	ands	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2b06      	cmp	r3, #6
 80056c6:	d015      	beq.n	80056f4 <HAL_TIM_Base_Start_IT+0xb4>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ce:	d011      	beq.n	80056f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0201 	orr.w	r2, r2, #1
 80056de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e0:	e008      	b.n	80056f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f042 0201 	orr.w	r2, r2, #1
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	e000      	b.n	80056f6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	40010000 	.word	0x40010000
 8005708:	40000400 	.word	0x40000400
 800570c:	40000800 	.word	0x40000800
 8005710:	40000c00 	.word	0x40000c00
 8005714:	40010400 	.word	0x40010400
 8005718:	40001800 	.word	0x40001800
 800571c:	00010007 	.word	0x00010007

08005720 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b02      	cmp	r3, #2
 8005734:	d122      	bne.n	800577c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b02      	cmp	r3, #2
 8005742:	d11b      	bne.n	800577c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f06f 0202 	mvn.w	r2, #2
 800574c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f905 	bl	8005972 <HAL_TIM_IC_CaptureCallback>
 8005768:	e005      	b.n	8005776 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f8f7 	bl	800595e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f908 	bl	8005986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	2b04      	cmp	r3, #4
 8005788:	d122      	bne.n	80057d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b04      	cmp	r3, #4
 8005796:	d11b      	bne.n	80057d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0204 	mvn.w	r2, #4
 80057a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2202      	movs	r2, #2
 80057a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f8db 	bl	8005972 <HAL_TIM_IC_CaptureCallback>
 80057bc:	e005      	b.n	80057ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f8cd 	bl	800595e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f8de 	bl	8005986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d122      	bne.n	8005824 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d11b      	bne.n	8005824 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f06f 0208 	mvn.w	r2, #8
 80057f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2204      	movs	r2, #4
 80057fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	f003 0303 	and.w	r3, r3, #3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f8b1 	bl	8005972 <HAL_TIM_IC_CaptureCallback>
 8005810:	e005      	b.n	800581e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f8a3 	bl	800595e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f8b4 	bl	8005986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f003 0310 	and.w	r3, r3, #16
 800582e:	2b10      	cmp	r3, #16
 8005830:	d122      	bne.n	8005878 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f003 0310 	and.w	r3, r3, #16
 800583c:	2b10      	cmp	r3, #16
 800583e:	d11b      	bne.n	8005878 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f06f 0210 	mvn.w	r2, #16
 8005848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2208      	movs	r2, #8
 800584e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f887 	bl	8005972 <HAL_TIM_IC_CaptureCallback>
 8005864:	e005      	b.n	8005872 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f879 	bl	800595e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f88a 	bl	8005986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b01      	cmp	r3, #1
 8005884:	d10e      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b01      	cmp	r3, #1
 8005892:	d107      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f06f 0201 	mvn.w	r2, #1
 800589c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fb fdb8 	bl	8001414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ae:	2b80      	cmp	r3, #128	; 0x80
 80058b0:	d10e      	bne.n	80058d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058bc:	2b80      	cmp	r3, #128	; 0x80
 80058be:	d107      	bne.n	80058d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f99c 	bl	8005c08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058de:	d10e      	bne.n	80058fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ea:	2b80      	cmp	r3, #128	; 0x80
 80058ec:	d107      	bne.n	80058fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80058f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f98f 	bl	8005c1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005908:	2b40      	cmp	r3, #64	; 0x40
 800590a:	d10e      	bne.n	800592a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005916:	2b40      	cmp	r3, #64	; 0x40
 8005918:	d107      	bne.n	800592a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f838 	bl	800599a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	f003 0320 	and.w	r3, r3, #32
 8005934:	2b20      	cmp	r3, #32
 8005936:	d10e      	bne.n	8005956 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b20      	cmp	r3, #32
 8005944:	d107      	bne.n	8005956 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f06f 0220 	mvn.w	r2, #32
 800594e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f94f 	bl	8005bf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005956:	bf00      	nop
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005972:	b480      	push	{r7}
 8005974:	b083      	sub	sp, #12
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
	...

080059b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a40      	ldr	r2, [pc, #256]	; (8005ac4 <TIM_Base_SetConfig+0x114>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d013      	beq.n	80059f0 <TIM_Base_SetConfig+0x40>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ce:	d00f      	beq.n	80059f0 <TIM_Base_SetConfig+0x40>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a3d      	ldr	r2, [pc, #244]	; (8005ac8 <TIM_Base_SetConfig+0x118>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d00b      	beq.n	80059f0 <TIM_Base_SetConfig+0x40>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a3c      	ldr	r2, [pc, #240]	; (8005acc <TIM_Base_SetConfig+0x11c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d007      	beq.n	80059f0 <TIM_Base_SetConfig+0x40>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a3b      	ldr	r2, [pc, #236]	; (8005ad0 <TIM_Base_SetConfig+0x120>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d003      	beq.n	80059f0 <TIM_Base_SetConfig+0x40>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a3a      	ldr	r2, [pc, #232]	; (8005ad4 <TIM_Base_SetConfig+0x124>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d108      	bne.n	8005a02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a2f      	ldr	r2, [pc, #188]	; (8005ac4 <TIM_Base_SetConfig+0x114>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d01f      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a10:	d01b      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a2c      	ldr	r2, [pc, #176]	; (8005ac8 <TIM_Base_SetConfig+0x118>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d017      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a2b      	ldr	r2, [pc, #172]	; (8005acc <TIM_Base_SetConfig+0x11c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d013      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a2a      	ldr	r2, [pc, #168]	; (8005ad0 <TIM_Base_SetConfig+0x120>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00f      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a29      	ldr	r2, [pc, #164]	; (8005ad4 <TIM_Base_SetConfig+0x124>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00b      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a28      	ldr	r2, [pc, #160]	; (8005ad8 <TIM_Base_SetConfig+0x128>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d007      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a27      	ldr	r2, [pc, #156]	; (8005adc <TIM_Base_SetConfig+0x12c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d003      	beq.n	8005a4a <TIM_Base_SetConfig+0x9a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a26      	ldr	r2, [pc, #152]	; (8005ae0 <TIM_Base_SetConfig+0x130>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d108      	bne.n	8005a5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a10      	ldr	r2, [pc, #64]	; (8005ac4 <TIM_Base_SetConfig+0x114>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00f      	beq.n	8005aa8 <TIM_Base_SetConfig+0xf8>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a12      	ldr	r2, [pc, #72]	; (8005ad4 <TIM_Base_SetConfig+0x124>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d00b      	beq.n	8005aa8 <TIM_Base_SetConfig+0xf8>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a11      	ldr	r2, [pc, #68]	; (8005ad8 <TIM_Base_SetConfig+0x128>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d007      	beq.n	8005aa8 <TIM_Base_SetConfig+0xf8>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a10      	ldr	r2, [pc, #64]	; (8005adc <TIM_Base_SetConfig+0x12c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d003      	beq.n	8005aa8 <TIM_Base_SetConfig+0xf8>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a0f      	ldr	r2, [pc, #60]	; (8005ae0 <TIM_Base_SetConfig+0x130>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d103      	bne.n	8005ab0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	615a      	str	r2, [r3, #20]
}
 8005ab6:	bf00      	nop
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	40010000 	.word	0x40010000
 8005ac8:	40000400 	.word	0x40000400
 8005acc:	40000800 	.word	0x40000800
 8005ad0:	40000c00 	.word	0x40000c00
 8005ad4:	40010400 	.word	0x40010400
 8005ad8:	40014000 	.word	0x40014000
 8005adc:	40014400 	.word	0x40014400
 8005ae0:	40014800 	.word	0x40014800

08005ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d101      	bne.n	8005afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005af8:	2302      	movs	r3, #2
 8005afa:	e068      	b.n	8005bce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a2e      	ldr	r2, [pc, #184]	; (8005bdc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d004      	beq.n	8005b30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a2d      	ldr	r2, [pc, #180]	; (8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d108      	bne.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a1e      	ldr	r2, [pc, #120]	; (8005bdc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d01d      	beq.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b6e:	d018      	beq.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a1b      	ldr	r2, [pc, #108]	; (8005be4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d013      	beq.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a1a      	ldr	r2, [pc, #104]	; (8005be8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d00e      	beq.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a18      	ldr	r2, [pc, #96]	; (8005bec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d009      	beq.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a13      	ldr	r2, [pc, #76]	; (8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d004      	beq.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a14      	ldr	r2, [pc, #80]	; (8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d10c      	bne.n	8005bbc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ba8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	40010000 	.word	0x40010000
 8005be0:	40010400 	.word	0x40010400
 8005be4:	40000400 	.word	0x40000400
 8005be8:	40000800 	.word	0x40000800
 8005bec:	40000c00 	.word	0x40000c00
 8005bf0:	40001800 	.word	0x40001800

08005bf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e042      	b.n	8005cc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d106      	bne.n	8005c5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7fb fc9d 	bl	8001594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2224      	movs	r2, #36	; 0x24
 8005c5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0201 	bic.w	r2, r2, #1
 8005c70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f8c2 	bl	8005dfc <UART_SetConfig>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e022      	b.n	8005cc8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fe16 	bl	80068bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689a      	ldr	r2, [r3, #8]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f042 0201 	orr.w	r2, r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fe9d 	bl	8006a00 <UART_CheckIdleState>
 8005cc6:	4603      	mov	r3, r0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08a      	sub	sp, #40	; 0x28
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	603b      	str	r3, [r7, #0]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ce6:	2b20      	cmp	r3, #32
 8005ce8:	f040 8083 	bne.w	8005df2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <HAL_UART_Transmit+0x28>
 8005cf2:	88fb      	ldrh	r3, [r7, #6]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e07b      	b.n	8005df4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d101      	bne.n	8005d0a <HAL_UART_Transmit+0x3a>
 8005d06:	2302      	movs	r3, #2
 8005d08:	e074      	b.n	8005df4 <HAL_UART_Transmit+0x124>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2221      	movs	r2, #33	; 0x21
 8005d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d22:	f7fb fecf 	bl	8001ac4 <HAL_GetTick>
 8005d26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	88fa      	ldrh	r2, [r7, #6]
 8005d2c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	88fa      	ldrh	r2, [r7, #6]
 8005d34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d40:	d108      	bne.n	8005d54 <HAL_UART_Transmit+0x84>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d104      	bne.n	8005d54 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	61bb      	str	r3, [r7, #24]
 8005d52:	e003      	b.n	8005d5c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005d64:	e02c      	b.n	8005dc0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2180      	movs	r1, #128	; 0x80
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 fe90 	bl	8006a96 <UART_WaitOnFlagUntilTimeout>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e039      	b.n	8005df4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10b      	bne.n	8005d9e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d94:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	3302      	adds	r3, #2
 8005d9a:	61bb      	str	r3, [r7, #24]
 8005d9c:	e007      	b.n	8005dae <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	781a      	ldrb	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	3301      	adds	r3, #1
 8005dac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1cc      	bne.n	8005d66 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	2140      	movs	r1, #64	; 0x40
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 fe5d 	bl	8006a96 <UART_WaitOnFlagUntilTimeout>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e006      	b.n	8005df4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	e000      	b.n	8005df4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005df2:	2302      	movs	r3, #2
  }
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3720      	adds	r7, #32
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dfc:	b5b0      	push	{r4, r5, r7, lr}
 8005dfe:	b08e      	sub	sp, #56	; 0x38
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e04:	2300      	movs	r3, #0
 8005e06:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	431a      	orrs	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	4bbf      	ldr	r3, [pc, #764]	; (8006128 <UART_SetConfig+0x32c>)
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6812      	ldr	r2, [r2, #0]
 8005e30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005e32:	430b      	orrs	r3, r1
 8005e34:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68da      	ldr	r2, [r3, #12]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4ab5      	ldr	r2, [pc, #724]	; (800612c <UART_SetConfig+0x330>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d004      	beq.n	8005e66 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e62:	4313      	orrs	r3, r2
 8005e64:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	4bb0      	ldr	r3, [pc, #704]	; (8006130 <UART_SetConfig+0x334>)
 8005e6e:	4013      	ands	r3, r2
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005e76:	430b      	orrs	r3, r1
 8005e78:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e80:	f023 010f 	bic.w	r1, r3, #15
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4aa7      	ldr	r2, [pc, #668]	; (8006134 <UART_SetConfig+0x338>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d176      	bne.n	8005f88 <UART_SetConfig+0x18c>
 8005e9a:	4ba7      	ldr	r3, [pc, #668]	; (8006138 <UART_SetConfig+0x33c>)
 8005e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ea2:	2b28      	cmp	r3, #40	; 0x28
 8005ea4:	d86c      	bhi.n	8005f80 <UART_SetConfig+0x184>
 8005ea6:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <UART_SetConfig+0xb0>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005f51 	.word	0x08005f51
 8005eb0:	08005f81 	.word	0x08005f81
 8005eb4:	08005f81 	.word	0x08005f81
 8005eb8:	08005f81 	.word	0x08005f81
 8005ebc:	08005f81 	.word	0x08005f81
 8005ec0:	08005f81 	.word	0x08005f81
 8005ec4:	08005f81 	.word	0x08005f81
 8005ec8:	08005f81 	.word	0x08005f81
 8005ecc:	08005f59 	.word	0x08005f59
 8005ed0:	08005f81 	.word	0x08005f81
 8005ed4:	08005f81 	.word	0x08005f81
 8005ed8:	08005f81 	.word	0x08005f81
 8005edc:	08005f81 	.word	0x08005f81
 8005ee0:	08005f81 	.word	0x08005f81
 8005ee4:	08005f81 	.word	0x08005f81
 8005ee8:	08005f81 	.word	0x08005f81
 8005eec:	08005f61 	.word	0x08005f61
 8005ef0:	08005f81 	.word	0x08005f81
 8005ef4:	08005f81 	.word	0x08005f81
 8005ef8:	08005f81 	.word	0x08005f81
 8005efc:	08005f81 	.word	0x08005f81
 8005f00:	08005f81 	.word	0x08005f81
 8005f04:	08005f81 	.word	0x08005f81
 8005f08:	08005f81 	.word	0x08005f81
 8005f0c:	08005f69 	.word	0x08005f69
 8005f10:	08005f81 	.word	0x08005f81
 8005f14:	08005f81 	.word	0x08005f81
 8005f18:	08005f81 	.word	0x08005f81
 8005f1c:	08005f81 	.word	0x08005f81
 8005f20:	08005f81 	.word	0x08005f81
 8005f24:	08005f81 	.word	0x08005f81
 8005f28:	08005f81 	.word	0x08005f81
 8005f2c:	08005f71 	.word	0x08005f71
 8005f30:	08005f81 	.word	0x08005f81
 8005f34:	08005f81 	.word	0x08005f81
 8005f38:	08005f81 	.word	0x08005f81
 8005f3c:	08005f81 	.word	0x08005f81
 8005f40:	08005f81 	.word	0x08005f81
 8005f44:	08005f81 	.word	0x08005f81
 8005f48:	08005f81 	.word	0x08005f81
 8005f4c:	08005f79 	.word	0x08005f79
 8005f50:	2301      	movs	r3, #1
 8005f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f56:	e222      	b.n	800639e <UART_SetConfig+0x5a2>
 8005f58:	2304      	movs	r3, #4
 8005f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f5e:	e21e      	b.n	800639e <UART_SetConfig+0x5a2>
 8005f60:	2308      	movs	r3, #8
 8005f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f66:	e21a      	b.n	800639e <UART_SetConfig+0x5a2>
 8005f68:	2310      	movs	r3, #16
 8005f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f6e:	e216      	b.n	800639e <UART_SetConfig+0x5a2>
 8005f70:	2320      	movs	r3, #32
 8005f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f76:	e212      	b.n	800639e <UART_SetConfig+0x5a2>
 8005f78:	2340      	movs	r3, #64	; 0x40
 8005f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f7e:	e20e      	b.n	800639e <UART_SetConfig+0x5a2>
 8005f80:	2380      	movs	r3, #128	; 0x80
 8005f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f86:	e20a      	b.n	800639e <UART_SetConfig+0x5a2>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a6b      	ldr	r2, [pc, #428]	; (800613c <UART_SetConfig+0x340>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d130      	bne.n	8005ff4 <UART_SetConfig+0x1f8>
 8005f92:	4b69      	ldr	r3, [pc, #420]	; (8006138 <UART_SetConfig+0x33c>)
 8005f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f96:	f003 0307 	and.w	r3, r3, #7
 8005f9a:	2b05      	cmp	r3, #5
 8005f9c:	d826      	bhi.n	8005fec <UART_SetConfig+0x1f0>
 8005f9e:	a201      	add	r2, pc, #4	; (adr r2, 8005fa4 <UART_SetConfig+0x1a8>)
 8005fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa4:	08005fbd 	.word	0x08005fbd
 8005fa8:	08005fc5 	.word	0x08005fc5
 8005fac:	08005fcd 	.word	0x08005fcd
 8005fb0:	08005fd5 	.word	0x08005fd5
 8005fb4:	08005fdd 	.word	0x08005fdd
 8005fb8:	08005fe5 	.word	0x08005fe5
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fc2:	e1ec      	b.n	800639e <UART_SetConfig+0x5a2>
 8005fc4:	2304      	movs	r3, #4
 8005fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fca:	e1e8      	b.n	800639e <UART_SetConfig+0x5a2>
 8005fcc:	2308      	movs	r3, #8
 8005fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fd2:	e1e4      	b.n	800639e <UART_SetConfig+0x5a2>
 8005fd4:	2310      	movs	r3, #16
 8005fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fda:	e1e0      	b.n	800639e <UART_SetConfig+0x5a2>
 8005fdc:	2320      	movs	r3, #32
 8005fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fe2:	e1dc      	b.n	800639e <UART_SetConfig+0x5a2>
 8005fe4:	2340      	movs	r3, #64	; 0x40
 8005fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fea:	e1d8      	b.n	800639e <UART_SetConfig+0x5a2>
 8005fec:	2380      	movs	r3, #128	; 0x80
 8005fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ff2:	e1d4      	b.n	800639e <UART_SetConfig+0x5a2>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a51      	ldr	r2, [pc, #324]	; (8006140 <UART_SetConfig+0x344>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d130      	bne.n	8006060 <UART_SetConfig+0x264>
 8005ffe:	4b4e      	ldr	r3, [pc, #312]	; (8006138 <UART_SetConfig+0x33c>)
 8006000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006002:	f003 0307 	and.w	r3, r3, #7
 8006006:	2b05      	cmp	r3, #5
 8006008:	d826      	bhi.n	8006058 <UART_SetConfig+0x25c>
 800600a:	a201      	add	r2, pc, #4	; (adr r2, 8006010 <UART_SetConfig+0x214>)
 800600c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006010:	08006029 	.word	0x08006029
 8006014:	08006031 	.word	0x08006031
 8006018:	08006039 	.word	0x08006039
 800601c:	08006041 	.word	0x08006041
 8006020:	08006049 	.word	0x08006049
 8006024:	08006051 	.word	0x08006051
 8006028:	2300      	movs	r3, #0
 800602a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800602e:	e1b6      	b.n	800639e <UART_SetConfig+0x5a2>
 8006030:	2304      	movs	r3, #4
 8006032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006036:	e1b2      	b.n	800639e <UART_SetConfig+0x5a2>
 8006038:	2308      	movs	r3, #8
 800603a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800603e:	e1ae      	b.n	800639e <UART_SetConfig+0x5a2>
 8006040:	2310      	movs	r3, #16
 8006042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006046:	e1aa      	b.n	800639e <UART_SetConfig+0x5a2>
 8006048:	2320      	movs	r3, #32
 800604a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800604e:	e1a6      	b.n	800639e <UART_SetConfig+0x5a2>
 8006050:	2340      	movs	r3, #64	; 0x40
 8006052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006056:	e1a2      	b.n	800639e <UART_SetConfig+0x5a2>
 8006058:	2380      	movs	r3, #128	; 0x80
 800605a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800605e:	e19e      	b.n	800639e <UART_SetConfig+0x5a2>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a37      	ldr	r2, [pc, #220]	; (8006144 <UART_SetConfig+0x348>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d130      	bne.n	80060cc <UART_SetConfig+0x2d0>
 800606a:	4b33      	ldr	r3, [pc, #204]	; (8006138 <UART_SetConfig+0x33c>)
 800606c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	2b05      	cmp	r3, #5
 8006074:	d826      	bhi.n	80060c4 <UART_SetConfig+0x2c8>
 8006076:	a201      	add	r2, pc, #4	; (adr r2, 800607c <UART_SetConfig+0x280>)
 8006078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607c:	08006095 	.word	0x08006095
 8006080:	0800609d 	.word	0x0800609d
 8006084:	080060a5 	.word	0x080060a5
 8006088:	080060ad 	.word	0x080060ad
 800608c:	080060b5 	.word	0x080060b5
 8006090:	080060bd 	.word	0x080060bd
 8006094:	2300      	movs	r3, #0
 8006096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800609a:	e180      	b.n	800639e <UART_SetConfig+0x5a2>
 800609c:	2304      	movs	r3, #4
 800609e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060a2:	e17c      	b.n	800639e <UART_SetConfig+0x5a2>
 80060a4:	2308      	movs	r3, #8
 80060a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060aa:	e178      	b.n	800639e <UART_SetConfig+0x5a2>
 80060ac:	2310      	movs	r3, #16
 80060ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060b2:	e174      	b.n	800639e <UART_SetConfig+0x5a2>
 80060b4:	2320      	movs	r3, #32
 80060b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ba:	e170      	b.n	800639e <UART_SetConfig+0x5a2>
 80060bc:	2340      	movs	r3, #64	; 0x40
 80060be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060c2:	e16c      	b.n	800639e <UART_SetConfig+0x5a2>
 80060c4:	2380      	movs	r3, #128	; 0x80
 80060c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ca:	e168      	b.n	800639e <UART_SetConfig+0x5a2>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a1d      	ldr	r2, [pc, #116]	; (8006148 <UART_SetConfig+0x34c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d142      	bne.n	800615c <UART_SetConfig+0x360>
 80060d6:	4b18      	ldr	r3, [pc, #96]	; (8006138 <UART_SetConfig+0x33c>)
 80060d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	2b05      	cmp	r3, #5
 80060e0:	d838      	bhi.n	8006154 <UART_SetConfig+0x358>
 80060e2:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <UART_SetConfig+0x2ec>)
 80060e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e8:	08006101 	.word	0x08006101
 80060ec:	08006109 	.word	0x08006109
 80060f0:	08006111 	.word	0x08006111
 80060f4:	08006119 	.word	0x08006119
 80060f8:	08006121 	.word	0x08006121
 80060fc:	0800614d 	.word	0x0800614d
 8006100:	2300      	movs	r3, #0
 8006102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006106:	e14a      	b.n	800639e <UART_SetConfig+0x5a2>
 8006108:	2304      	movs	r3, #4
 800610a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800610e:	e146      	b.n	800639e <UART_SetConfig+0x5a2>
 8006110:	2308      	movs	r3, #8
 8006112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006116:	e142      	b.n	800639e <UART_SetConfig+0x5a2>
 8006118:	2310      	movs	r3, #16
 800611a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800611e:	e13e      	b.n	800639e <UART_SetConfig+0x5a2>
 8006120:	2320      	movs	r3, #32
 8006122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006126:	e13a      	b.n	800639e <UART_SetConfig+0x5a2>
 8006128:	cfff69f3 	.word	0xcfff69f3
 800612c:	58000c00 	.word	0x58000c00
 8006130:	11fff4ff 	.word	0x11fff4ff
 8006134:	40011000 	.word	0x40011000
 8006138:	58024400 	.word	0x58024400
 800613c:	40004400 	.word	0x40004400
 8006140:	40004800 	.word	0x40004800
 8006144:	40004c00 	.word	0x40004c00
 8006148:	40005000 	.word	0x40005000
 800614c:	2340      	movs	r3, #64	; 0x40
 800614e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006152:	e124      	b.n	800639e <UART_SetConfig+0x5a2>
 8006154:	2380      	movs	r3, #128	; 0x80
 8006156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800615a:	e120      	b.n	800639e <UART_SetConfig+0x5a2>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4acc      	ldr	r2, [pc, #816]	; (8006494 <UART_SetConfig+0x698>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d176      	bne.n	8006254 <UART_SetConfig+0x458>
 8006166:	4bcc      	ldr	r3, [pc, #816]	; (8006498 <UART_SetConfig+0x69c>)
 8006168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800616e:	2b28      	cmp	r3, #40	; 0x28
 8006170:	d86c      	bhi.n	800624c <UART_SetConfig+0x450>
 8006172:	a201      	add	r2, pc, #4	; (adr r2, 8006178 <UART_SetConfig+0x37c>)
 8006174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006178:	0800621d 	.word	0x0800621d
 800617c:	0800624d 	.word	0x0800624d
 8006180:	0800624d 	.word	0x0800624d
 8006184:	0800624d 	.word	0x0800624d
 8006188:	0800624d 	.word	0x0800624d
 800618c:	0800624d 	.word	0x0800624d
 8006190:	0800624d 	.word	0x0800624d
 8006194:	0800624d 	.word	0x0800624d
 8006198:	08006225 	.word	0x08006225
 800619c:	0800624d 	.word	0x0800624d
 80061a0:	0800624d 	.word	0x0800624d
 80061a4:	0800624d 	.word	0x0800624d
 80061a8:	0800624d 	.word	0x0800624d
 80061ac:	0800624d 	.word	0x0800624d
 80061b0:	0800624d 	.word	0x0800624d
 80061b4:	0800624d 	.word	0x0800624d
 80061b8:	0800622d 	.word	0x0800622d
 80061bc:	0800624d 	.word	0x0800624d
 80061c0:	0800624d 	.word	0x0800624d
 80061c4:	0800624d 	.word	0x0800624d
 80061c8:	0800624d 	.word	0x0800624d
 80061cc:	0800624d 	.word	0x0800624d
 80061d0:	0800624d 	.word	0x0800624d
 80061d4:	0800624d 	.word	0x0800624d
 80061d8:	08006235 	.word	0x08006235
 80061dc:	0800624d 	.word	0x0800624d
 80061e0:	0800624d 	.word	0x0800624d
 80061e4:	0800624d 	.word	0x0800624d
 80061e8:	0800624d 	.word	0x0800624d
 80061ec:	0800624d 	.word	0x0800624d
 80061f0:	0800624d 	.word	0x0800624d
 80061f4:	0800624d 	.word	0x0800624d
 80061f8:	0800623d 	.word	0x0800623d
 80061fc:	0800624d 	.word	0x0800624d
 8006200:	0800624d 	.word	0x0800624d
 8006204:	0800624d 	.word	0x0800624d
 8006208:	0800624d 	.word	0x0800624d
 800620c:	0800624d 	.word	0x0800624d
 8006210:	0800624d 	.word	0x0800624d
 8006214:	0800624d 	.word	0x0800624d
 8006218:	08006245 	.word	0x08006245
 800621c:	2301      	movs	r3, #1
 800621e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006222:	e0bc      	b.n	800639e <UART_SetConfig+0x5a2>
 8006224:	2304      	movs	r3, #4
 8006226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800622a:	e0b8      	b.n	800639e <UART_SetConfig+0x5a2>
 800622c:	2308      	movs	r3, #8
 800622e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006232:	e0b4      	b.n	800639e <UART_SetConfig+0x5a2>
 8006234:	2310      	movs	r3, #16
 8006236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800623a:	e0b0      	b.n	800639e <UART_SetConfig+0x5a2>
 800623c:	2320      	movs	r3, #32
 800623e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006242:	e0ac      	b.n	800639e <UART_SetConfig+0x5a2>
 8006244:	2340      	movs	r3, #64	; 0x40
 8006246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800624a:	e0a8      	b.n	800639e <UART_SetConfig+0x5a2>
 800624c:	2380      	movs	r3, #128	; 0x80
 800624e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006252:	e0a4      	b.n	800639e <UART_SetConfig+0x5a2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a90      	ldr	r2, [pc, #576]	; (800649c <UART_SetConfig+0x6a0>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d130      	bne.n	80062c0 <UART_SetConfig+0x4c4>
 800625e:	4b8e      	ldr	r3, [pc, #568]	; (8006498 <UART_SetConfig+0x69c>)
 8006260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006262:	f003 0307 	and.w	r3, r3, #7
 8006266:	2b05      	cmp	r3, #5
 8006268:	d826      	bhi.n	80062b8 <UART_SetConfig+0x4bc>
 800626a:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <UART_SetConfig+0x474>)
 800626c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006270:	08006289 	.word	0x08006289
 8006274:	08006291 	.word	0x08006291
 8006278:	08006299 	.word	0x08006299
 800627c:	080062a1 	.word	0x080062a1
 8006280:	080062a9 	.word	0x080062a9
 8006284:	080062b1 	.word	0x080062b1
 8006288:	2300      	movs	r3, #0
 800628a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800628e:	e086      	b.n	800639e <UART_SetConfig+0x5a2>
 8006290:	2304      	movs	r3, #4
 8006292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006296:	e082      	b.n	800639e <UART_SetConfig+0x5a2>
 8006298:	2308      	movs	r3, #8
 800629a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800629e:	e07e      	b.n	800639e <UART_SetConfig+0x5a2>
 80062a0:	2310      	movs	r3, #16
 80062a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062a6:	e07a      	b.n	800639e <UART_SetConfig+0x5a2>
 80062a8:	2320      	movs	r3, #32
 80062aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ae:	e076      	b.n	800639e <UART_SetConfig+0x5a2>
 80062b0:	2340      	movs	r3, #64	; 0x40
 80062b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062b6:	e072      	b.n	800639e <UART_SetConfig+0x5a2>
 80062b8:	2380      	movs	r3, #128	; 0x80
 80062ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062be:	e06e      	b.n	800639e <UART_SetConfig+0x5a2>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a76      	ldr	r2, [pc, #472]	; (80064a0 <UART_SetConfig+0x6a4>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d130      	bne.n	800632c <UART_SetConfig+0x530>
 80062ca:	4b73      	ldr	r3, [pc, #460]	; (8006498 <UART_SetConfig+0x69c>)
 80062cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	2b05      	cmp	r3, #5
 80062d4:	d826      	bhi.n	8006324 <UART_SetConfig+0x528>
 80062d6:	a201      	add	r2, pc, #4	; (adr r2, 80062dc <UART_SetConfig+0x4e0>)
 80062d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062dc:	080062f5 	.word	0x080062f5
 80062e0:	080062fd 	.word	0x080062fd
 80062e4:	08006305 	.word	0x08006305
 80062e8:	0800630d 	.word	0x0800630d
 80062ec:	08006315 	.word	0x08006315
 80062f0:	0800631d 	.word	0x0800631d
 80062f4:	2300      	movs	r3, #0
 80062f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062fa:	e050      	b.n	800639e <UART_SetConfig+0x5a2>
 80062fc:	2304      	movs	r3, #4
 80062fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006302:	e04c      	b.n	800639e <UART_SetConfig+0x5a2>
 8006304:	2308      	movs	r3, #8
 8006306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800630a:	e048      	b.n	800639e <UART_SetConfig+0x5a2>
 800630c:	2310      	movs	r3, #16
 800630e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006312:	e044      	b.n	800639e <UART_SetConfig+0x5a2>
 8006314:	2320      	movs	r3, #32
 8006316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800631a:	e040      	b.n	800639e <UART_SetConfig+0x5a2>
 800631c:	2340      	movs	r3, #64	; 0x40
 800631e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006322:	e03c      	b.n	800639e <UART_SetConfig+0x5a2>
 8006324:	2380      	movs	r3, #128	; 0x80
 8006326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800632a:	e038      	b.n	800639e <UART_SetConfig+0x5a2>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a5c      	ldr	r2, [pc, #368]	; (80064a4 <UART_SetConfig+0x6a8>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d130      	bne.n	8006398 <UART_SetConfig+0x59c>
 8006336:	4b58      	ldr	r3, [pc, #352]	; (8006498 <UART_SetConfig+0x69c>)
 8006338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633a:	f003 0307 	and.w	r3, r3, #7
 800633e:	2b05      	cmp	r3, #5
 8006340:	d826      	bhi.n	8006390 <UART_SetConfig+0x594>
 8006342:	a201      	add	r2, pc, #4	; (adr r2, 8006348 <UART_SetConfig+0x54c>)
 8006344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006348:	08006361 	.word	0x08006361
 800634c:	08006369 	.word	0x08006369
 8006350:	08006371 	.word	0x08006371
 8006354:	08006379 	.word	0x08006379
 8006358:	08006381 	.word	0x08006381
 800635c:	08006389 	.word	0x08006389
 8006360:	2302      	movs	r3, #2
 8006362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006366:	e01a      	b.n	800639e <UART_SetConfig+0x5a2>
 8006368:	2304      	movs	r3, #4
 800636a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800636e:	e016      	b.n	800639e <UART_SetConfig+0x5a2>
 8006370:	2308      	movs	r3, #8
 8006372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006376:	e012      	b.n	800639e <UART_SetConfig+0x5a2>
 8006378:	2310      	movs	r3, #16
 800637a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800637e:	e00e      	b.n	800639e <UART_SetConfig+0x5a2>
 8006380:	2320      	movs	r3, #32
 8006382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006386:	e00a      	b.n	800639e <UART_SetConfig+0x5a2>
 8006388:	2340      	movs	r3, #64	; 0x40
 800638a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800638e:	e006      	b.n	800639e <UART_SetConfig+0x5a2>
 8006390:	2380      	movs	r3, #128	; 0x80
 8006392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006396:	e002      	b.n	800639e <UART_SetConfig+0x5a2>
 8006398:	2380      	movs	r3, #128	; 0x80
 800639a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a40      	ldr	r2, [pc, #256]	; (80064a4 <UART_SetConfig+0x6a8>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	f040 80ef 	bne.w	8006588 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063ae:	2b20      	cmp	r3, #32
 80063b0:	dc46      	bgt.n	8006440 <UART_SetConfig+0x644>
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	f2c0 8081 	blt.w	80064ba <UART_SetConfig+0x6be>
 80063b8:	3b02      	subs	r3, #2
 80063ba:	2b1e      	cmp	r3, #30
 80063bc:	d87d      	bhi.n	80064ba <UART_SetConfig+0x6be>
 80063be:	a201      	add	r2, pc, #4	; (adr r2, 80063c4 <UART_SetConfig+0x5c8>)
 80063c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c4:	08006447 	.word	0x08006447
 80063c8:	080064bb 	.word	0x080064bb
 80063cc:	0800644f 	.word	0x0800644f
 80063d0:	080064bb 	.word	0x080064bb
 80063d4:	080064bb 	.word	0x080064bb
 80063d8:	080064bb 	.word	0x080064bb
 80063dc:	0800645f 	.word	0x0800645f
 80063e0:	080064bb 	.word	0x080064bb
 80063e4:	080064bb 	.word	0x080064bb
 80063e8:	080064bb 	.word	0x080064bb
 80063ec:	080064bb 	.word	0x080064bb
 80063f0:	080064bb 	.word	0x080064bb
 80063f4:	080064bb 	.word	0x080064bb
 80063f8:	080064bb 	.word	0x080064bb
 80063fc:	0800646f 	.word	0x0800646f
 8006400:	080064bb 	.word	0x080064bb
 8006404:	080064bb 	.word	0x080064bb
 8006408:	080064bb 	.word	0x080064bb
 800640c:	080064bb 	.word	0x080064bb
 8006410:	080064bb 	.word	0x080064bb
 8006414:	080064bb 	.word	0x080064bb
 8006418:	080064bb 	.word	0x080064bb
 800641c:	080064bb 	.word	0x080064bb
 8006420:	080064bb 	.word	0x080064bb
 8006424:	080064bb 	.word	0x080064bb
 8006428:	080064bb 	.word	0x080064bb
 800642c:	080064bb 	.word	0x080064bb
 8006430:	080064bb 	.word	0x080064bb
 8006434:	080064bb 	.word	0x080064bb
 8006438:	080064bb 	.word	0x080064bb
 800643c:	080064ad 	.word	0x080064ad
 8006440:	2b40      	cmp	r3, #64	; 0x40
 8006442:	d036      	beq.n	80064b2 <UART_SetConfig+0x6b6>
 8006444:	e039      	b.n	80064ba <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006446:	f7fe fc81 	bl	8004d4c <HAL_RCCEx_GetD3PCLK1Freq>
 800644a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800644c:	e03b      	b.n	80064c6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800644e:	f107 0314 	add.w	r3, r7, #20
 8006452:	4618      	mov	r0, r3
 8006454:	f7fe fc90 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800645c:	e033      	b.n	80064c6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800645e:	f107 0308 	add.w	r3, r7, #8
 8006462:	4618      	mov	r0, r3
 8006464:	f7fe fddc 	bl	8005020 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800646c:	e02b      	b.n	80064c6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800646e:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <UART_SetConfig+0x69c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0320 	and.w	r3, r3, #32
 8006476:	2b00      	cmp	r3, #0
 8006478:	d009      	beq.n	800648e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800647a:	4b07      	ldr	r3, [pc, #28]	; (8006498 <UART_SetConfig+0x69c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	08db      	lsrs	r3, r3, #3
 8006480:	f003 0303 	and.w	r3, r3, #3
 8006484:	4a08      	ldr	r2, [pc, #32]	; (80064a8 <UART_SetConfig+0x6ac>)
 8006486:	fa22 f303 	lsr.w	r3, r2, r3
 800648a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800648c:	e01b      	b.n	80064c6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800648e:	4b06      	ldr	r3, [pc, #24]	; (80064a8 <UART_SetConfig+0x6ac>)
 8006490:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006492:	e018      	b.n	80064c6 <UART_SetConfig+0x6ca>
 8006494:	40011400 	.word	0x40011400
 8006498:	58024400 	.word	0x58024400
 800649c:	40007800 	.word	0x40007800
 80064a0:	40007c00 	.word	0x40007c00
 80064a4:	58000c00 	.word	0x58000c00
 80064a8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80064ac:	4bc4      	ldr	r3, [pc, #784]	; (80067c0 <UART_SetConfig+0x9c4>)
 80064ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064b0:	e009      	b.n	80064c6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064b8:	e005      	b.n	80064c6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80064c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 81da 	beq.w	8006882 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d2:	4abc      	ldr	r2, [pc, #752]	; (80067c4 <UART_SetConfig+0x9c8>)
 80064d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064d8:	461a      	mov	r2, r3
 80064da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80064e0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	4613      	mov	r3, r2
 80064e8:	005b      	lsls	r3, r3, #1
 80064ea:	4413      	add	r3, r2
 80064ec:	6a3a      	ldr	r2, [r7, #32]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d305      	bcc.n	80064fe <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064f8:	6a3a      	ldr	r2, [r7, #32]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d903      	bls.n	8006506 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006504:	e1bd      	b.n	8006882 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006508:	4618      	mov	r0, r3
 800650a:	f04f 0100 	mov.w	r1, #0
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006512:	4aac      	ldr	r2, [pc, #688]	; (80067c4 <UART_SetConfig+0x9c8>)
 8006514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006518:	b29a      	uxth	r2, r3
 800651a:	f04f 0300 	mov.w	r3, #0
 800651e:	f7fa f8f3 	bl	8000708 <__aeabi_uldivmod>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4610      	mov	r0, r2
 8006528:	4619      	mov	r1, r3
 800652a:	f04f 0200 	mov.w	r2, #0
 800652e:	f04f 0300 	mov.w	r3, #0
 8006532:	020b      	lsls	r3, r1, #8
 8006534:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006538:	0202      	lsls	r2, r0, #8
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	6849      	ldr	r1, [r1, #4]
 800653e:	0849      	lsrs	r1, r1, #1
 8006540:	4608      	mov	r0, r1
 8006542:	f04f 0100 	mov.w	r1, #0
 8006546:	1814      	adds	r4, r2, r0
 8006548:	eb43 0501 	adc.w	r5, r3, r1
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	461a      	mov	r2, r3
 8006552:	f04f 0300 	mov.w	r3, #0
 8006556:	4620      	mov	r0, r4
 8006558:	4629      	mov	r1, r5
 800655a:	f7fa f8d5 	bl	8000708 <__aeabi_uldivmod>
 800655e:	4602      	mov	r2, r0
 8006560:	460b      	mov	r3, r1
 8006562:	4613      	mov	r3, r2
 8006564:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800656c:	d308      	bcc.n	8006580 <UART_SetConfig+0x784>
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006574:	d204      	bcs.n	8006580 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800657c:	60da      	str	r2, [r3, #12]
 800657e:	e180      	b.n	8006882 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006586:	e17c      	b.n	8006882 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006590:	f040 80bf 	bne.w	8006712 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8006594:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006598:	2b20      	cmp	r3, #32
 800659a:	dc49      	bgt.n	8006630 <UART_SetConfig+0x834>
 800659c:	2b00      	cmp	r3, #0
 800659e:	db7c      	blt.n	800669a <UART_SetConfig+0x89e>
 80065a0:	2b20      	cmp	r3, #32
 80065a2:	d87a      	bhi.n	800669a <UART_SetConfig+0x89e>
 80065a4:	a201      	add	r2, pc, #4	; (adr r2, 80065ac <UART_SetConfig+0x7b0>)
 80065a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065aa:	bf00      	nop
 80065ac:	08006637 	.word	0x08006637
 80065b0:	0800663f 	.word	0x0800663f
 80065b4:	0800669b 	.word	0x0800669b
 80065b8:	0800669b 	.word	0x0800669b
 80065bc:	08006647 	.word	0x08006647
 80065c0:	0800669b 	.word	0x0800669b
 80065c4:	0800669b 	.word	0x0800669b
 80065c8:	0800669b 	.word	0x0800669b
 80065cc:	08006657 	.word	0x08006657
 80065d0:	0800669b 	.word	0x0800669b
 80065d4:	0800669b 	.word	0x0800669b
 80065d8:	0800669b 	.word	0x0800669b
 80065dc:	0800669b 	.word	0x0800669b
 80065e0:	0800669b 	.word	0x0800669b
 80065e4:	0800669b 	.word	0x0800669b
 80065e8:	0800669b 	.word	0x0800669b
 80065ec:	08006667 	.word	0x08006667
 80065f0:	0800669b 	.word	0x0800669b
 80065f4:	0800669b 	.word	0x0800669b
 80065f8:	0800669b 	.word	0x0800669b
 80065fc:	0800669b 	.word	0x0800669b
 8006600:	0800669b 	.word	0x0800669b
 8006604:	0800669b 	.word	0x0800669b
 8006608:	0800669b 	.word	0x0800669b
 800660c:	0800669b 	.word	0x0800669b
 8006610:	0800669b 	.word	0x0800669b
 8006614:	0800669b 	.word	0x0800669b
 8006618:	0800669b 	.word	0x0800669b
 800661c:	0800669b 	.word	0x0800669b
 8006620:	0800669b 	.word	0x0800669b
 8006624:	0800669b 	.word	0x0800669b
 8006628:	0800669b 	.word	0x0800669b
 800662c:	0800668d 	.word	0x0800668d
 8006630:	2b40      	cmp	r3, #64	; 0x40
 8006632:	d02e      	beq.n	8006692 <UART_SetConfig+0x896>
 8006634:	e031      	b.n	800669a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006636:	f7fd fc1d 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 800663a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800663c:	e033      	b.n	80066a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800663e:	f7fd fc2f 	bl	8003ea0 <HAL_RCC_GetPCLK2Freq>
 8006642:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006644:	e02f      	b.n	80066a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006646:	f107 0314 	add.w	r3, r7, #20
 800664a:	4618      	mov	r0, r3
 800664c:	f7fe fb94 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006654:	e027      	b.n	80066a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006656:	f107 0308 	add.w	r3, r7, #8
 800665a:	4618      	mov	r0, r3
 800665c:	f7fe fce0 	bl	8005020 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006664:	e01f      	b.n	80066a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006666:	4b58      	ldr	r3, [pc, #352]	; (80067c8 <UART_SetConfig+0x9cc>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0320 	and.w	r3, r3, #32
 800666e:	2b00      	cmp	r3, #0
 8006670:	d009      	beq.n	8006686 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006672:	4b55      	ldr	r3, [pc, #340]	; (80067c8 <UART_SetConfig+0x9cc>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	08db      	lsrs	r3, r3, #3
 8006678:	f003 0303 	and.w	r3, r3, #3
 800667c:	4a53      	ldr	r2, [pc, #332]	; (80067cc <UART_SetConfig+0x9d0>)
 800667e:	fa22 f303 	lsr.w	r3, r2, r3
 8006682:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006684:	e00f      	b.n	80066a6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8006686:	4b51      	ldr	r3, [pc, #324]	; (80067cc <UART_SetConfig+0x9d0>)
 8006688:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800668a:	e00c      	b.n	80066a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800668c:	4b4c      	ldr	r3, [pc, #304]	; (80067c0 <UART_SetConfig+0x9c4>)
 800668e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006690:	e009      	b.n	80066a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006696:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006698:	e005      	b.n	80066a6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800669a:	2300      	movs	r3, #0
 800669c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80066a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 80ea 	beq.w	8006882 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b2:	4a44      	ldr	r2, [pc, #272]	; (80067c4 <UART_SetConfig+0x9c8>)
 80066b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066b8:	461a      	mov	r2, r3
 80066ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80066c0:	005a      	lsls	r2, r3, #1
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	085b      	lsrs	r3, r3, #1
 80066c8:	441a      	add	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d8:	2b0f      	cmp	r3, #15
 80066da:	d916      	bls.n	800670a <UART_SetConfig+0x90e>
 80066dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e2:	d212      	bcs.n	800670a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	f023 030f 	bic.w	r3, r3, #15
 80066ec:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f0:	085b      	lsrs	r3, r3, #1
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066fc:	4313      	orrs	r3, r2
 80066fe:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006706:	60da      	str	r2, [r3, #12]
 8006708:	e0bb      	b.n	8006882 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006710:	e0b7      	b.n	8006882 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006712:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006716:	2b20      	cmp	r3, #32
 8006718:	dc4a      	bgt.n	80067b0 <UART_SetConfig+0x9b4>
 800671a:	2b00      	cmp	r3, #0
 800671c:	f2c0 8086 	blt.w	800682c <UART_SetConfig+0xa30>
 8006720:	2b20      	cmp	r3, #32
 8006722:	f200 8083 	bhi.w	800682c <UART_SetConfig+0xa30>
 8006726:	a201      	add	r2, pc, #4	; (adr r2, 800672c <UART_SetConfig+0x930>)
 8006728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672c:	080067b7 	.word	0x080067b7
 8006730:	080067d1 	.word	0x080067d1
 8006734:	0800682d 	.word	0x0800682d
 8006738:	0800682d 	.word	0x0800682d
 800673c:	080067d9 	.word	0x080067d9
 8006740:	0800682d 	.word	0x0800682d
 8006744:	0800682d 	.word	0x0800682d
 8006748:	0800682d 	.word	0x0800682d
 800674c:	080067e9 	.word	0x080067e9
 8006750:	0800682d 	.word	0x0800682d
 8006754:	0800682d 	.word	0x0800682d
 8006758:	0800682d 	.word	0x0800682d
 800675c:	0800682d 	.word	0x0800682d
 8006760:	0800682d 	.word	0x0800682d
 8006764:	0800682d 	.word	0x0800682d
 8006768:	0800682d 	.word	0x0800682d
 800676c:	080067f9 	.word	0x080067f9
 8006770:	0800682d 	.word	0x0800682d
 8006774:	0800682d 	.word	0x0800682d
 8006778:	0800682d 	.word	0x0800682d
 800677c:	0800682d 	.word	0x0800682d
 8006780:	0800682d 	.word	0x0800682d
 8006784:	0800682d 	.word	0x0800682d
 8006788:	0800682d 	.word	0x0800682d
 800678c:	0800682d 	.word	0x0800682d
 8006790:	0800682d 	.word	0x0800682d
 8006794:	0800682d 	.word	0x0800682d
 8006798:	0800682d 	.word	0x0800682d
 800679c:	0800682d 	.word	0x0800682d
 80067a0:	0800682d 	.word	0x0800682d
 80067a4:	0800682d 	.word	0x0800682d
 80067a8:	0800682d 	.word	0x0800682d
 80067ac:	0800681f 	.word	0x0800681f
 80067b0:	2b40      	cmp	r3, #64	; 0x40
 80067b2:	d037      	beq.n	8006824 <UART_SetConfig+0xa28>
 80067b4:	e03a      	b.n	800682c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067b6:	f7fd fb5d 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 80067ba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80067bc:	e03c      	b.n	8006838 <UART_SetConfig+0xa3c>
 80067be:	bf00      	nop
 80067c0:	003d0900 	.word	0x003d0900
 80067c4:	0800baec 	.word	0x0800baec
 80067c8:	58024400 	.word	0x58024400
 80067cc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067d0:	f7fd fb66 	bl	8003ea0 <HAL_RCC_GetPCLK2Freq>
 80067d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80067d6:	e02f      	b.n	8006838 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067d8:	f107 0314 	add.w	r3, r7, #20
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fe facb 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067e6:	e027      	b.n	8006838 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067e8:	f107 0308 	add.w	r3, r7, #8
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7fe fc17 	bl	8005020 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067f6:	e01f      	b.n	8006838 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067f8:	4b2c      	ldr	r3, [pc, #176]	; (80068ac <UART_SetConfig+0xab0>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0320 	and.w	r3, r3, #32
 8006800:	2b00      	cmp	r3, #0
 8006802:	d009      	beq.n	8006818 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006804:	4b29      	ldr	r3, [pc, #164]	; (80068ac <UART_SetConfig+0xab0>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	08db      	lsrs	r3, r3, #3
 800680a:	f003 0303 	and.w	r3, r3, #3
 800680e:	4a28      	ldr	r2, [pc, #160]	; (80068b0 <UART_SetConfig+0xab4>)
 8006810:	fa22 f303 	lsr.w	r3, r2, r3
 8006814:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006816:	e00f      	b.n	8006838 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006818:	4b25      	ldr	r3, [pc, #148]	; (80068b0 <UART_SetConfig+0xab4>)
 800681a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800681c:	e00c      	b.n	8006838 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800681e:	4b25      	ldr	r3, [pc, #148]	; (80068b4 <UART_SetConfig+0xab8>)
 8006820:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006822:	e009      	b.n	8006838 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006824:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006828:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800682a:	e005      	b.n	8006838 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800682c:	2300      	movs	r3, #0
 800682e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006836:	bf00      	nop
    }

    if (pclk != 0U)
 8006838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683a:	2b00      	cmp	r3, #0
 800683c:	d021      	beq.n	8006882 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	4a1d      	ldr	r2, [pc, #116]	; (80068b8 <UART_SetConfig+0xabc>)
 8006844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006848:	461a      	mov	r2, r3
 800684a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	085b      	lsrs	r3, r3, #1
 8006856:	441a      	add	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006860:	b29b      	uxth	r3, r3
 8006862:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006866:	2b0f      	cmp	r3, #15
 8006868:	d908      	bls.n	800687c <UART_SetConfig+0xa80>
 800686a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006870:	d204      	bcs.n	800687c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006878:	60da      	str	r2, [r3, #12]
 800687a:	e002      	b.n	8006882 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800689e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3738      	adds	r7, #56	; 0x38
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bdb0      	pop	{r4, r5, r7, pc}
 80068aa:	bf00      	nop
 80068ac:	58024400 	.word	0x58024400
 80068b0:	03d09000 	.word	0x03d09000
 80068b4:	003d0900 	.word	0x003d0900
 80068b8:	0800baec 	.word	0x0800baec

080068bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00a      	beq.n	80068e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00a      	beq.n	8006908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	430a      	orrs	r2, r1
 8006906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690c:	f003 0304 	and.w	r3, r3, #4
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00a      	beq.n	800692a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692e:	f003 0308 	and.w	r3, r3, #8
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00a      	beq.n	800694c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	430a      	orrs	r2, r1
 800694a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006950:	f003 0310 	and.w	r3, r3, #16
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00a      	beq.n	800696e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006972:	f003 0320 	and.w	r3, r3, #32
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00a      	beq.n	8006990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	430a      	orrs	r2, r1
 800698e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006998:	2b00      	cmp	r3, #0
 800699a:	d01a      	beq.n	80069d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ba:	d10a      	bne.n	80069d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	430a      	orrs	r2, r1
 80069d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00a      	beq.n	80069f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	430a      	orrs	r2, r1
 80069f2:	605a      	str	r2, [r3, #4]
  }
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af02      	add	r7, sp, #8
 8006a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a10:	f7fb f858 	bl	8001ac4 <HAL_GetTick>
 8006a14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0308 	and.w	r3, r3, #8
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d10e      	bne.n	8006a42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f82f 	bl	8006a96 <UART_WaitOnFlagUntilTimeout>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e025      	b.n	8006a8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	d10e      	bne.n	8006a6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f819 	bl	8006a96 <UART_WaitOnFlagUntilTimeout>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d001      	beq.n	8006a6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e00f      	b.n	8006a8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	60f8      	str	r0, [r7, #12]
 8006a9e:	60b9      	str	r1, [r7, #8]
 8006aa0:	603b      	str	r3, [r7, #0]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aa6:	e062      	b.n	8006b6e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aae:	d05e      	beq.n	8006b6e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ab0:	f7fb f808 	bl	8001ac4 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	69ba      	ldr	r2, [r7, #24]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d302      	bcc.n	8006ac6 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d11d      	bne.n	8006b02 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ad4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 0201 	bic.w	r2, r2, #1
 8006ae4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2220      	movs	r2, #32
 8006aea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e045      	b.n	8006b8e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d02e      	beq.n	8006b6e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b1e:	d126      	bne.n	8006b6e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b38:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 0201 	bic.w	r2, r2, #1
 8006b48:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2220      	movs	r2, #32
 8006b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e00f      	b.n	8006b8e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	69da      	ldr	r2, [r3, #28]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	4013      	ands	r3, r2
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	bf0c      	ite	eq
 8006b7e:	2301      	moveq	r3, #1
 8006b80:	2300      	movne	r3, #0
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	461a      	mov	r2, r3
 8006b86:	79fb      	ldrb	r3, [r7, #7]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d08d      	beq.n	8006aa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b085      	sub	sp, #20
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d101      	bne.n	8006bac <HAL_UARTEx_DisableFifoMode+0x16>
 8006ba8:	2302      	movs	r3, #2
 8006baa:	e027      	b.n	8006bfc <HAL_UARTEx_DisableFifoMode+0x66>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2224      	movs	r2, #36	; 0x24
 8006bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f022 0201 	bic.w	r2, r2, #1
 8006bd2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2220      	movs	r2, #32
 8006bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d101      	bne.n	8006c20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	e02d      	b.n	8006c7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2224      	movs	r2, #36	; 0x24
 8006c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f022 0201 	bic.w	r2, r2, #1
 8006c46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f84f 	bl	8006d00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e02d      	b.n	8006cf8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2224      	movs	r2, #36	; 0x24
 8006ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 0201 	bic.w	r2, r2, #1
 8006cc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f811 	bl	8006d00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d108      	bne.n	8006d22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d20:	e031      	b.n	8006d86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d22:	2310      	movs	r3, #16
 8006d24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d26:	2310      	movs	r3, #16
 8006d28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	0e5b      	lsrs	r3, r3, #25
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	f003 0307 	and.w	r3, r3, #7
 8006d38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	0f5b      	lsrs	r3, r3, #29
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	f003 0307 	and.w	r3, r3, #7
 8006d48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d4a:	7bbb      	ldrb	r3, [r7, #14]
 8006d4c:	7b3a      	ldrb	r2, [r7, #12]
 8006d4e:	4911      	ldr	r1, [pc, #68]	; (8006d94 <UARTEx_SetNbDataToProcess+0x94>)
 8006d50:	5c8a      	ldrb	r2, [r1, r2]
 8006d52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d56:	7b3a      	ldrb	r2, [r7, #12]
 8006d58:	490f      	ldr	r1, [pc, #60]	; (8006d98 <UARTEx_SetNbDataToProcess+0x98>)
 8006d5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
 8006d6a:	7b7a      	ldrb	r2, [r7, #13]
 8006d6c:	4909      	ldr	r1, [pc, #36]	; (8006d94 <UARTEx_SetNbDataToProcess+0x94>)
 8006d6e:	5c8a      	ldrb	r2, [r1, r2]
 8006d70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d74:	7b7a      	ldrb	r2, [r7, #13]
 8006d76:	4908      	ldr	r1, [pc, #32]	; (8006d98 <UARTEx_SetNbDataToProcess+0x98>)
 8006d78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006d86:	bf00      	nop
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	0800bb04 	.word	0x0800bb04
 8006d98:	0800bb0c 	.word	0x0800bb0c

08006d9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	f107 001c 	add.w	r0, r7, #28
 8006daa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d120      	bne.n	8006df6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68da      	ldr	r2, [r3, #12]
 8006dc4:	4b2a      	ldr	r3, [pc, #168]	; (8006e70 <USB_CoreInit+0xd4>)
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d105      	bne.n	8006dea <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fa60 	bl	80072b0 <USB_CoreReset>
 8006df0:	4603      	mov	r3, r0
 8006df2:	73fb      	strb	r3, [r7, #15]
 8006df4:	e01a      	b.n	8006e2c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fa54 	bl	80072b0 <USB_CoreReset>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d106      	bne.n	8006e20 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	639a      	str	r2, [r3, #56]	; 0x38
 8006e1e:	e005      	b.n	8006e2c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d116      	bne.n	8006e60 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e40:	4b0c      	ldr	r3, [pc, #48]	; (8006e74 <USB_CoreInit+0xd8>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f043 0206 	orr.w	r2, r3, #6
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f043 0220 	orr.w	r2, r3, #32
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e6c:	b004      	add	sp, #16
 8006e6e:	4770      	bx	lr
 8006e70:	ffbdffbf 	.word	0xffbdffbf
 8006e74:	03ee0000 	.word	0x03ee0000

08006e78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f023 0201 	bic.w	r2, r3, #1
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b082      	sub	sp, #8
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006eb2:	78fb      	ldrb	r3, [r7, #3]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d106      	bne.n	8006ec6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	60da      	str	r2, [r3, #12]
 8006ec4:	e00b      	b.n	8006ede <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ec6:	78fb      	ldrb	r3, [r7, #3]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d106      	bne.n	8006eda <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	60da      	str	r2, [r3, #12]
 8006ed8:	e001      	b.n	8006ede <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e003      	b.n	8006ee6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006ede:	2032      	movs	r0, #50	; 0x32
 8006ee0:	f7fa fdfc 	bl	8001adc <HAL_Delay>

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
	...

08006ef0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ef0:	b084      	sub	sp, #16
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b086      	sub	sp, #24
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
 8006efa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006efe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f02:	2300      	movs	r3, #0
 8006f04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	613b      	str	r3, [r7, #16]
 8006f0e:	e009      	b.n	8006f24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	3340      	adds	r3, #64	; 0x40
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	3301      	adds	r3, #1
 8006f22:	613b      	str	r3, [r7, #16]
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	2b0e      	cmp	r3, #14
 8006f28:	d9f2      	bls.n	8006f10 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d11c      	bne.n	8006f6a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f3e:	f043 0302 	orr.w	r3, r3, #2
 8006f42:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f48:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	e005      	b.n	8006f76 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	2300      	movs	r3, #0
 8006f80:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f88:	4619      	mov	r1, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f90:	461a      	mov	r2, r3
 8006f92:	680b      	ldr	r3, [r1, #0]
 8006f94:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d10c      	bne.n	8006fb6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d104      	bne.n	8006fac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f949 	bl	800723c <USB_SetDevSpeed>
 8006faa:	e008      	b.n	8006fbe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006fac:	2101      	movs	r1, #1
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f944 	bl	800723c <USB_SetDevSpeed>
 8006fb4:	e003      	b.n	8006fbe <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006fb6:	2103      	movs	r1, #3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f93f 	bl	800723c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006fbe:	2110      	movs	r1, #16
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f8f3 	bl	80071ac <USB_FlushTxFifo>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f911 	bl	80071f8 <USB_FlushRxFifo>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	2300      	movs	r3, #0
 8006fea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ffe:	461a      	mov	r2, r3
 8007000:	2300      	movs	r3, #0
 8007002:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007004:	2300      	movs	r3, #0
 8007006:	613b      	str	r3, [r7, #16]
 8007008:	e043      	b.n	8007092 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	4413      	add	r3, r2
 8007012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800701c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007020:	d118      	bne.n	8007054 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10a      	bne.n	800703e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007034:	461a      	mov	r2, r3
 8007036:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800703a:	6013      	str	r3, [r2, #0]
 800703c:	e013      	b.n	8007066 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	4413      	add	r3, r2
 8007046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800704a:	461a      	mov	r2, r3
 800704c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	e008      	b.n	8007066 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007060:	461a      	mov	r2, r3
 8007062:	2300      	movs	r3, #0
 8007064:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007072:	461a      	mov	r2, r3
 8007074:	2300      	movs	r3, #0
 8007076:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007084:	461a      	mov	r2, r3
 8007086:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800708a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	3301      	adds	r3, #1
 8007090:	613b      	str	r3, [r7, #16]
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	429a      	cmp	r2, r3
 8007098:	d3b7      	bcc.n	800700a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800709a:	2300      	movs	r3, #0
 800709c:	613b      	str	r3, [r7, #16]
 800709e:	e043      	b.n	8007128 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070b6:	d118      	bne.n	80070ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10a      	bne.n	80070d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	015a      	lsls	r2, r3, #5
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	4413      	add	r3, r2
 80070c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ca:	461a      	mov	r2, r3
 80070cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070d0:	6013      	str	r3, [r2, #0]
 80070d2:	e013      	b.n	80070fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e0:	461a      	mov	r2, r3
 80070e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070e6:	6013      	str	r3, [r2, #0]
 80070e8:	e008      	b.n	80070fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	015a      	lsls	r2, r3, #5
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f6:	461a      	mov	r2, r3
 80070f8:	2300      	movs	r3, #0
 80070fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4413      	add	r3, r2
 8007104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007108:	461a      	mov	r2, r3
 800710a:	2300      	movs	r3, #0
 800710c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	015a      	lsls	r2, r3, #5
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	4413      	add	r3, r2
 8007116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711a:	461a      	mov	r2, r3
 800711c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007120:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	3301      	adds	r3, #1
 8007126:	613b      	str	r3, [r7, #16]
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	429a      	cmp	r2, r3
 800712e:	d3b7      	bcc.n	80070a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800713e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007142:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007150:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	2b00      	cmp	r3, #0
 8007156:	d105      	bne.n	8007164 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	f043 0210 	orr.w	r2, r3, #16
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	699a      	ldr	r2, [r3, #24]
 8007168:	4b0e      	ldr	r3, [pc, #56]	; (80071a4 <USB_DevInit+0x2b4>)
 800716a:	4313      	orrs	r3, r2
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007172:	2b00      	cmp	r3, #0
 8007174:	d005      	beq.n	8007182 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	f043 0208 	orr.w	r2, r3, #8
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007184:	2b01      	cmp	r3, #1
 8007186:	d105      	bne.n	8007194 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	699a      	ldr	r2, [r3, #24]
 800718c:	4b06      	ldr	r3, [pc, #24]	; (80071a8 <USB_DevInit+0x2b8>)
 800718e:	4313      	orrs	r3, r2
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007194:	7dfb      	ldrb	r3, [r7, #23]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3718      	adds	r7, #24
 800719a:	46bd      	mov	sp, r7
 800719c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071a0:	b004      	add	sp, #16
 80071a2:	4770      	bx	lr
 80071a4:	803c3800 	.word	0x803c3800
 80071a8:	40000004 	.word	0x40000004

080071ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	019b      	lsls	r3, r3, #6
 80071be:	f043 0220 	orr.w	r2, r3, #32
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	3301      	adds	r3, #1
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	4a09      	ldr	r2, [pc, #36]	; (80071f4 <USB_FlushTxFifo+0x48>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d901      	bls.n	80071d8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e006      	b.n	80071e6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	f003 0320 	and.w	r3, r3, #32
 80071e0:	2b20      	cmp	r3, #32
 80071e2:	d0f0      	beq.n	80071c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	00030d40 	.word	0x00030d40

080071f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007200:	2300      	movs	r3, #0
 8007202:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2210      	movs	r2, #16
 8007208:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	3301      	adds	r3, #1
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	4a09      	ldr	r2, [pc, #36]	; (8007238 <USB_FlushRxFifo+0x40>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d901      	bls.n	800721c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007218:	2303      	movs	r3, #3
 800721a:	e006      	b.n	800722a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	f003 0310 	and.w	r3, r3, #16
 8007224:	2b10      	cmp	r3, #16
 8007226:	d0f0      	beq.n	800720a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	00030d40 	.word	0x00030d40

0800723c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	460b      	mov	r3, r1
 8007246:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	78fb      	ldrb	r3, [r7, #3]
 8007256:	68f9      	ldr	r1, [r7, #12]
 8007258:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800725c:	4313      	orrs	r3, r2
 800725e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800726e:	b480      	push	{r7}
 8007270:	b085      	sub	sp, #20
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007288:	f023 0303 	bic.w	r3, r3, #3
 800728c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800729c:	f043 0302 	orr.w	r3, r3, #2
 80072a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3301      	adds	r3, #1
 80072c0:	60fb      	str	r3, [r7, #12]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4a13      	ldr	r2, [pc, #76]	; (8007314 <USB_CoreReset+0x64>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d901      	bls.n	80072ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e01b      	b.n	8007306 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	daf2      	bge.n	80072bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	f043 0201 	orr.w	r2, r3, #1
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	3301      	adds	r3, #1
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4a09      	ldr	r2, [pc, #36]	; (8007314 <USB_CoreReset+0x64>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d901      	bls.n	80072f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e006      	b.n	8007306 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	f003 0301 	and.w	r3, r3, #1
 8007300:	2b01      	cmp	r3, #1
 8007302:	d0f0      	beq.n	80072e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	00030d40 	.word	0x00030d40

08007318 <__errno>:
 8007318:	4b01      	ldr	r3, [pc, #4]	; (8007320 <__errno+0x8>)
 800731a:	6818      	ldr	r0, [r3, #0]
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	24000010 	.word	0x24000010

08007324 <__libc_init_array>:
 8007324:	b570      	push	{r4, r5, r6, lr}
 8007326:	4d0d      	ldr	r5, [pc, #52]	; (800735c <__libc_init_array+0x38>)
 8007328:	4c0d      	ldr	r4, [pc, #52]	; (8007360 <__libc_init_array+0x3c>)
 800732a:	1b64      	subs	r4, r4, r5
 800732c:	10a4      	asrs	r4, r4, #2
 800732e:	2600      	movs	r6, #0
 8007330:	42a6      	cmp	r6, r4
 8007332:	d109      	bne.n	8007348 <__libc_init_array+0x24>
 8007334:	4d0b      	ldr	r5, [pc, #44]	; (8007364 <__libc_init_array+0x40>)
 8007336:	4c0c      	ldr	r4, [pc, #48]	; (8007368 <__libc_init_array+0x44>)
 8007338:	f004 fb76 	bl	800ba28 <_init>
 800733c:	1b64      	subs	r4, r4, r5
 800733e:	10a4      	asrs	r4, r4, #2
 8007340:	2600      	movs	r6, #0
 8007342:	42a6      	cmp	r6, r4
 8007344:	d105      	bne.n	8007352 <__libc_init_array+0x2e>
 8007346:	bd70      	pop	{r4, r5, r6, pc}
 8007348:	f855 3b04 	ldr.w	r3, [r5], #4
 800734c:	4798      	blx	r3
 800734e:	3601      	adds	r6, #1
 8007350:	e7ee      	b.n	8007330 <__libc_init_array+0xc>
 8007352:	f855 3b04 	ldr.w	r3, [r5], #4
 8007356:	4798      	blx	r3
 8007358:	3601      	adds	r6, #1
 800735a:	e7f2      	b.n	8007342 <__libc_init_array+0x1e>
 800735c:	0800bfd4 	.word	0x0800bfd4
 8007360:	0800bfd4 	.word	0x0800bfd4
 8007364:	0800bfd4 	.word	0x0800bfd4
 8007368:	0800bfd8 	.word	0x0800bfd8

0800736c <memset>:
 800736c:	4402      	add	r2, r0
 800736e:	4603      	mov	r3, r0
 8007370:	4293      	cmp	r3, r2
 8007372:	d100      	bne.n	8007376 <memset+0xa>
 8007374:	4770      	bx	lr
 8007376:	f803 1b01 	strb.w	r1, [r3], #1
 800737a:	e7f9      	b.n	8007370 <memset+0x4>

0800737c <__cvt>:
 800737c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800737e:	ed2d 8b02 	vpush	{d8}
 8007382:	eeb0 8b40 	vmov.f64	d8, d0
 8007386:	b085      	sub	sp, #20
 8007388:	4617      	mov	r7, r2
 800738a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800738c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800738e:	ee18 2a90 	vmov	r2, s17
 8007392:	f025 0520 	bic.w	r5, r5, #32
 8007396:	2a00      	cmp	r2, #0
 8007398:	bfb6      	itet	lt
 800739a:	222d      	movlt	r2, #45	; 0x2d
 800739c:	2200      	movge	r2, #0
 800739e:	eeb1 8b40 	vneglt.f64	d8, d0
 80073a2:	2d46      	cmp	r5, #70	; 0x46
 80073a4:	460c      	mov	r4, r1
 80073a6:	701a      	strb	r2, [r3, #0]
 80073a8:	d004      	beq.n	80073b4 <__cvt+0x38>
 80073aa:	2d45      	cmp	r5, #69	; 0x45
 80073ac:	d100      	bne.n	80073b0 <__cvt+0x34>
 80073ae:	3401      	adds	r4, #1
 80073b0:	2102      	movs	r1, #2
 80073b2:	e000      	b.n	80073b6 <__cvt+0x3a>
 80073b4:	2103      	movs	r1, #3
 80073b6:	ab03      	add	r3, sp, #12
 80073b8:	9301      	str	r3, [sp, #4]
 80073ba:	ab02      	add	r3, sp, #8
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	4622      	mov	r2, r4
 80073c0:	4633      	mov	r3, r6
 80073c2:	eeb0 0b48 	vmov.f64	d0, d8
 80073c6:	f001 fd53 	bl	8008e70 <_dtoa_r>
 80073ca:	2d47      	cmp	r5, #71	; 0x47
 80073cc:	d109      	bne.n	80073e2 <__cvt+0x66>
 80073ce:	07fb      	lsls	r3, r7, #31
 80073d0:	d407      	bmi.n	80073e2 <__cvt+0x66>
 80073d2:	9b03      	ldr	r3, [sp, #12]
 80073d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073d6:	1a1b      	subs	r3, r3, r0
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	b005      	add	sp, #20
 80073dc:	ecbd 8b02 	vpop	{d8}
 80073e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073e2:	2d46      	cmp	r5, #70	; 0x46
 80073e4:	eb00 0204 	add.w	r2, r0, r4
 80073e8:	d10c      	bne.n	8007404 <__cvt+0x88>
 80073ea:	7803      	ldrb	r3, [r0, #0]
 80073ec:	2b30      	cmp	r3, #48	; 0x30
 80073ee:	d107      	bne.n	8007400 <__cvt+0x84>
 80073f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80073f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f8:	bf1c      	itt	ne
 80073fa:	f1c4 0401 	rsbne	r4, r4, #1
 80073fe:	6034      	strne	r4, [r6, #0]
 8007400:	6833      	ldr	r3, [r6, #0]
 8007402:	441a      	add	r2, r3
 8007404:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800740c:	bf08      	it	eq
 800740e:	9203      	streq	r2, [sp, #12]
 8007410:	2130      	movs	r1, #48	; 0x30
 8007412:	9b03      	ldr	r3, [sp, #12]
 8007414:	4293      	cmp	r3, r2
 8007416:	d2dc      	bcs.n	80073d2 <__cvt+0x56>
 8007418:	1c5c      	adds	r4, r3, #1
 800741a:	9403      	str	r4, [sp, #12]
 800741c:	7019      	strb	r1, [r3, #0]
 800741e:	e7f8      	b.n	8007412 <__cvt+0x96>

08007420 <__exponent>:
 8007420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007422:	4603      	mov	r3, r0
 8007424:	2900      	cmp	r1, #0
 8007426:	bfb8      	it	lt
 8007428:	4249      	neglt	r1, r1
 800742a:	f803 2b02 	strb.w	r2, [r3], #2
 800742e:	bfb4      	ite	lt
 8007430:	222d      	movlt	r2, #45	; 0x2d
 8007432:	222b      	movge	r2, #43	; 0x2b
 8007434:	2909      	cmp	r1, #9
 8007436:	7042      	strb	r2, [r0, #1]
 8007438:	dd2a      	ble.n	8007490 <__exponent+0x70>
 800743a:	f10d 0407 	add.w	r4, sp, #7
 800743e:	46a4      	mov	ip, r4
 8007440:	270a      	movs	r7, #10
 8007442:	46a6      	mov	lr, r4
 8007444:	460a      	mov	r2, r1
 8007446:	fb91 f6f7 	sdiv	r6, r1, r7
 800744a:	fb07 1516 	mls	r5, r7, r6, r1
 800744e:	3530      	adds	r5, #48	; 0x30
 8007450:	2a63      	cmp	r2, #99	; 0x63
 8007452:	f104 34ff 	add.w	r4, r4, #4294967295
 8007456:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800745a:	4631      	mov	r1, r6
 800745c:	dcf1      	bgt.n	8007442 <__exponent+0x22>
 800745e:	3130      	adds	r1, #48	; 0x30
 8007460:	f1ae 0502 	sub.w	r5, lr, #2
 8007464:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007468:	1c44      	adds	r4, r0, #1
 800746a:	4629      	mov	r1, r5
 800746c:	4561      	cmp	r1, ip
 800746e:	d30a      	bcc.n	8007486 <__exponent+0x66>
 8007470:	f10d 0209 	add.w	r2, sp, #9
 8007474:	eba2 020e 	sub.w	r2, r2, lr
 8007478:	4565      	cmp	r5, ip
 800747a:	bf88      	it	hi
 800747c:	2200      	movhi	r2, #0
 800747e:	4413      	add	r3, r2
 8007480:	1a18      	subs	r0, r3, r0
 8007482:	b003      	add	sp, #12
 8007484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007486:	f811 2b01 	ldrb.w	r2, [r1], #1
 800748a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800748e:	e7ed      	b.n	800746c <__exponent+0x4c>
 8007490:	2330      	movs	r3, #48	; 0x30
 8007492:	3130      	adds	r1, #48	; 0x30
 8007494:	7083      	strb	r3, [r0, #2]
 8007496:	70c1      	strb	r1, [r0, #3]
 8007498:	1d03      	adds	r3, r0, #4
 800749a:	e7f1      	b.n	8007480 <__exponent+0x60>
 800749c:	0000      	movs	r0, r0
	...

080074a0 <_printf_float>:
 80074a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a4:	b08b      	sub	sp, #44	; 0x2c
 80074a6:	460c      	mov	r4, r1
 80074a8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80074ac:	4616      	mov	r6, r2
 80074ae:	461f      	mov	r7, r3
 80074b0:	4605      	mov	r5, r0
 80074b2:	f002 fdcf 	bl	800a054 <_localeconv_r>
 80074b6:	f8d0 b000 	ldr.w	fp, [r0]
 80074ba:	4658      	mov	r0, fp
 80074bc:	f7f8 ff10 	bl	80002e0 <strlen>
 80074c0:	2300      	movs	r3, #0
 80074c2:	9308      	str	r3, [sp, #32]
 80074c4:	f8d8 3000 	ldr.w	r3, [r8]
 80074c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80074cc:	6822      	ldr	r2, [r4, #0]
 80074ce:	3307      	adds	r3, #7
 80074d0:	f023 0307 	bic.w	r3, r3, #7
 80074d4:	f103 0108 	add.w	r1, r3, #8
 80074d8:	f8c8 1000 	str.w	r1, [r8]
 80074dc:	4682      	mov	sl, r0
 80074de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80074e2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80074e6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007748 <_printf_float+0x2a8>
 80074ea:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80074ee:	eeb0 6bc0 	vabs.f64	d6, d0
 80074f2:	eeb4 6b47 	vcmp.f64	d6, d7
 80074f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074fa:	dd24      	ble.n	8007546 <_printf_float+0xa6>
 80074fc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007504:	d502      	bpl.n	800750c <_printf_float+0x6c>
 8007506:	232d      	movs	r3, #45	; 0x2d
 8007508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800750c:	4b90      	ldr	r3, [pc, #576]	; (8007750 <_printf_float+0x2b0>)
 800750e:	4891      	ldr	r0, [pc, #580]	; (8007754 <_printf_float+0x2b4>)
 8007510:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007514:	bf94      	ite	ls
 8007516:	4698      	movls	r8, r3
 8007518:	4680      	movhi	r8, r0
 800751a:	2303      	movs	r3, #3
 800751c:	6123      	str	r3, [r4, #16]
 800751e:	f022 0204 	bic.w	r2, r2, #4
 8007522:	2300      	movs	r3, #0
 8007524:	6022      	str	r2, [r4, #0]
 8007526:	9304      	str	r3, [sp, #16]
 8007528:	9700      	str	r7, [sp, #0]
 800752a:	4633      	mov	r3, r6
 800752c:	aa09      	add	r2, sp, #36	; 0x24
 800752e:	4621      	mov	r1, r4
 8007530:	4628      	mov	r0, r5
 8007532:	f000 f9d3 	bl	80078dc <_printf_common>
 8007536:	3001      	adds	r0, #1
 8007538:	f040 808a 	bne.w	8007650 <_printf_float+0x1b0>
 800753c:	f04f 30ff 	mov.w	r0, #4294967295
 8007540:	b00b      	add	sp, #44	; 0x2c
 8007542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007546:	eeb4 0b40 	vcmp.f64	d0, d0
 800754a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800754e:	d709      	bvc.n	8007564 <_printf_float+0xc4>
 8007550:	ee10 3a90 	vmov	r3, s1
 8007554:	2b00      	cmp	r3, #0
 8007556:	bfbc      	itt	lt
 8007558:	232d      	movlt	r3, #45	; 0x2d
 800755a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800755e:	487e      	ldr	r0, [pc, #504]	; (8007758 <_printf_float+0x2b8>)
 8007560:	4b7e      	ldr	r3, [pc, #504]	; (800775c <_printf_float+0x2bc>)
 8007562:	e7d5      	b.n	8007510 <_printf_float+0x70>
 8007564:	6863      	ldr	r3, [r4, #4]
 8007566:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800756a:	9104      	str	r1, [sp, #16]
 800756c:	1c59      	adds	r1, r3, #1
 800756e:	d13c      	bne.n	80075ea <_printf_float+0x14a>
 8007570:	2306      	movs	r3, #6
 8007572:	6063      	str	r3, [r4, #4]
 8007574:	2300      	movs	r3, #0
 8007576:	9303      	str	r3, [sp, #12]
 8007578:	ab08      	add	r3, sp, #32
 800757a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800757e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007582:	ab07      	add	r3, sp, #28
 8007584:	6861      	ldr	r1, [r4, #4]
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	6022      	str	r2, [r4, #0]
 800758a:	f10d 031b 	add.w	r3, sp, #27
 800758e:	4628      	mov	r0, r5
 8007590:	f7ff fef4 	bl	800737c <__cvt>
 8007594:	9b04      	ldr	r3, [sp, #16]
 8007596:	9907      	ldr	r1, [sp, #28]
 8007598:	2b47      	cmp	r3, #71	; 0x47
 800759a:	4680      	mov	r8, r0
 800759c:	d108      	bne.n	80075b0 <_printf_float+0x110>
 800759e:	1cc8      	adds	r0, r1, #3
 80075a0:	db02      	blt.n	80075a8 <_printf_float+0x108>
 80075a2:	6863      	ldr	r3, [r4, #4]
 80075a4:	4299      	cmp	r1, r3
 80075a6:	dd41      	ble.n	800762c <_printf_float+0x18c>
 80075a8:	f1a9 0902 	sub.w	r9, r9, #2
 80075ac:	fa5f f989 	uxtb.w	r9, r9
 80075b0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80075b4:	d820      	bhi.n	80075f8 <_printf_float+0x158>
 80075b6:	3901      	subs	r1, #1
 80075b8:	464a      	mov	r2, r9
 80075ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075be:	9107      	str	r1, [sp, #28]
 80075c0:	f7ff ff2e 	bl	8007420 <__exponent>
 80075c4:	9a08      	ldr	r2, [sp, #32]
 80075c6:	9004      	str	r0, [sp, #16]
 80075c8:	1813      	adds	r3, r2, r0
 80075ca:	2a01      	cmp	r2, #1
 80075cc:	6123      	str	r3, [r4, #16]
 80075ce:	dc02      	bgt.n	80075d6 <_printf_float+0x136>
 80075d0:	6822      	ldr	r2, [r4, #0]
 80075d2:	07d2      	lsls	r2, r2, #31
 80075d4:	d501      	bpl.n	80075da <_printf_float+0x13a>
 80075d6:	3301      	adds	r3, #1
 80075d8:	6123      	str	r3, [r4, #16]
 80075da:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d0a2      	beq.n	8007528 <_printf_float+0x88>
 80075e2:	232d      	movs	r3, #45	; 0x2d
 80075e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075e8:	e79e      	b.n	8007528 <_printf_float+0x88>
 80075ea:	9904      	ldr	r1, [sp, #16]
 80075ec:	2947      	cmp	r1, #71	; 0x47
 80075ee:	d1c1      	bne.n	8007574 <_printf_float+0xd4>
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1bf      	bne.n	8007574 <_printf_float+0xd4>
 80075f4:	2301      	movs	r3, #1
 80075f6:	e7bc      	b.n	8007572 <_printf_float+0xd2>
 80075f8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80075fc:	d118      	bne.n	8007630 <_printf_float+0x190>
 80075fe:	2900      	cmp	r1, #0
 8007600:	6863      	ldr	r3, [r4, #4]
 8007602:	dd0b      	ble.n	800761c <_printf_float+0x17c>
 8007604:	6121      	str	r1, [r4, #16]
 8007606:	b913      	cbnz	r3, 800760e <_printf_float+0x16e>
 8007608:	6822      	ldr	r2, [r4, #0]
 800760a:	07d0      	lsls	r0, r2, #31
 800760c:	d502      	bpl.n	8007614 <_printf_float+0x174>
 800760e:	3301      	adds	r3, #1
 8007610:	440b      	add	r3, r1
 8007612:	6123      	str	r3, [r4, #16]
 8007614:	2300      	movs	r3, #0
 8007616:	65a1      	str	r1, [r4, #88]	; 0x58
 8007618:	9304      	str	r3, [sp, #16]
 800761a:	e7de      	b.n	80075da <_printf_float+0x13a>
 800761c:	b913      	cbnz	r3, 8007624 <_printf_float+0x184>
 800761e:	6822      	ldr	r2, [r4, #0]
 8007620:	07d2      	lsls	r2, r2, #31
 8007622:	d501      	bpl.n	8007628 <_printf_float+0x188>
 8007624:	3302      	adds	r3, #2
 8007626:	e7f4      	b.n	8007612 <_printf_float+0x172>
 8007628:	2301      	movs	r3, #1
 800762a:	e7f2      	b.n	8007612 <_printf_float+0x172>
 800762c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007630:	9b08      	ldr	r3, [sp, #32]
 8007632:	4299      	cmp	r1, r3
 8007634:	db05      	blt.n	8007642 <_printf_float+0x1a2>
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	6121      	str	r1, [r4, #16]
 800763a:	07d8      	lsls	r0, r3, #31
 800763c:	d5ea      	bpl.n	8007614 <_printf_float+0x174>
 800763e:	1c4b      	adds	r3, r1, #1
 8007640:	e7e7      	b.n	8007612 <_printf_float+0x172>
 8007642:	2900      	cmp	r1, #0
 8007644:	bfd4      	ite	le
 8007646:	f1c1 0202 	rsble	r2, r1, #2
 800764a:	2201      	movgt	r2, #1
 800764c:	4413      	add	r3, r2
 800764e:	e7e0      	b.n	8007612 <_printf_float+0x172>
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	055a      	lsls	r2, r3, #21
 8007654:	d407      	bmi.n	8007666 <_printf_float+0x1c6>
 8007656:	6923      	ldr	r3, [r4, #16]
 8007658:	4642      	mov	r2, r8
 800765a:	4631      	mov	r1, r6
 800765c:	4628      	mov	r0, r5
 800765e:	47b8      	blx	r7
 8007660:	3001      	adds	r0, #1
 8007662:	d12a      	bne.n	80076ba <_printf_float+0x21a>
 8007664:	e76a      	b.n	800753c <_printf_float+0x9c>
 8007666:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800766a:	f240 80e2 	bls.w	8007832 <_printf_float+0x392>
 800766e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007672:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800767a:	d133      	bne.n	80076e4 <_printf_float+0x244>
 800767c:	4a38      	ldr	r2, [pc, #224]	; (8007760 <_printf_float+0x2c0>)
 800767e:	2301      	movs	r3, #1
 8007680:	4631      	mov	r1, r6
 8007682:	4628      	mov	r0, r5
 8007684:	47b8      	blx	r7
 8007686:	3001      	adds	r0, #1
 8007688:	f43f af58 	beq.w	800753c <_printf_float+0x9c>
 800768c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007690:	429a      	cmp	r2, r3
 8007692:	db02      	blt.n	800769a <_printf_float+0x1fa>
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	07d8      	lsls	r0, r3, #31
 8007698:	d50f      	bpl.n	80076ba <_printf_float+0x21a>
 800769a:	4653      	mov	r3, sl
 800769c:	465a      	mov	r2, fp
 800769e:	4631      	mov	r1, r6
 80076a0:	4628      	mov	r0, r5
 80076a2:	47b8      	blx	r7
 80076a4:	3001      	adds	r0, #1
 80076a6:	f43f af49 	beq.w	800753c <_printf_float+0x9c>
 80076aa:	f04f 0800 	mov.w	r8, #0
 80076ae:	f104 091a 	add.w	r9, r4, #26
 80076b2:	9b08      	ldr	r3, [sp, #32]
 80076b4:	3b01      	subs	r3, #1
 80076b6:	4543      	cmp	r3, r8
 80076b8:	dc09      	bgt.n	80076ce <_printf_float+0x22e>
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	079b      	lsls	r3, r3, #30
 80076be:	f100 8108 	bmi.w	80078d2 <_printf_float+0x432>
 80076c2:	68e0      	ldr	r0, [r4, #12]
 80076c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076c6:	4298      	cmp	r0, r3
 80076c8:	bfb8      	it	lt
 80076ca:	4618      	movlt	r0, r3
 80076cc:	e738      	b.n	8007540 <_printf_float+0xa0>
 80076ce:	2301      	movs	r3, #1
 80076d0:	464a      	mov	r2, r9
 80076d2:	4631      	mov	r1, r6
 80076d4:	4628      	mov	r0, r5
 80076d6:	47b8      	blx	r7
 80076d8:	3001      	adds	r0, #1
 80076da:	f43f af2f 	beq.w	800753c <_printf_float+0x9c>
 80076de:	f108 0801 	add.w	r8, r8, #1
 80076e2:	e7e6      	b.n	80076b2 <_printf_float+0x212>
 80076e4:	9b07      	ldr	r3, [sp, #28]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	dc3c      	bgt.n	8007764 <_printf_float+0x2c4>
 80076ea:	4a1d      	ldr	r2, [pc, #116]	; (8007760 <_printf_float+0x2c0>)
 80076ec:	2301      	movs	r3, #1
 80076ee:	4631      	mov	r1, r6
 80076f0:	4628      	mov	r0, r5
 80076f2:	47b8      	blx	r7
 80076f4:	3001      	adds	r0, #1
 80076f6:	f43f af21 	beq.w	800753c <_printf_float+0x9c>
 80076fa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80076fe:	4313      	orrs	r3, r2
 8007700:	d102      	bne.n	8007708 <_printf_float+0x268>
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	07d9      	lsls	r1, r3, #31
 8007706:	d5d8      	bpl.n	80076ba <_printf_float+0x21a>
 8007708:	4653      	mov	r3, sl
 800770a:	465a      	mov	r2, fp
 800770c:	4631      	mov	r1, r6
 800770e:	4628      	mov	r0, r5
 8007710:	47b8      	blx	r7
 8007712:	3001      	adds	r0, #1
 8007714:	f43f af12 	beq.w	800753c <_printf_float+0x9c>
 8007718:	f04f 0900 	mov.w	r9, #0
 800771c:	f104 0a1a 	add.w	sl, r4, #26
 8007720:	9b07      	ldr	r3, [sp, #28]
 8007722:	425b      	negs	r3, r3
 8007724:	454b      	cmp	r3, r9
 8007726:	dc01      	bgt.n	800772c <_printf_float+0x28c>
 8007728:	9b08      	ldr	r3, [sp, #32]
 800772a:	e795      	b.n	8007658 <_printf_float+0x1b8>
 800772c:	2301      	movs	r3, #1
 800772e:	4652      	mov	r2, sl
 8007730:	4631      	mov	r1, r6
 8007732:	4628      	mov	r0, r5
 8007734:	47b8      	blx	r7
 8007736:	3001      	adds	r0, #1
 8007738:	f43f af00 	beq.w	800753c <_printf_float+0x9c>
 800773c:	f109 0901 	add.w	r9, r9, #1
 8007740:	e7ee      	b.n	8007720 <_printf_float+0x280>
 8007742:	bf00      	nop
 8007744:	f3af 8000 	nop.w
 8007748:	ffffffff 	.word	0xffffffff
 800774c:	7fefffff 	.word	0x7fefffff
 8007750:	0800bb18 	.word	0x0800bb18
 8007754:	0800bb1c 	.word	0x0800bb1c
 8007758:	0800bb24 	.word	0x0800bb24
 800775c:	0800bb20 	.word	0x0800bb20
 8007760:	0800bb28 	.word	0x0800bb28
 8007764:	9a08      	ldr	r2, [sp, #32]
 8007766:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007768:	429a      	cmp	r2, r3
 800776a:	bfa8      	it	ge
 800776c:	461a      	movge	r2, r3
 800776e:	2a00      	cmp	r2, #0
 8007770:	4691      	mov	r9, r2
 8007772:	dc38      	bgt.n	80077e6 <_printf_float+0x346>
 8007774:	2300      	movs	r3, #0
 8007776:	9305      	str	r3, [sp, #20]
 8007778:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800777c:	f104 021a 	add.w	r2, r4, #26
 8007780:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007782:	9905      	ldr	r1, [sp, #20]
 8007784:	9304      	str	r3, [sp, #16]
 8007786:	eba3 0309 	sub.w	r3, r3, r9
 800778a:	428b      	cmp	r3, r1
 800778c:	dc33      	bgt.n	80077f6 <_printf_float+0x356>
 800778e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007792:	429a      	cmp	r2, r3
 8007794:	db3c      	blt.n	8007810 <_printf_float+0x370>
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	07da      	lsls	r2, r3, #31
 800779a:	d439      	bmi.n	8007810 <_printf_float+0x370>
 800779c:	9a08      	ldr	r2, [sp, #32]
 800779e:	9b04      	ldr	r3, [sp, #16]
 80077a0:	9907      	ldr	r1, [sp, #28]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	eba2 0901 	sub.w	r9, r2, r1
 80077a8:	4599      	cmp	r9, r3
 80077aa:	bfa8      	it	ge
 80077ac:	4699      	movge	r9, r3
 80077ae:	f1b9 0f00 	cmp.w	r9, #0
 80077b2:	dc35      	bgt.n	8007820 <_printf_float+0x380>
 80077b4:	f04f 0800 	mov.w	r8, #0
 80077b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077bc:	f104 0a1a 	add.w	sl, r4, #26
 80077c0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80077c4:	1a9b      	subs	r3, r3, r2
 80077c6:	eba3 0309 	sub.w	r3, r3, r9
 80077ca:	4543      	cmp	r3, r8
 80077cc:	f77f af75 	ble.w	80076ba <_printf_float+0x21a>
 80077d0:	2301      	movs	r3, #1
 80077d2:	4652      	mov	r2, sl
 80077d4:	4631      	mov	r1, r6
 80077d6:	4628      	mov	r0, r5
 80077d8:	47b8      	blx	r7
 80077da:	3001      	adds	r0, #1
 80077dc:	f43f aeae 	beq.w	800753c <_printf_float+0x9c>
 80077e0:	f108 0801 	add.w	r8, r8, #1
 80077e4:	e7ec      	b.n	80077c0 <_printf_float+0x320>
 80077e6:	4613      	mov	r3, r2
 80077e8:	4631      	mov	r1, r6
 80077ea:	4642      	mov	r2, r8
 80077ec:	4628      	mov	r0, r5
 80077ee:	47b8      	blx	r7
 80077f0:	3001      	adds	r0, #1
 80077f2:	d1bf      	bne.n	8007774 <_printf_float+0x2d4>
 80077f4:	e6a2      	b.n	800753c <_printf_float+0x9c>
 80077f6:	2301      	movs	r3, #1
 80077f8:	4631      	mov	r1, r6
 80077fa:	4628      	mov	r0, r5
 80077fc:	9204      	str	r2, [sp, #16]
 80077fe:	47b8      	blx	r7
 8007800:	3001      	adds	r0, #1
 8007802:	f43f ae9b 	beq.w	800753c <_printf_float+0x9c>
 8007806:	9b05      	ldr	r3, [sp, #20]
 8007808:	9a04      	ldr	r2, [sp, #16]
 800780a:	3301      	adds	r3, #1
 800780c:	9305      	str	r3, [sp, #20]
 800780e:	e7b7      	b.n	8007780 <_printf_float+0x2e0>
 8007810:	4653      	mov	r3, sl
 8007812:	465a      	mov	r2, fp
 8007814:	4631      	mov	r1, r6
 8007816:	4628      	mov	r0, r5
 8007818:	47b8      	blx	r7
 800781a:	3001      	adds	r0, #1
 800781c:	d1be      	bne.n	800779c <_printf_float+0x2fc>
 800781e:	e68d      	b.n	800753c <_printf_float+0x9c>
 8007820:	9a04      	ldr	r2, [sp, #16]
 8007822:	464b      	mov	r3, r9
 8007824:	4442      	add	r2, r8
 8007826:	4631      	mov	r1, r6
 8007828:	4628      	mov	r0, r5
 800782a:	47b8      	blx	r7
 800782c:	3001      	adds	r0, #1
 800782e:	d1c1      	bne.n	80077b4 <_printf_float+0x314>
 8007830:	e684      	b.n	800753c <_printf_float+0x9c>
 8007832:	9a08      	ldr	r2, [sp, #32]
 8007834:	2a01      	cmp	r2, #1
 8007836:	dc01      	bgt.n	800783c <_printf_float+0x39c>
 8007838:	07db      	lsls	r3, r3, #31
 800783a:	d537      	bpl.n	80078ac <_printf_float+0x40c>
 800783c:	2301      	movs	r3, #1
 800783e:	4642      	mov	r2, r8
 8007840:	4631      	mov	r1, r6
 8007842:	4628      	mov	r0, r5
 8007844:	47b8      	blx	r7
 8007846:	3001      	adds	r0, #1
 8007848:	f43f ae78 	beq.w	800753c <_printf_float+0x9c>
 800784c:	4653      	mov	r3, sl
 800784e:	465a      	mov	r2, fp
 8007850:	4631      	mov	r1, r6
 8007852:	4628      	mov	r0, r5
 8007854:	47b8      	blx	r7
 8007856:	3001      	adds	r0, #1
 8007858:	f43f ae70 	beq.w	800753c <_printf_float+0x9c>
 800785c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007860:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007868:	d01b      	beq.n	80078a2 <_printf_float+0x402>
 800786a:	9b08      	ldr	r3, [sp, #32]
 800786c:	f108 0201 	add.w	r2, r8, #1
 8007870:	3b01      	subs	r3, #1
 8007872:	4631      	mov	r1, r6
 8007874:	4628      	mov	r0, r5
 8007876:	47b8      	blx	r7
 8007878:	3001      	adds	r0, #1
 800787a:	d10e      	bne.n	800789a <_printf_float+0x3fa>
 800787c:	e65e      	b.n	800753c <_printf_float+0x9c>
 800787e:	2301      	movs	r3, #1
 8007880:	464a      	mov	r2, r9
 8007882:	4631      	mov	r1, r6
 8007884:	4628      	mov	r0, r5
 8007886:	47b8      	blx	r7
 8007888:	3001      	adds	r0, #1
 800788a:	f43f ae57 	beq.w	800753c <_printf_float+0x9c>
 800788e:	f108 0801 	add.w	r8, r8, #1
 8007892:	9b08      	ldr	r3, [sp, #32]
 8007894:	3b01      	subs	r3, #1
 8007896:	4543      	cmp	r3, r8
 8007898:	dcf1      	bgt.n	800787e <_printf_float+0x3de>
 800789a:	9b04      	ldr	r3, [sp, #16]
 800789c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80078a0:	e6db      	b.n	800765a <_printf_float+0x1ba>
 80078a2:	f04f 0800 	mov.w	r8, #0
 80078a6:	f104 091a 	add.w	r9, r4, #26
 80078aa:	e7f2      	b.n	8007892 <_printf_float+0x3f2>
 80078ac:	2301      	movs	r3, #1
 80078ae:	4642      	mov	r2, r8
 80078b0:	e7df      	b.n	8007872 <_printf_float+0x3d2>
 80078b2:	2301      	movs	r3, #1
 80078b4:	464a      	mov	r2, r9
 80078b6:	4631      	mov	r1, r6
 80078b8:	4628      	mov	r0, r5
 80078ba:	47b8      	blx	r7
 80078bc:	3001      	adds	r0, #1
 80078be:	f43f ae3d 	beq.w	800753c <_printf_float+0x9c>
 80078c2:	f108 0801 	add.w	r8, r8, #1
 80078c6:	68e3      	ldr	r3, [r4, #12]
 80078c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078ca:	1a5b      	subs	r3, r3, r1
 80078cc:	4543      	cmp	r3, r8
 80078ce:	dcf0      	bgt.n	80078b2 <_printf_float+0x412>
 80078d0:	e6f7      	b.n	80076c2 <_printf_float+0x222>
 80078d2:	f04f 0800 	mov.w	r8, #0
 80078d6:	f104 0919 	add.w	r9, r4, #25
 80078da:	e7f4      	b.n	80078c6 <_printf_float+0x426>

080078dc <_printf_common>:
 80078dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078e0:	4616      	mov	r6, r2
 80078e2:	4699      	mov	r9, r3
 80078e4:	688a      	ldr	r2, [r1, #8]
 80078e6:	690b      	ldr	r3, [r1, #16]
 80078e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078ec:	4293      	cmp	r3, r2
 80078ee:	bfb8      	it	lt
 80078f0:	4613      	movlt	r3, r2
 80078f2:	6033      	str	r3, [r6, #0]
 80078f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078f8:	4607      	mov	r7, r0
 80078fa:	460c      	mov	r4, r1
 80078fc:	b10a      	cbz	r2, 8007902 <_printf_common+0x26>
 80078fe:	3301      	adds	r3, #1
 8007900:	6033      	str	r3, [r6, #0]
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	0699      	lsls	r1, r3, #26
 8007906:	bf42      	ittt	mi
 8007908:	6833      	ldrmi	r3, [r6, #0]
 800790a:	3302      	addmi	r3, #2
 800790c:	6033      	strmi	r3, [r6, #0]
 800790e:	6825      	ldr	r5, [r4, #0]
 8007910:	f015 0506 	ands.w	r5, r5, #6
 8007914:	d106      	bne.n	8007924 <_printf_common+0x48>
 8007916:	f104 0a19 	add.w	sl, r4, #25
 800791a:	68e3      	ldr	r3, [r4, #12]
 800791c:	6832      	ldr	r2, [r6, #0]
 800791e:	1a9b      	subs	r3, r3, r2
 8007920:	42ab      	cmp	r3, r5
 8007922:	dc26      	bgt.n	8007972 <_printf_common+0x96>
 8007924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007928:	1e13      	subs	r3, r2, #0
 800792a:	6822      	ldr	r2, [r4, #0]
 800792c:	bf18      	it	ne
 800792e:	2301      	movne	r3, #1
 8007930:	0692      	lsls	r2, r2, #26
 8007932:	d42b      	bmi.n	800798c <_printf_common+0xb0>
 8007934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007938:	4649      	mov	r1, r9
 800793a:	4638      	mov	r0, r7
 800793c:	47c0      	blx	r8
 800793e:	3001      	adds	r0, #1
 8007940:	d01e      	beq.n	8007980 <_printf_common+0xa4>
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	68e5      	ldr	r5, [r4, #12]
 8007946:	6832      	ldr	r2, [r6, #0]
 8007948:	f003 0306 	and.w	r3, r3, #6
 800794c:	2b04      	cmp	r3, #4
 800794e:	bf08      	it	eq
 8007950:	1aad      	subeq	r5, r5, r2
 8007952:	68a3      	ldr	r3, [r4, #8]
 8007954:	6922      	ldr	r2, [r4, #16]
 8007956:	bf0c      	ite	eq
 8007958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800795c:	2500      	movne	r5, #0
 800795e:	4293      	cmp	r3, r2
 8007960:	bfc4      	itt	gt
 8007962:	1a9b      	subgt	r3, r3, r2
 8007964:	18ed      	addgt	r5, r5, r3
 8007966:	2600      	movs	r6, #0
 8007968:	341a      	adds	r4, #26
 800796a:	42b5      	cmp	r5, r6
 800796c:	d11a      	bne.n	80079a4 <_printf_common+0xc8>
 800796e:	2000      	movs	r0, #0
 8007970:	e008      	b.n	8007984 <_printf_common+0xa8>
 8007972:	2301      	movs	r3, #1
 8007974:	4652      	mov	r2, sl
 8007976:	4649      	mov	r1, r9
 8007978:	4638      	mov	r0, r7
 800797a:	47c0      	blx	r8
 800797c:	3001      	adds	r0, #1
 800797e:	d103      	bne.n	8007988 <_printf_common+0xac>
 8007980:	f04f 30ff 	mov.w	r0, #4294967295
 8007984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007988:	3501      	adds	r5, #1
 800798a:	e7c6      	b.n	800791a <_printf_common+0x3e>
 800798c:	18e1      	adds	r1, r4, r3
 800798e:	1c5a      	adds	r2, r3, #1
 8007990:	2030      	movs	r0, #48	; 0x30
 8007992:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007996:	4422      	add	r2, r4
 8007998:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800799c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079a0:	3302      	adds	r3, #2
 80079a2:	e7c7      	b.n	8007934 <_printf_common+0x58>
 80079a4:	2301      	movs	r3, #1
 80079a6:	4622      	mov	r2, r4
 80079a8:	4649      	mov	r1, r9
 80079aa:	4638      	mov	r0, r7
 80079ac:	47c0      	blx	r8
 80079ae:	3001      	adds	r0, #1
 80079b0:	d0e6      	beq.n	8007980 <_printf_common+0xa4>
 80079b2:	3601      	adds	r6, #1
 80079b4:	e7d9      	b.n	800796a <_printf_common+0x8e>
	...

080079b8 <_printf_i>:
 80079b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079bc:	460c      	mov	r4, r1
 80079be:	4691      	mov	r9, r2
 80079c0:	7e27      	ldrb	r7, [r4, #24]
 80079c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80079c4:	2f78      	cmp	r7, #120	; 0x78
 80079c6:	4680      	mov	r8, r0
 80079c8:	469a      	mov	sl, r3
 80079ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079ce:	d807      	bhi.n	80079e0 <_printf_i+0x28>
 80079d0:	2f62      	cmp	r7, #98	; 0x62
 80079d2:	d80a      	bhi.n	80079ea <_printf_i+0x32>
 80079d4:	2f00      	cmp	r7, #0
 80079d6:	f000 80d8 	beq.w	8007b8a <_printf_i+0x1d2>
 80079da:	2f58      	cmp	r7, #88	; 0x58
 80079dc:	f000 80a3 	beq.w	8007b26 <_printf_i+0x16e>
 80079e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80079e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079e8:	e03a      	b.n	8007a60 <_printf_i+0xa8>
 80079ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079ee:	2b15      	cmp	r3, #21
 80079f0:	d8f6      	bhi.n	80079e0 <_printf_i+0x28>
 80079f2:	a001      	add	r0, pc, #4	; (adr r0, 80079f8 <_printf_i+0x40>)
 80079f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80079f8:	08007a51 	.word	0x08007a51
 80079fc:	08007a65 	.word	0x08007a65
 8007a00:	080079e1 	.word	0x080079e1
 8007a04:	080079e1 	.word	0x080079e1
 8007a08:	080079e1 	.word	0x080079e1
 8007a0c:	080079e1 	.word	0x080079e1
 8007a10:	08007a65 	.word	0x08007a65
 8007a14:	080079e1 	.word	0x080079e1
 8007a18:	080079e1 	.word	0x080079e1
 8007a1c:	080079e1 	.word	0x080079e1
 8007a20:	080079e1 	.word	0x080079e1
 8007a24:	08007b71 	.word	0x08007b71
 8007a28:	08007a95 	.word	0x08007a95
 8007a2c:	08007b53 	.word	0x08007b53
 8007a30:	080079e1 	.word	0x080079e1
 8007a34:	080079e1 	.word	0x080079e1
 8007a38:	08007b93 	.word	0x08007b93
 8007a3c:	080079e1 	.word	0x080079e1
 8007a40:	08007a95 	.word	0x08007a95
 8007a44:	080079e1 	.word	0x080079e1
 8007a48:	080079e1 	.word	0x080079e1
 8007a4c:	08007b5b 	.word	0x08007b5b
 8007a50:	680b      	ldr	r3, [r1, #0]
 8007a52:	1d1a      	adds	r2, r3, #4
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	600a      	str	r2, [r1, #0]
 8007a58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a60:	2301      	movs	r3, #1
 8007a62:	e0a3      	b.n	8007bac <_printf_i+0x1f4>
 8007a64:	6825      	ldr	r5, [r4, #0]
 8007a66:	6808      	ldr	r0, [r1, #0]
 8007a68:	062e      	lsls	r6, r5, #24
 8007a6a:	f100 0304 	add.w	r3, r0, #4
 8007a6e:	d50a      	bpl.n	8007a86 <_printf_i+0xce>
 8007a70:	6805      	ldr	r5, [r0, #0]
 8007a72:	600b      	str	r3, [r1, #0]
 8007a74:	2d00      	cmp	r5, #0
 8007a76:	da03      	bge.n	8007a80 <_printf_i+0xc8>
 8007a78:	232d      	movs	r3, #45	; 0x2d
 8007a7a:	426d      	negs	r5, r5
 8007a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a80:	485e      	ldr	r0, [pc, #376]	; (8007bfc <_printf_i+0x244>)
 8007a82:	230a      	movs	r3, #10
 8007a84:	e019      	b.n	8007aba <_printf_i+0x102>
 8007a86:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007a8a:	6805      	ldr	r5, [r0, #0]
 8007a8c:	600b      	str	r3, [r1, #0]
 8007a8e:	bf18      	it	ne
 8007a90:	b22d      	sxthne	r5, r5
 8007a92:	e7ef      	b.n	8007a74 <_printf_i+0xbc>
 8007a94:	680b      	ldr	r3, [r1, #0]
 8007a96:	6825      	ldr	r5, [r4, #0]
 8007a98:	1d18      	adds	r0, r3, #4
 8007a9a:	6008      	str	r0, [r1, #0]
 8007a9c:	0628      	lsls	r0, r5, #24
 8007a9e:	d501      	bpl.n	8007aa4 <_printf_i+0xec>
 8007aa0:	681d      	ldr	r5, [r3, #0]
 8007aa2:	e002      	b.n	8007aaa <_printf_i+0xf2>
 8007aa4:	0669      	lsls	r1, r5, #25
 8007aa6:	d5fb      	bpl.n	8007aa0 <_printf_i+0xe8>
 8007aa8:	881d      	ldrh	r5, [r3, #0]
 8007aaa:	4854      	ldr	r0, [pc, #336]	; (8007bfc <_printf_i+0x244>)
 8007aac:	2f6f      	cmp	r7, #111	; 0x6f
 8007aae:	bf0c      	ite	eq
 8007ab0:	2308      	moveq	r3, #8
 8007ab2:	230a      	movne	r3, #10
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007aba:	6866      	ldr	r6, [r4, #4]
 8007abc:	60a6      	str	r6, [r4, #8]
 8007abe:	2e00      	cmp	r6, #0
 8007ac0:	bfa2      	ittt	ge
 8007ac2:	6821      	ldrge	r1, [r4, #0]
 8007ac4:	f021 0104 	bicge.w	r1, r1, #4
 8007ac8:	6021      	strge	r1, [r4, #0]
 8007aca:	b90d      	cbnz	r5, 8007ad0 <_printf_i+0x118>
 8007acc:	2e00      	cmp	r6, #0
 8007ace:	d04d      	beq.n	8007b6c <_printf_i+0x1b4>
 8007ad0:	4616      	mov	r6, r2
 8007ad2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ad6:	fb03 5711 	mls	r7, r3, r1, r5
 8007ada:	5dc7      	ldrb	r7, [r0, r7]
 8007adc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ae0:	462f      	mov	r7, r5
 8007ae2:	42bb      	cmp	r3, r7
 8007ae4:	460d      	mov	r5, r1
 8007ae6:	d9f4      	bls.n	8007ad2 <_printf_i+0x11a>
 8007ae8:	2b08      	cmp	r3, #8
 8007aea:	d10b      	bne.n	8007b04 <_printf_i+0x14c>
 8007aec:	6823      	ldr	r3, [r4, #0]
 8007aee:	07df      	lsls	r7, r3, #31
 8007af0:	d508      	bpl.n	8007b04 <_printf_i+0x14c>
 8007af2:	6923      	ldr	r3, [r4, #16]
 8007af4:	6861      	ldr	r1, [r4, #4]
 8007af6:	4299      	cmp	r1, r3
 8007af8:	bfde      	ittt	le
 8007afa:	2330      	movle	r3, #48	; 0x30
 8007afc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b04:	1b92      	subs	r2, r2, r6
 8007b06:	6122      	str	r2, [r4, #16]
 8007b08:	f8cd a000 	str.w	sl, [sp]
 8007b0c:	464b      	mov	r3, r9
 8007b0e:	aa03      	add	r2, sp, #12
 8007b10:	4621      	mov	r1, r4
 8007b12:	4640      	mov	r0, r8
 8007b14:	f7ff fee2 	bl	80078dc <_printf_common>
 8007b18:	3001      	adds	r0, #1
 8007b1a:	d14c      	bne.n	8007bb6 <_printf_i+0x1fe>
 8007b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b20:	b004      	add	sp, #16
 8007b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b26:	4835      	ldr	r0, [pc, #212]	; (8007bfc <_printf_i+0x244>)
 8007b28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	680e      	ldr	r6, [r1, #0]
 8007b30:	061f      	lsls	r7, r3, #24
 8007b32:	f856 5b04 	ldr.w	r5, [r6], #4
 8007b36:	600e      	str	r6, [r1, #0]
 8007b38:	d514      	bpl.n	8007b64 <_printf_i+0x1ac>
 8007b3a:	07d9      	lsls	r1, r3, #31
 8007b3c:	bf44      	itt	mi
 8007b3e:	f043 0320 	orrmi.w	r3, r3, #32
 8007b42:	6023      	strmi	r3, [r4, #0]
 8007b44:	b91d      	cbnz	r5, 8007b4e <_printf_i+0x196>
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	f023 0320 	bic.w	r3, r3, #32
 8007b4c:	6023      	str	r3, [r4, #0]
 8007b4e:	2310      	movs	r3, #16
 8007b50:	e7b0      	b.n	8007ab4 <_printf_i+0xfc>
 8007b52:	6823      	ldr	r3, [r4, #0]
 8007b54:	f043 0320 	orr.w	r3, r3, #32
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	2378      	movs	r3, #120	; 0x78
 8007b5c:	4828      	ldr	r0, [pc, #160]	; (8007c00 <_printf_i+0x248>)
 8007b5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b62:	e7e3      	b.n	8007b2c <_printf_i+0x174>
 8007b64:	065e      	lsls	r6, r3, #25
 8007b66:	bf48      	it	mi
 8007b68:	b2ad      	uxthmi	r5, r5
 8007b6a:	e7e6      	b.n	8007b3a <_printf_i+0x182>
 8007b6c:	4616      	mov	r6, r2
 8007b6e:	e7bb      	b.n	8007ae8 <_printf_i+0x130>
 8007b70:	680b      	ldr	r3, [r1, #0]
 8007b72:	6826      	ldr	r6, [r4, #0]
 8007b74:	6960      	ldr	r0, [r4, #20]
 8007b76:	1d1d      	adds	r5, r3, #4
 8007b78:	600d      	str	r5, [r1, #0]
 8007b7a:	0635      	lsls	r5, r6, #24
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	d501      	bpl.n	8007b84 <_printf_i+0x1cc>
 8007b80:	6018      	str	r0, [r3, #0]
 8007b82:	e002      	b.n	8007b8a <_printf_i+0x1d2>
 8007b84:	0671      	lsls	r1, r6, #25
 8007b86:	d5fb      	bpl.n	8007b80 <_printf_i+0x1c8>
 8007b88:	8018      	strh	r0, [r3, #0]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	6123      	str	r3, [r4, #16]
 8007b8e:	4616      	mov	r6, r2
 8007b90:	e7ba      	b.n	8007b08 <_printf_i+0x150>
 8007b92:	680b      	ldr	r3, [r1, #0]
 8007b94:	1d1a      	adds	r2, r3, #4
 8007b96:	600a      	str	r2, [r1, #0]
 8007b98:	681e      	ldr	r6, [r3, #0]
 8007b9a:	6862      	ldr	r2, [r4, #4]
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f7f8 fba6 	bl	80002f0 <memchr>
 8007ba4:	b108      	cbz	r0, 8007baa <_printf_i+0x1f2>
 8007ba6:	1b80      	subs	r0, r0, r6
 8007ba8:	6060      	str	r0, [r4, #4]
 8007baa:	6863      	ldr	r3, [r4, #4]
 8007bac:	6123      	str	r3, [r4, #16]
 8007bae:	2300      	movs	r3, #0
 8007bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bb4:	e7a8      	b.n	8007b08 <_printf_i+0x150>
 8007bb6:	6923      	ldr	r3, [r4, #16]
 8007bb8:	4632      	mov	r2, r6
 8007bba:	4649      	mov	r1, r9
 8007bbc:	4640      	mov	r0, r8
 8007bbe:	47d0      	blx	sl
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	d0ab      	beq.n	8007b1c <_printf_i+0x164>
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	079b      	lsls	r3, r3, #30
 8007bc8:	d413      	bmi.n	8007bf2 <_printf_i+0x23a>
 8007bca:	68e0      	ldr	r0, [r4, #12]
 8007bcc:	9b03      	ldr	r3, [sp, #12]
 8007bce:	4298      	cmp	r0, r3
 8007bd0:	bfb8      	it	lt
 8007bd2:	4618      	movlt	r0, r3
 8007bd4:	e7a4      	b.n	8007b20 <_printf_i+0x168>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	4632      	mov	r2, r6
 8007bda:	4649      	mov	r1, r9
 8007bdc:	4640      	mov	r0, r8
 8007bde:	47d0      	blx	sl
 8007be0:	3001      	adds	r0, #1
 8007be2:	d09b      	beq.n	8007b1c <_printf_i+0x164>
 8007be4:	3501      	adds	r5, #1
 8007be6:	68e3      	ldr	r3, [r4, #12]
 8007be8:	9903      	ldr	r1, [sp, #12]
 8007bea:	1a5b      	subs	r3, r3, r1
 8007bec:	42ab      	cmp	r3, r5
 8007bee:	dcf2      	bgt.n	8007bd6 <_printf_i+0x21e>
 8007bf0:	e7eb      	b.n	8007bca <_printf_i+0x212>
 8007bf2:	2500      	movs	r5, #0
 8007bf4:	f104 0619 	add.w	r6, r4, #25
 8007bf8:	e7f5      	b.n	8007be6 <_printf_i+0x22e>
 8007bfa:	bf00      	nop
 8007bfc:	0800bb2a 	.word	0x0800bb2a
 8007c00:	0800bb3b 	.word	0x0800bb3b

08007c04 <_scanf_float>:
 8007c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c08:	b087      	sub	sp, #28
 8007c0a:	4617      	mov	r7, r2
 8007c0c:	9303      	str	r3, [sp, #12]
 8007c0e:	688b      	ldr	r3, [r1, #8]
 8007c10:	1e5a      	subs	r2, r3, #1
 8007c12:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007c16:	bf83      	ittte	hi
 8007c18:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007c1c:	195b      	addhi	r3, r3, r5
 8007c1e:	9302      	strhi	r3, [sp, #8]
 8007c20:	2300      	movls	r3, #0
 8007c22:	bf86      	itte	hi
 8007c24:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007c28:	608b      	strhi	r3, [r1, #8]
 8007c2a:	9302      	strls	r3, [sp, #8]
 8007c2c:	680b      	ldr	r3, [r1, #0]
 8007c2e:	468b      	mov	fp, r1
 8007c30:	2500      	movs	r5, #0
 8007c32:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007c36:	f84b 3b1c 	str.w	r3, [fp], #28
 8007c3a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007c3e:	4680      	mov	r8, r0
 8007c40:	460c      	mov	r4, r1
 8007c42:	465e      	mov	r6, fp
 8007c44:	46aa      	mov	sl, r5
 8007c46:	46a9      	mov	r9, r5
 8007c48:	9501      	str	r5, [sp, #4]
 8007c4a:	68a2      	ldr	r2, [r4, #8]
 8007c4c:	b152      	cbz	r2, 8007c64 <_scanf_float+0x60>
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	2b4e      	cmp	r3, #78	; 0x4e
 8007c54:	d864      	bhi.n	8007d20 <_scanf_float+0x11c>
 8007c56:	2b40      	cmp	r3, #64	; 0x40
 8007c58:	d83c      	bhi.n	8007cd4 <_scanf_float+0xd0>
 8007c5a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007c5e:	b2c8      	uxtb	r0, r1
 8007c60:	280e      	cmp	r0, #14
 8007c62:	d93a      	bls.n	8007cda <_scanf_float+0xd6>
 8007c64:	f1b9 0f00 	cmp.w	r9, #0
 8007c68:	d003      	beq.n	8007c72 <_scanf_float+0x6e>
 8007c6a:	6823      	ldr	r3, [r4, #0]
 8007c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c70:	6023      	str	r3, [r4, #0]
 8007c72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c76:	f1ba 0f01 	cmp.w	sl, #1
 8007c7a:	f200 8113 	bhi.w	8007ea4 <_scanf_float+0x2a0>
 8007c7e:	455e      	cmp	r6, fp
 8007c80:	f200 8105 	bhi.w	8007e8e <_scanf_float+0x28a>
 8007c84:	2501      	movs	r5, #1
 8007c86:	4628      	mov	r0, r5
 8007c88:	b007      	add	sp, #28
 8007c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c8e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007c92:	2a0d      	cmp	r2, #13
 8007c94:	d8e6      	bhi.n	8007c64 <_scanf_float+0x60>
 8007c96:	a101      	add	r1, pc, #4	; (adr r1, 8007c9c <_scanf_float+0x98>)
 8007c98:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007c9c:	08007ddb 	.word	0x08007ddb
 8007ca0:	08007c65 	.word	0x08007c65
 8007ca4:	08007c65 	.word	0x08007c65
 8007ca8:	08007c65 	.word	0x08007c65
 8007cac:	08007e3b 	.word	0x08007e3b
 8007cb0:	08007e13 	.word	0x08007e13
 8007cb4:	08007c65 	.word	0x08007c65
 8007cb8:	08007c65 	.word	0x08007c65
 8007cbc:	08007de9 	.word	0x08007de9
 8007cc0:	08007c65 	.word	0x08007c65
 8007cc4:	08007c65 	.word	0x08007c65
 8007cc8:	08007c65 	.word	0x08007c65
 8007ccc:	08007c65 	.word	0x08007c65
 8007cd0:	08007da1 	.word	0x08007da1
 8007cd4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007cd8:	e7db      	b.n	8007c92 <_scanf_float+0x8e>
 8007cda:	290e      	cmp	r1, #14
 8007cdc:	d8c2      	bhi.n	8007c64 <_scanf_float+0x60>
 8007cde:	a001      	add	r0, pc, #4	; (adr r0, 8007ce4 <_scanf_float+0xe0>)
 8007ce0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007ce4:	08007d93 	.word	0x08007d93
 8007ce8:	08007c65 	.word	0x08007c65
 8007cec:	08007d93 	.word	0x08007d93
 8007cf0:	08007e27 	.word	0x08007e27
 8007cf4:	08007c65 	.word	0x08007c65
 8007cf8:	08007d41 	.word	0x08007d41
 8007cfc:	08007d7d 	.word	0x08007d7d
 8007d00:	08007d7d 	.word	0x08007d7d
 8007d04:	08007d7d 	.word	0x08007d7d
 8007d08:	08007d7d 	.word	0x08007d7d
 8007d0c:	08007d7d 	.word	0x08007d7d
 8007d10:	08007d7d 	.word	0x08007d7d
 8007d14:	08007d7d 	.word	0x08007d7d
 8007d18:	08007d7d 	.word	0x08007d7d
 8007d1c:	08007d7d 	.word	0x08007d7d
 8007d20:	2b6e      	cmp	r3, #110	; 0x6e
 8007d22:	d809      	bhi.n	8007d38 <_scanf_float+0x134>
 8007d24:	2b60      	cmp	r3, #96	; 0x60
 8007d26:	d8b2      	bhi.n	8007c8e <_scanf_float+0x8a>
 8007d28:	2b54      	cmp	r3, #84	; 0x54
 8007d2a:	d077      	beq.n	8007e1c <_scanf_float+0x218>
 8007d2c:	2b59      	cmp	r3, #89	; 0x59
 8007d2e:	d199      	bne.n	8007c64 <_scanf_float+0x60>
 8007d30:	2d07      	cmp	r5, #7
 8007d32:	d197      	bne.n	8007c64 <_scanf_float+0x60>
 8007d34:	2508      	movs	r5, #8
 8007d36:	e029      	b.n	8007d8c <_scanf_float+0x188>
 8007d38:	2b74      	cmp	r3, #116	; 0x74
 8007d3a:	d06f      	beq.n	8007e1c <_scanf_float+0x218>
 8007d3c:	2b79      	cmp	r3, #121	; 0x79
 8007d3e:	e7f6      	b.n	8007d2e <_scanf_float+0x12a>
 8007d40:	6821      	ldr	r1, [r4, #0]
 8007d42:	05c8      	lsls	r0, r1, #23
 8007d44:	d51a      	bpl.n	8007d7c <_scanf_float+0x178>
 8007d46:	9b02      	ldr	r3, [sp, #8]
 8007d48:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007d4c:	6021      	str	r1, [r4, #0]
 8007d4e:	f109 0901 	add.w	r9, r9, #1
 8007d52:	b11b      	cbz	r3, 8007d5c <_scanf_float+0x158>
 8007d54:	3b01      	subs	r3, #1
 8007d56:	3201      	adds	r2, #1
 8007d58:	9302      	str	r3, [sp, #8]
 8007d5a:	60a2      	str	r2, [r4, #8]
 8007d5c:	68a3      	ldr	r3, [r4, #8]
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	60a3      	str	r3, [r4, #8]
 8007d62:	6923      	ldr	r3, [r4, #16]
 8007d64:	3301      	adds	r3, #1
 8007d66:	6123      	str	r3, [r4, #16]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	607b      	str	r3, [r7, #4]
 8007d70:	f340 8084 	ble.w	8007e7c <_scanf_float+0x278>
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	3301      	adds	r3, #1
 8007d78:	603b      	str	r3, [r7, #0]
 8007d7a:	e766      	b.n	8007c4a <_scanf_float+0x46>
 8007d7c:	eb1a 0f05 	cmn.w	sl, r5
 8007d80:	f47f af70 	bne.w	8007c64 <_scanf_float+0x60>
 8007d84:	6822      	ldr	r2, [r4, #0]
 8007d86:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007d8a:	6022      	str	r2, [r4, #0]
 8007d8c:	f806 3b01 	strb.w	r3, [r6], #1
 8007d90:	e7e4      	b.n	8007d5c <_scanf_float+0x158>
 8007d92:	6822      	ldr	r2, [r4, #0]
 8007d94:	0610      	lsls	r0, r2, #24
 8007d96:	f57f af65 	bpl.w	8007c64 <_scanf_float+0x60>
 8007d9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d9e:	e7f4      	b.n	8007d8a <_scanf_float+0x186>
 8007da0:	f1ba 0f00 	cmp.w	sl, #0
 8007da4:	d10e      	bne.n	8007dc4 <_scanf_float+0x1c0>
 8007da6:	f1b9 0f00 	cmp.w	r9, #0
 8007daa:	d10e      	bne.n	8007dca <_scanf_float+0x1c6>
 8007dac:	6822      	ldr	r2, [r4, #0]
 8007dae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007db2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007db6:	d108      	bne.n	8007dca <_scanf_float+0x1c6>
 8007db8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007dbc:	6022      	str	r2, [r4, #0]
 8007dbe:	f04f 0a01 	mov.w	sl, #1
 8007dc2:	e7e3      	b.n	8007d8c <_scanf_float+0x188>
 8007dc4:	f1ba 0f02 	cmp.w	sl, #2
 8007dc8:	d055      	beq.n	8007e76 <_scanf_float+0x272>
 8007dca:	2d01      	cmp	r5, #1
 8007dcc:	d002      	beq.n	8007dd4 <_scanf_float+0x1d0>
 8007dce:	2d04      	cmp	r5, #4
 8007dd0:	f47f af48 	bne.w	8007c64 <_scanf_float+0x60>
 8007dd4:	3501      	adds	r5, #1
 8007dd6:	b2ed      	uxtb	r5, r5
 8007dd8:	e7d8      	b.n	8007d8c <_scanf_float+0x188>
 8007dda:	f1ba 0f01 	cmp.w	sl, #1
 8007dde:	f47f af41 	bne.w	8007c64 <_scanf_float+0x60>
 8007de2:	f04f 0a02 	mov.w	sl, #2
 8007de6:	e7d1      	b.n	8007d8c <_scanf_float+0x188>
 8007de8:	b97d      	cbnz	r5, 8007e0a <_scanf_float+0x206>
 8007dea:	f1b9 0f00 	cmp.w	r9, #0
 8007dee:	f47f af3c 	bne.w	8007c6a <_scanf_float+0x66>
 8007df2:	6822      	ldr	r2, [r4, #0]
 8007df4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007df8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007dfc:	f47f af39 	bne.w	8007c72 <_scanf_float+0x6e>
 8007e00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007e04:	6022      	str	r2, [r4, #0]
 8007e06:	2501      	movs	r5, #1
 8007e08:	e7c0      	b.n	8007d8c <_scanf_float+0x188>
 8007e0a:	2d03      	cmp	r5, #3
 8007e0c:	d0e2      	beq.n	8007dd4 <_scanf_float+0x1d0>
 8007e0e:	2d05      	cmp	r5, #5
 8007e10:	e7de      	b.n	8007dd0 <_scanf_float+0x1cc>
 8007e12:	2d02      	cmp	r5, #2
 8007e14:	f47f af26 	bne.w	8007c64 <_scanf_float+0x60>
 8007e18:	2503      	movs	r5, #3
 8007e1a:	e7b7      	b.n	8007d8c <_scanf_float+0x188>
 8007e1c:	2d06      	cmp	r5, #6
 8007e1e:	f47f af21 	bne.w	8007c64 <_scanf_float+0x60>
 8007e22:	2507      	movs	r5, #7
 8007e24:	e7b2      	b.n	8007d8c <_scanf_float+0x188>
 8007e26:	6822      	ldr	r2, [r4, #0]
 8007e28:	0591      	lsls	r1, r2, #22
 8007e2a:	f57f af1b 	bpl.w	8007c64 <_scanf_float+0x60>
 8007e2e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007e32:	6022      	str	r2, [r4, #0]
 8007e34:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e38:	e7a8      	b.n	8007d8c <_scanf_float+0x188>
 8007e3a:	6822      	ldr	r2, [r4, #0]
 8007e3c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007e40:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007e44:	d006      	beq.n	8007e54 <_scanf_float+0x250>
 8007e46:	0550      	lsls	r0, r2, #21
 8007e48:	f57f af0c 	bpl.w	8007c64 <_scanf_float+0x60>
 8007e4c:	f1b9 0f00 	cmp.w	r9, #0
 8007e50:	f43f af0f 	beq.w	8007c72 <_scanf_float+0x6e>
 8007e54:	0591      	lsls	r1, r2, #22
 8007e56:	bf58      	it	pl
 8007e58:	9901      	ldrpl	r1, [sp, #4]
 8007e5a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007e5e:	bf58      	it	pl
 8007e60:	eba9 0101 	subpl.w	r1, r9, r1
 8007e64:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007e68:	bf58      	it	pl
 8007e6a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007e6e:	6022      	str	r2, [r4, #0]
 8007e70:	f04f 0900 	mov.w	r9, #0
 8007e74:	e78a      	b.n	8007d8c <_scanf_float+0x188>
 8007e76:	f04f 0a03 	mov.w	sl, #3
 8007e7a:	e787      	b.n	8007d8c <_scanf_float+0x188>
 8007e7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007e80:	4639      	mov	r1, r7
 8007e82:	4640      	mov	r0, r8
 8007e84:	4798      	blx	r3
 8007e86:	2800      	cmp	r0, #0
 8007e88:	f43f aedf 	beq.w	8007c4a <_scanf_float+0x46>
 8007e8c:	e6ea      	b.n	8007c64 <_scanf_float+0x60>
 8007e8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e96:	463a      	mov	r2, r7
 8007e98:	4640      	mov	r0, r8
 8007e9a:	4798      	blx	r3
 8007e9c:	6923      	ldr	r3, [r4, #16]
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	6123      	str	r3, [r4, #16]
 8007ea2:	e6ec      	b.n	8007c7e <_scanf_float+0x7a>
 8007ea4:	1e6b      	subs	r3, r5, #1
 8007ea6:	2b06      	cmp	r3, #6
 8007ea8:	d825      	bhi.n	8007ef6 <_scanf_float+0x2f2>
 8007eaa:	2d02      	cmp	r5, #2
 8007eac:	d836      	bhi.n	8007f1c <_scanf_float+0x318>
 8007eae:	455e      	cmp	r6, fp
 8007eb0:	f67f aee8 	bls.w	8007c84 <_scanf_float+0x80>
 8007eb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007eb8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ebc:	463a      	mov	r2, r7
 8007ebe:	4640      	mov	r0, r8
 8007ec0:	4798      	blx	r3
 8007ec2:	6923      	ldr	r3, [r4, #16]
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	6123      	str	r3, [r4, #16]
 8007ec8:	e7f1      	b.n	8007eae <_scanf_float+0x2aa>
 8007eca:	9802      	ldr	r0, [sp, #8]
 8007ecc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ed0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007ed4:	9002      	str	r0, [sp, #8]
 8007ed6:	463a      	mov	r2, r7
 8007ed8:	4640      	mov	r0, r8
 8007eda:	4798      	blx	r3
 8007edc:	6923      	ldr	r3, [r4, #16]
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	6123      	str	r3, [r4, #16]
 8007ee2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ee6:	fa5f fa8a 	uxtb.w	sl, sl
 8007eea:	f1ba 0f02 	cmp.w	sl, #2
 8007eee:	d1ec      	bne.n	8007eca <_scanf_float+0x2c6>
 8007ef0:	3d03      	subs	r5, #3
 8007ef2:	b2ed      	uxtb	r5, r5
 8007ef4:	1b76      	subs	r6, r6, r5
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	05da      	lsls	r2, r3, #23
 8007efa:	d52f      	bpl.n	8007f5c <_scanf_float+0x358>
 8007efc:	055b      	lsls	r3, r3, #21
 8007efe:	d510      	bpl.n	8007f22 <_scanf_float+0x31e>
 8007f00:	455e      	cmp	r6, fp
 8007f02:	f67f aebf 	bls.w	8007c84 <_scanf_float+0x80>
 8007f06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f0e:	463a      	mov	r2, r7
 8007f10:	4640      	mov	r0, r8
 8007f12:	4798      	blx	r3
 8007f14:	6923      	ldr	r3, [r4, #16]
 8007f16:	3b01      	subs	r3, #1
 8007f18:	6123      	str	r3, [r4, #16]
 8007f1a:	e7f1      	b.n	8007f00 <_scanf_float+0x2fc>
 8007f1c:	46aa      	mov	sl, r5
 8007f1e:	9602      	str	r6, [sp, #8]
 8007f20:	e7df      	b.n	8007ee2 <_scanf_float+0x2de>
 8007f22:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007f26:	6923      	ldr	r3, [r4, #16]
 8007f28:	2965      	cmp	r1, #101	; 0x65
 8007f2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f2e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007f32:	6123      	str	r3, [r4, #16]
 8007f34:	d00c      	beq.n	8007f50 <_scanf_float+0x34c>
 8007f36:	2945      	cmp	r1, #69	; 0x45
 8007f38:	d00a      	beq.n	8007f50 <_scanf_float+0x34c>
 8007f3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f3e:	463a      	mov	r2, r7
 8007f40:	4640      	mov	r0, r8
 8007f42:	4798      	blx	r3
 8007f44:	6923      	ldr	r3, [r4, #16]
 8007f46:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	1eb5      	subs	r5, r6, #2
 8007f4e:	6123      	str	r3, [r4, #16]
 8007f50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f54:	463a      	mov	r2, r7
 8007f56:	4640      	mov	r0, r8
 8007f58:	4798      	blx	r3
 8007f5a:	462e      	mov	r6, r5
 8007f5c:	6825      	ldr	r5, [r4, #0]
 8007f5e:	f015 0510 	ands.w	r5, r5, #16
 8007f62:	d14d      	bne.n	8008000 <_scanf_float+0x3fc>
 8007f64:	7035      	strb	r5, [r6, #0]
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f70:	d11a      	bne.n	8007fa8 <_scanf_float+0x3a4>
 8007f72:	9b01      	ldr	r3, [sp, #4]
 8007f74:	454b      	cmp	r3, r9
 8007f76:	eba3 0209 	sub.w	r2, r3, r9
 8007f7a:	d122      	bne.n	8007fc2 <_scanf_float+0x3be>
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	4659      	mov	r1, fp
 8007f80:	4640      	mov	r0, r8
 8007f82:	f000 fe5b 	bl	8008c3c <_strtod_r>
 8007f86:	9b03      	ldr	r3, [sp, #12]
 8007f88:	6821      	ldr	r1, [r4, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f011 0f02 	tst.w	r1, #2
 8007f90:	f103 0204 	add.w	r2, r3, #4
 8007f94:	d020      	beq.n	8007fd8 <_scanf_float+0x3d4>
 8007f96:	9903      	ldr	r1, [sp, #12]
 8007f98:	600a      	str	r2, [r1, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	ed83 0b00 	vstr	d0, [r3]
 8007fa0:	68e3      	ldr	r3, [r4, #12]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	60e3      	str	r3, [r4, #12]
 8007fa6:	e66e      	b.n	8007c86 <_scanf_float+0x82>
 8007fa8:	9b04      	ldr	r3, [sp, #16]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d0e6      	beq.n	8007f7c <_scanf_float+0x378>
 8007fae:	9905      	ldr	r1, [sp, #20]
 8007fb0:	230a      	movs	r3, #10
 8007fb2:	462a      	mov	r2, r5
 8007fb4:	3101      	adds	r1, #1
 8007fb6:	4640      	mov	r0, r8
 8007fb8:	f000 feca 	bl	8008d50 <_strtol_r>
 8007fbc:	9b04      	ldr	r3, [sp, #16]
 8007fbe:	9e05      	ldr	r6, [sp, #20]
 8007fc0:	1ac2      	subs	r2, r0, r3
 8007fc2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007fc6:	429e      	cmp	r6, r3
 8007fc8:	bf28      	it	cs
 8007fca:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007fce:	490d      	ldr	r1, [pc, #52]	; (8008004 <_scanf_float+0x400>)
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	f000 f821 	bl	8008018 <siprintf>
 8007fd6:	e7d1      	b.n	8007f7c <_scanf_float+0x378>
 8007fd8:	f011 0f04 	tst.w	r1, #4
 8007fdc:	9903      	ldr	r1, [sp, #12]
 8007fde:	600a      	str	r2, [r1, #0]
 8007fe0:	d1db      	bne.n	8007f9a <_scanf_float+0x396>
 8007fe2:	eeb4 0b40 	vcmp.f64	d0, d0
 8007fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fea:	681e      	ldr	r6, [r3, #0]
 8007fec:	d705      	bvc.n	8007ffa <_scanf_float+0x3f6>
 8007fee:	4806      	ldr	r0, [pc, #24]	; (8008008 <_scanf_float+0x404>)
 8007ff0:	f000 f80c 	bl	800800c <nanf>
 8007ff4:	ed86 0a00 	vstr	s0, [r6]
 8007ff8:	e7d2      	b.n	8007fa0 <_scanf_float+0x39c>
 8007ffa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007ffe:	e7f9      	b.n	8007ff4 <_scanf_float+0x3f0>
 8008000:	2500      	movs	r5, #0
 8008002:	e640      	b.n	8007c86 <_scanf_float+0x82>
 8008004:	0800bb4c 	.word	0x0800bb4c
 8008008:	0800bf68 	.word	0x0800bf68

0800800c <nanf>:
 800800c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008014 <nanf+0x8>
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	7fc00000 	.word	0x7fc00000

08008018 <siprintf>:
 8008018:	b40e      	push	{r1, r2, r3}
 800801a:	b500      	push	{lr}
 800801c:	b09c      	sub	sp, #112	; 0x70
 800801e:	ab1d      	add	r3, sp, #116	; 0x74
 8008020:	9002      	str	r0, [sp, #8]
 8008022:	9006      	str	r0, [sp, #24]
 8008024:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008028:	4809      	ldr	r0, [pc, #36]	; (8008050 <siprintf+0x38>)
 800802a:	9107      	str	r1, [sp, #28]
 800802c:	9104      	str	r1, [sp, #16]
 800802e:	4909      	ldr	r1, [pc, #36]	; (8008054 <siprintf+0x3c>)
 8008030:	f853 2b04 	ldr.w	r2, [r3], #4
 8008034:	9105      	str	r1, [sp, #20]
 8008036:	6800      	ldr	r0, [r0, #0]
 8008038:	9301      	str	r3, [sp, #4]
 800803a:	a902      	add	r1, sp, #8
 800803c:	f002 fe08 	bl	800ac50 <_svfiprintf_r>
 8008040:	9b02      	ldr	r3, [sp, #8]
 8008042:	2200      	movs	r2, #0
 8008044:	701a      	strb	r2, [r3, #0]
 8008046:	b01c      	add	sp, #112	; 0x70
 8008048:	f85d eb04 	ldr.w	lr, [sp], #4
 800804c:	b003      	add	sp, #12
 800804e:	4770      	bx	lr
 8008050:	24000010 	.word	0x24000010
 8008054:	ffff0208 	.word	0xffff0208

08008058 <sulp>:
 8008058:	b570      	push	{r4, r5, r6, lr}
 800805a:	4604      	mov	r4, r0
 800805c:	460d      	mov	r5, r1
 800805e:	4616      	mov	r6, r2
 8008060:	ec45 4b10 	vmov	d0, r4, r5
 8008064:	f002 fb8e 	bl	800a784 <__ulp>
 8008068:	b17e      	cbz	r6, 800808a <sulp+0x32>
 800806a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800806e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008072:	2b00      	cmp	r3, #0
 8008074:	dd09      	ble.n	800808a <sulp+0x32>
 8008076:	051b      	lsls	r3, r3, #20
 8008078:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800807c:	2000      	movs	r0, #0
 800807e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8008082:	ec41 0b17 	vmov	d7, r0, r1
 8008086:	ee20 0b07 	vmul.f64	d0, d0, d7
 800808a:	bd70      	pop	{r4, r5, r6, pc}
 800808c:	0000      	movs	r0, r0
	...

08008090 <_strtod_l>:
 8008090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008094:	ed2d 8b0c 	vpush	{d8-d13}
 8008098:	b09d      	sub	sp, #116	; 0x74
 800809a:	461f      	mov	r7, r3
 800809c:	2300      	movs	r3, #0
 800809e:	9318      	str	r3, [sp, #96]	; 0x60
 80080a0:	4ba6      	ldr	r3, [pc, #664]	; (800833c <_strtod_l+0x2ac>)
 80080a2:	9213      	str	r2, [sp, #76]	; 0x4c
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	9308      	str	r3, [sp, #32]
 80080a8:	4604      	mov	r4, r0
 80080aa:	4618      	mov	r0, r3
 80080ac:	468a      	mov	sl, r1
 80080ae:	f7f8 f917 	bl	80002e0 <strlen>
 80080b2:	f04f 0800 	mov.w	r8, #0
 80080b6:	4605      	mov	r5, r0
 80080b8:	f04f 0900 	mov.w	r9, #0
 80080bc:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80080c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080c2:	781a      	ldrb	r2, [r3, #0]
 80080c4:	2a2b      	cmp	r2, #43	; 0x2b
 80080c6:	d04d      	beq.n	8008164 <_strtod_l+0xd4>
 80080c8:	d83a      	bhi.n	8008140 <_strtod_l+0xb0>
 80080ca:	2a0d      	cmp	r2, #13
 80080cc:	d833      	bhi.n	8008136 <_strtod_l+0xa6>
 80080ce:	2a08      	cmp	r2, #8
 80080d0:	d833      	bhi.n	800813a <_strtod_l+0xaa>
 80080d2:	2a00      	cmp	r2, #0
 80080d4:	d03d      	beq.n	8008152 <_strtod_l+0xc2>
 80080d6:	2300      	movs	r3, #0
 80080d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80080da:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80080dc:	7833      	ldrb	r3, [r6, #0]
 80080de:	2b30      	cmp	r3, #48	; 0x30
 80080e0:	f040 80b6 	bne.w	8008250 <_strtod_l+0x1c0>
 80080e4:	7873      	ldrb	r3, [r6, #1]
 80080e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80080ea:	2b58      	cmp	r3, #88	; 0x58
 80080ec:	d16d      	bne.n	80081ca <_strtod_l+0x13a>
 80080ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080f0:	9301      	str	r3, [sp, #4]
 80080f2:	ab18      	add	r3, sp, #96	; 0x60
 80080f4:	9702      	str	r7, [sp, #8]
 80080f6:	9300      	str	r3, [sp, #0]
 80080f8:	4a91      	ldr	r2, [pc, #580]	; (8008340 <_strtod_l+0x2b0>)
 80080fa:	ab19      	add	r3, sp, #100	; 0x64
 80080fc:	a917      	add	r1, sp, #92	; 0x5c
 80080fe:	4620      	mov	r0, r4
 8008100:	f001 fca0 	bl	8009a44 <__gethex>
 8008104:	f010 0507 	ands.w	r5, r0, #7
 8008108:	4607      	mov	r7, r0
 800810a:	d005      	beq.n	8008118 <_strtod_l+0x88>
 800810c:	2d06      	cmp	r5, #6
 800810e:	d12b      	bne.n	8008168 <_strtod_l+0xd8>
 8008110:	3601      	adds	r6, #1
 8008112:	2300      	movs	r3, #0
 8008114:	9617      	str	r6, [sp, #92]	; 0x5c
 8008116:	930b      	str	r3, [sp, #44]	; 0x2c
 8008118:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800811a:	2b00      	cmp	r3, #0
 800811c:	f040 856e 	bne.w	8008bfc <_strtod_l+0xb6c>
 8008120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008122:	b1e3      	cbz	r3, 800815e <_strtod_l+0xce>
 8008124:	ec49 8b17 	vmov	d7, r8, r9
 8008128:	eeb1 0b47 	vneg.f64	d0, d7
 800812c:	b01d      	add	sp, #116	; 0x74
 800812e:	ecbd 8b0c 	vpop	{d8-d13}
 8008132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008136:	2a20      	cmp	r2, #32
 8008138:	d1cd      	bne.n	80080d6 <_strtod_l+0x46>
 800813a:	3301      	adds	r3, #1
 800813c:	9317      	str	r3, [sp, #92]	; 0x5c
 800813e:	e7bf      	b.n	80080c0 <_strtod_l+0x30>
 8008140:	2a2d      	cmp	r2, #45	; 0x2d
 8008142:	d1c8      	bne.n	80080d6 <_strtod_l+0x46>
 8008144:	2201      	movs	r2, #1
 8008146:	920b      	str	r2, [sp, #44]	; 0x2c
 8008148:	1c5a      	adds	r2, r3, #1
 800814a:	9217      	str	r2, [sp, #92]	; 0x5c
 800814c:	785b      	ldrb	r3, [r3, #1]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1c3      	bne.n	80080da <_strtod_l+0x4a>
 8008152:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008154:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8008158:	2b00      	cmp	r3, #0
 800815a:	f040 854d 	bne.w	8008bf8 <_strtod_l+0xb68>
 800815e:	ec49 8b10 	vmov	d0, r8, r9
 8008162:	e7e3      	b.n	800812c <_strtod_l+0x9c>
 8008164:	2200      	movs	r2, #0
 8008166:	e7ee      	b.n	8008146 <_strtod_l+0xb6>
 8008168:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800816a:	b13a      	cbz	r2, 800817c <_strtod_l+0xec>
 800816c:	2135      	movs	r1, #53	; 0x35
 800816e:	a81a      	add	r0, sp, #104	; 0x68
 8008170:	f002 fc14 	bl	800a99c <__copybits>
 8008174:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008176:	4620      	mov	r0, r4
 8008178:	f001 ffd8 	bl	800a12c <_Bfree>
 800817c:	3d01      	subs	r5, #1
 800817e:	2d05      	cmp	r5, #5
 8008180:	d807      	bhi.n	8008192 <_strtod_l+0x102>
 8008182:	e8df f005 	tbb	[pc, r5]
 8008186:	0b0e      	.short	0x0b0e
 8008188:	030e1d18 	.word	0x030e1d18
 800818c:	f04f 0900 	mov.w	r9, #0
 8008190:	46c8      	mov	r8, r9
 8008192:	073b      	lsls	r3, r7, #28
 8008194:	d5c0      	bpl.n	8008118 <_strtod_l+0x88>
 8008196:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800819a:	e7bd      	b.n	8008118 <_strtod_l+0x88>
 800819c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 80081a0:	e7f7      	b.n	8008192 <_strtod_l+0x102>
 80081a2:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 80081a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80081a8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80081ac:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80081b0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80081b4:	e7ed      	b.n	8008192 <_strtod_l+0x102>
 80081b6:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8008344 <_strtod_l+0x2b4>
 80081ba:	f04f 0800 	mov.w	r8, #0
 80081be:	e7e8      	b.n	8008192 <_strtod_l+0x102>
 80081c0:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80081c4:	f04f 38ff 	mov.w	r8, #4294967295
 80081c8:	e7e3      	b.n	8008192 <_strtod_l+0x102>
 80081ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081cc:	1c5a      	adds	r2, r3, #1
 80081ce:	9217      	str	r2, [sp, #92]	; 0x5c
 80081d0:	785b      	ldrb	r3, [r3, #1]
 80081d2:	2b30      	cmp	r3, #48	; 0x30
 80081d4:	d0f9      	beq.n	80081ca <_strtod_l+0x13a>
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d09e      	beq.n	8008118 <_strtod_l+0x88>
 80081da:	2301      	movs	r3, #1
 80081dc:	9306      	str	r3, [sp, #24]
 80081de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081e0:	930c      	str	r3, [sp, #48]	; 0x30
 80081e2:	2300      	movs	r3, #0
 80081e4:	9304      	str	r3, [sp, #16]
 80081e6:	930a      	str	r3, [sp, #40]	; 0x28
 80081e8:	461e      	mov	r6, r3
 80081ea:	220a      	movs	r2, #10
 80081ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80081ee:	f890 b000 	ldrb.w	fp, [r0]
 80081f2:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 80081f6:	b2d9      	uxtb	r1, r3
 80081f8:	2909      	cmp	r1, #9
 80081fa:	d92b      	bls.n	8008254 <_strtod_l+0x1c4>
 80081fc:	9908      	ldr	r1, [sp, #32]
 80081fe:	462a      	mov	r2, r5
 8008200:	f002 fe3e 	bl	800ae80 <strncmp>
 8008204:	2800      	cmp	r0, #0
 8008206:	d035      	beq.n	8008274 <_strtod_l+0x1e4>
 8008208:	2000      	movs	r0, #0
 800820a:	465a      	mov	r2, fp
 800820c:	4633      	mov	r3, r6
 800820e:	4683      	mov	fp, r0
 8008210:	4601      	mov	r1, r0
 8008212:	2a65      	cmp	r2, #101	; 0x65
 8008214:	d001      	beq.n	800821a <_strtod_l+0x18a>
 8008216:	2a45      	cmp	r2, #69	; 0x45
 8008218:	d118      	bne.n	800824c <_strtod_l+0x1bc>
 800821a:	b91b      	cbnz	r3, 8008224 <_strtod_l+0x194>
 800821c:	9b06      	ldr	r3, [sp, #24]
 800821e:	4303      	orrs	r3, r0
 8008220:	d097      	beq.n	8008152 <_strtod_l+0xc2>
 8008222:	2300      	movs	r3, #0
 8008224:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8008228:	f10a 0201 	add.w	r2, sl, #1
 800822c:	9217      	str	r2, [sp, #92]	; 0x5c
 800822e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8008232:	2a2b      	cmp	r2, #43	; 0x2b
 8008234:	d077      	beq.n	8008326 <_strtod_l+0x296>
 8008236:	2a2d      	cmp	r2, #45	; 0x2d
 8008238:	d07d      	beq.n	8008336 <_strtod_l+0x2a6>
 800823a:	f04f 0e00 	mov.w	lr, #0
 800823e:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008242:	2d09      	cmp	r5, #9
 8008244:	f240 8084 	bls.w	8008350 <_strtod_l+0x2c0>
 8008248:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800824c:	2500      	movs	r5, #0
 800824e:	e09f      	b.n	8008390 <_strtod_l+0x300>
 8008250:	2300      	movs	r3, #0
 8008252:	e7c3      	b.n	80081dc <_strtod_l+0x14c>
 8008254:	2e08      	cmp	r6, #8
 8008256:	bfd5      	itete	le
 8008258:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800825a:	9904      	ldrgt	r1, [sp, #16]
 800825c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008260:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008264:	f100 0001 	add.w	r0, r0, #1
 8008268:	bfd4      	ite	le
 800826a:	930a      	strle	r3, [sp, #40]	; 0x28
 800826c:	9304      	strgt	r3, [sp, #16]
 800826e:	3601      	adds	r6, #1
 8008270:	9017      	str	r0, [sp, #92]	; 0x5c
 8008272:	e7bb      	b.n	80081ec <_strtod_l+0x15c>
 8008274:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008276:	195a      	adds	r2, r3, r5
 8008278:	9217      	str	r2, [sp, #92]	; 0x5c
 800827a:	5d5a      	ldrb	r2, [r3, r5]
 800827c:	b3ae      	cbz	r6, 80082ea <_strtod_l+0x25a>
 800827e:	4683      	mov	fp, r0
 8008280:	4633      	mov	r3, r6
 8008282:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008286:	2909      	cmp	r1, #9
 8008288:	d912      	bls.n	80082b0 <_strtod_l+0x220>
 800828a:	2101      	movs	r1, #1
 800828c:	e7c1      	b.n	8008212 <_strtod_l+0x182>
 800828e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008290:	1c5a      	adds	r2, r3, #1
 8008292:	9217      	str	r2, [sp, #92]	; 0x5c
 8008294:	785a      	ldrb	r2, [r3, #1]
 8008296:	3001      	adds	r0, #1
 8008298:	2a30      	cmp	r2, #48	; 0x30
 800829a:	d0f8      	beq.n	800828e <_strtod_l+0x1fe>
 800829c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80082a0:	2b08      	cmp	r3, #8
 80082a2:	f200 84b0 	bhi.w	8008c06 <_strtod_l+0xb76>
 80082a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082a8:	930c      	str	r3, [sp, #48]	; 0x30
 80082aa:	4683      	mov	fp, r0
 80082ac:	2000      	movs	r0, #0
 80082ae:	4603      	mov	r3, r0
 80082b0:	3a30      	subs	r2, #48	; 0x30
 80082b2:	f100 0101 	add.w	r1, r0, #1
 80082b6:	d012      	beq.n	80082de <_strtod_l+0x24e>
 80082b8:	448b      	add	fp, r1
 80082ba:	eb00 0c03 	add.w	ip, r0, r3
 80082be:	4619      	mov	r1, r3
 80082c0:	250a      	movs	r5, #10
 80082c2:	4561      	cmp	r1, ip
 80082c4:	d113      	bne.n	80082ee <_strtod_l+0x25e>
 80082c6:	1819      	adds	r1, r3, r0
 80082c8:	2908      	cmp	r1, #8
 80082ca:	f103 0301 	add.w	r3, r3, #1
 80082ce:	4403      	add	r3, r0
 80082d0:	dc1d      	bgt.n	800830e <_strtod_l+0x27e>
 80082d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80082d4:	210a      	movs	r1, #10
 80082d6:	fb01 2200 	mla	r2, r1, r0, r2
 80082da:	920a      	str	r2, [sp, #40]	; 0x28
 80082dc:	2100      	movs	r1, #0
 80082de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80082e0:	1c50      	adds	r0, r2, #1
 80082e2:	9017      	str	r0, [sp, #92]	; 0x5c
 80082e4:	7852      	ldrb	r2, [r2, #1]
 80082e6:	4608      	mov	r0, r1
 80082e8:	e7cb      	b.n	8008282 <_strtod_l+0x1f2>
 80082ea:	4630      	mov	r0, r6
 80082ec:	e7d4      	b.n	8008298 <_strtod_l+0x208>
 80082ee:	2908      	cmp	r1, #8
 80082f0:	dc04      	bgt.n	80082fc <_strtod_l+0x26c>
 80082f2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80082f4:	436f      	muls	r7, r5
 80082f6:	970a      	str	r7, [sp, #40]	; 0x28
 80082f8:	3101      	adds	r1, #1
 80082fa:	e7e2      	b.n	80082c2 <_strtod_l+0x232>
 80082fc:	f101 0e01 	add.w	lr, r1, #1
 8008300:	f1be 0f10 	cmp.w	lr, #16
 8008304:	bfde      	ittt	le
 8008306:	9f04      	ldrle	r7, [sp, #16]
 8008308:	436f      	mulle	r7, r5
 800830a:	9704      	strle	r7, [sp, #16]
 800830c:	e7f4      	b.n	80082f8 <_strtod_l+0x268>
 800830e:	2b10      	cmp	r3, #16
 8008310:	bfdf      	itttt	le
 8008312:	9804      	ldrle	r0, [sp, #16]
 8008314:	210a      	movle	r1, #10
 8008316:	fb01 2200 	mlale	r2, r1, r0, r2
 800831a:	9204      	strle	r2, [sp, #16]
 800831c:	e7de      	b.n	80082dc <_strtod_l+0x24c>
 800831e:	f04f 0b00 	mov.w	fp, #0
 8008322:	2101      	movs	r1, #1
 8008324:	e77a      	b.n	800821c <_strtod_l+0x18c>
 8008326:	f04f 0e00 	mov.w	lr, #0
 800832a:	f10a 0202 	add.w	r2, sl, #2
 800832e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008330:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8008334:	e783      	b.n	800823e <_strtod_l+0x1ae>
 8008336:	f04f 0e01 	mov.w	lr, #1
 800833a:	e7f6      	b.n	800832a <_strtod_l+0x29a>
 800833c:	0800bda8 	.word	0x0800bda8
 8008340:	0800bb54 	.word	0x0800bb54
 8008344:	7ff00000 	.word	0x7ff00000
 8008348:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800834a:	1c55      	adds	r5, r2, #1
 800834c:	9517      	str	r5, [sp, #92]	; 0x5c
 800834e:	7852      	ldrb	r2, [r2, #1]
 8008350:	2a30      	cmp	r2, #48	; 0x30
 8008352:	d0f9      	beq.n	8008348 <_strtod_l+0x2b8>
 8008354:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8008358:	2d08      	cmp	r5, #8
 800835a:	f63f af77 	bhi.w	800824c <_strtod_l+0x1bc>
 800835e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008362:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008364:	9208      	str	r2, [sp, #32]
 8008366:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008368:	1c55      	adds	r5, r2, #1
 800836a:	9517      	str	r5, [sp, #92]	; 0x5c
 800836c:	7852      	ldrb	r2, [r2, #1]
 800836e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8008372:	2f09      	cmp	r7, #9
 8008374:	d937      	bls.n	80083e6 <_strtod_l+0x356>
 8008376:	9f08      	ldr	r7, [sp, #32]
 8008378:	1bed      	subs	r5, r5, r7
 800837a:	2d08      	cmp	r5, #8
 800837c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008380:	dc02      	bgt.n	8008388 <_strtod_l+0x2f8>
 8008382:	4565      	cmp	r5, ip
 8008384:	bfa8      	it	ge
 8008386:	4665      	movge	r5, ip
 8008388:	f1be 0f00 	cmp.w	lr, #0
 800838c:	d000      	beq.n	8008390 <_strtod_l+0x300>
 800838e:	426d      	negs	r5, r5
 8008390:	2b00      	cmp	r3, #0
 8008392:	d14f      	bne.n	8008434 <_strtod_l+0x3a4>
 8008394:	9b06      	ldr	r3, [sp, #24]
 8008396:	4303      	orrs	r3, r0
 8008398:	f47f aebe 	bne.w	8008118 <_strtod_l+0x88>
 800839c:	2900      	cmp	r1, #0
 800839e:	f47f aed8 	bne.w	8008152 <_strtod_l+0xc2>
 80083a2:	2a69      	cmp	r2, #105	; 0x69
 80083a4:	d027      	beq.n	80083f6 <_strtod_l+0x366>
 80083a6:	dc24      	bgt.n	80083f2 <_strtod_l+0x362>
 80083a8:	2a49      	cmp	r2, #73	; 0x49
 80083aa:	d024      	beq.n	80083f6 <_strtod_l+0x366>
 80083ac:	2a4e      	cmp	r2, #78	; 0x4e
 80083ae:	f47f aed0 	bne.w	8008152 <_strtod_l+0xc2>
 80083b2:	499b      	ldr	r1, [pc, #620]	; (8008620 <_strtod_l+0x590>)
 80083b4:	a817      	add	r0, sp, #92	; 0x5c
 80083b6:	f001 fd9d 	bl	8009ef4 <__match>
 80083ba:	2800      	cmp	r0, #0
 80083bc:	f43f aec9 	beq.w	8008152 <_strtod_l+0xc2>
 80083c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	2b28      	cmp	r3, #40	; 0x28
 80083c6:	d12d      	bne.n	8008424 <_strtod_l+0x394>
 80083c8:	4996      	ldr	r1, [pc, #600]	; (8008624 <_strtod_l+0x594>)
 80083ca:	aa1a      	add	r2, sp, #104	; 0x68
 80083cc:	a817      	add	r0, sp, #92	; 0x5c
 80083ce:	f001 fda5 	bl	8009f1c <__hexnan>
 80083d2:	2805      	cmp	r0, #5
 80083d4:	d126      	bne.n	8008424 <_strtod_l+0x394>
 80083d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083d8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80083dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80083e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80083e4:	e698      	b.n	8008118 <_strtod_l+0x88>
 80083e6:	250a      	movs	r5, #10
 80083e8:	fb05 250c 	mla	r5, r5, ip, r2
 80083ec:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80083f0:	e7b9      	b.n	8008366 <_strtod_l+0x2d6>
 80083f2:	2a6e      	cmp	r2, #110	; 0x6e
 80083f4:	e7db      	b.n	80083ae <_strtod_l+0x31e>
 80083f6:	498c      	ldr	r1, [pc, #560]	; (8008628 <_strtod_l+0x598>)
 80083f8:	a817      	add	r0, sp, #92	; 0x5c
 80083fa:	f001 fd7b 	bl	8009ef4 <__match>
 80083fe:	2800      	cmp	r0, #0
 8008400:	f43f aea7 	beq.w	8008152 <_strtod_l+0xc2>
 8008404:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008406:	4989      	ldr	r1, [pc, #548]	; (800862c <_strtod_l+0x59c>)
 8008408:	3b01      	subs	r3, #1
 800840a:	a817      	add	r0, sp, #92	; 0x5c
 800840c:	9317      	str	r3, [sp, #92]	; 0x5c
 800840e:	f001 fd71 	bl	8009ef4 <__match>
 8008412:	b910      	cbnz	r0, 800841a <_strtod_l+0x38a>
 8008414:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008416:	3301      	adds	r3, #1
 8008418:	9317      	str	r3, [sp, #92]	; 0x5c
 800841a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8008640 <_strtod_l+0x5b0>
 800841e:	f04f 0800 	mov.w	r8, #0
 8008422:	e679      	b.n	8008118 <_strtod_l+0x88>
 8008424:	4882      	ldr	r0, [pc, #520]	; (8008630 <_strtod_l+0x5a0>)
 8008426:	f002 fd13 	bl	800ae50 <nan>
 800842a:	ed8d 0b04 	vstr	d0, [sp, #16]
 800842e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008432:	e671      	b.n	8008118 <_strtod_l+0x88>
 8008434:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8008438:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800843c:	eba5 020b 	sub.w	r2, r5, fp
 8008440:	2e00      	cmp	r6, #0
 8008442:	bf08      	it	eq
 8008444:	461e      	moveq	r6, r3
 8008446:	2b10      	cmp	r3, #16
 8008448:	ed8d 7b08 	vstr	d7, [sp, #32]
 800844c:	9206      	str	r2, [sp, #24]
 800844e:	461a      	mov	r2, r3
 8008450:	bfa8      	it	ge
 8008452:	2210      	movge	r2, #16
 8008454:	2b09      	cmp	r3, #9
 8008456:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800845a:	dd0e      	ble.n	800847a <_strtod_l+0x3ea>
 800845c:	4975      	ldr	r1, [pc, #468]	; (8008634 <_strtod_l+0x5a4>)
 800845e:	eddd 7a04 	vldr	s15, [sp, #16]
 8008462:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008466:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800846a:	ed9d 5b08 	vldr	d5, [sp, #32]
 800846e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008472:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008476:	ec59 8b17 	vmov	r8, r9, d7
 800847a:	2b0f      	cmp	r3, #15
 800847c:	dc37      	bgt.n	80084ee <_strtod_l+0x45e>
 800847e:	9906      	ldr	r1, [sp, #24]
 8008480:	2900      	cmp	r1, #0
 8008482:	f43f ae49 	beq.w	8008118 <_strtod_l+0x88>
 8008486:	dd23      	ble.n	80084d0 <_strtod_l+0x440>
 8008488:	2916      	cmp	r1, #22
 800848a:	dc0b      	bgt.n	80084a4 <_strtod_l+0x414>
 800848c:	4b69      	ldr	r3, [pc, #420]	; (8008634 <_strtod_l+0x5a4>)
 800848e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008492:	ed93 7b00 	vldr	d7, [r3]
 8008496:	ec49 8b16 	vmov	d6, r8, r9
 800849a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800849e:	ec59 8b17 	vmov	r8, r9, d7
 80084a2:	e639      	b.n	8008118 <_strtod_l+0x88>
 80084a4:	9806      	ldr	r0, [sp, #24]
 80084a6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80084aa:	4281      	cmp	r1, r0
 80084ac:	db1f      	blt.n	80084ee <_strtod_l+0x45e>
 80084ae:	4a61      	ldr	r2, [pc, #388]	; (8008634 <_strtod_l+0x5a4>)
 80084b0:	f1c3 030f 	rsb	r3, r3, #15
 80084b4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80084b8:	ed91 7b00 	vldr	d7, [r1]
 80084bc:	ec49 8b16 	vmov	d6, r8, r9
 80084c0:	1ac3      	subs	r3, r0, r3
 80084c2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80084c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80084ca:	ed92 6b00 	vldr	d6, [r2]
 80084ce:	e7e4      	b.n	800849a <_strtod_l+0x40a>
 80084d0:	9906      	ldr	r1, [sp, #24]
 80084d2:	3116      	adds	r1, #22
 80084d4:	db0b      	blt.n	80084ee <_strtod_l+0x45e>
 80084d6:	4b57      	ldr	r3, [pc, #348]	; (8008634 <_strtod_l+0x5a4>)
 80084d8:	ebab 0505 	sub.w	r5, fp, r5
 80084dc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80084e0:	ed95 7b00 	vldr	d7, [r5]
 80084e4:	ec49 8b16 	vmov	d6, r8, r9
 80084e8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80084ec:	e7d7      	b.n	800849e <_strtod_l+0x40e>
 80084ee:	9906      	ldr	r1, [sp, #24]
 80084f0:	1a9a      	subs	r2, r3, r2
 80084f2:	440a      	add	r2, r1
 80084f4:	2a00      	cmp	r2, #0
 80084f6:	dd74      	ble.n	80085e2 <_strtod_l+0x552>
 80084f8:	f012 000f 	ands.w	r0, r2, #15
 80084fc:	d00a      	beq.n	8008514 <_strtod_l+0x484>
 80084fe:	494d      	ldr	r1, [pc, #308]	; (8008634 <_strtod_l+0x5a4>)
 8008500:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008504:	ed91 7b00 	vldr	d7, [r1]
 8008508:	ec49 8b16 	vmov	d6, r8, r9
 800850c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008510:	ec59 8b17 	vmov	r8, r9, d7
 8008514:	f032 020f 	bics.w	r2, r2, #15
 8008518:	d04f      	beq.n	80085ba <_strtod_l+0x52a>
 800851a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800851e:	dd22      	ble.n	8008566 <_strtod_l+0x4d6>
 8008520:	2500      	movs	r5, #0
 8008522:	462e      	mov	r6, r5
 8008524:	950a      	str	r5, [sp, #40]	; 0x28
 8008526:	462f      	mov	r7, r5
 8008528:	2322      	movs	r3, #34	; 0x22
 800852a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8008640 <_strtod_l+0x5b0>
 800852e:	6023      	str	r3, [r4, #0]
 8008530:	f04f 0800 	mov.w	r8, #0
 8008534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008536:	2b00      	cmp	r3, #0
 8008538:	f43f adee 	beq.w	8008118 <_strtod_l+0x88>
 800853c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800853e:	4620      	mov	r0, r4
 8008540:	f001 fdf4 	bl	800a12c <_Bfree>
 8008544:	4639      	mov	r1, r7
 8008546:	4620      	mov	r0, r4
 8008548:	f001 fdf0 	bl	800a12c <_Bfree>
 800854c:	4631      	mov	r1, r6
 800854e:	4620      	mov	r0, r4
 8008550:	f001 fdec 	bl	800a12c <_Bfree>
 8008554:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008556:	4620      	mov	r0, r4
 8008558:	f001 fde8 	bl	800a12c <_Bfree>
 800855c:	4629      	mov	r1, r5
 800855e:	4620      	mov	r0, r4
 8008560:	f001 fde4 	bl	800a12c <_Bfree>
 8008564:	e5d8      	b.n	8008118 <_strtod_l+0x88>
 8008566:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800856a:	2000      	movs	r0, #0
 800856c:	4f32      	ldr	r7, [pc, #200]	; (8008638 <_strtod_l+0x5a8>)
 800856e:	1112      	asrs	r2, r2, #4
 8008570:	4601      	mov	r1, r0
 8008572:	2a01      	cmp	r2, #1
 8008574:	dc24      	bgt.n	80085c0 <_strtod_l+0x530>
 8008576:	b108      	cbz	r0, 800857c <_strtod_l+0x4ec>
 8008578:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800857c:	4a2e      	ldr	r2, [pc, #184]	; (8008638 <_strtod_l+0x5a8>)
 800857e:	482f      	ldr	r0, [pc, #188]	; (800863c <_strtod_l+0x5ac>)
 8008580:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8008584:	ed91 7b00 	vldr	d7, [r1]
 8008588:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800858c:	ec49 8b16 	vmov	d6, r8, r9
 8008590:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008594:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008598:	9905      	ldr	r1, [sp, #20]
 800859a:	4a29      	ldr	r2, [pc, #164]	; (8008640 <_strtod_l+0x5b0>)
 800859c:	400a      	ands	r2, r1
 800859e:	4282      	cmp	r2, r0
 80085a0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80085a4:	d8bc      	bhi.n	8008520 <_strtod_l+0x490>
 80085a6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80085aa:	4282      	cmp	r2, r0
 80085ac:	bf86      	itte	hi
 80085ae:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8008644 <_strtod_l+0x5b4>
 80085b2:	f04f 38ff 	movhi.w	r8, #4294967295
 80085b6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80085ba:	2200      	movs	r2, #0
 80085bc:	9204      	str	r2, [sp, #16]
 80085be:	e07f      	b.n	80086c0 <_strtod_l+0x630>
 80085c0:	f012 0f01 	tst.w	r2, #1
 80085c4:	d00a      	beq.n	80085dc <_strtod_l+0x54c>
 80085c6:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 80085ca:	ed90 7b00 	vldr	d7, [r0]
 80085ce:	ed9d 6b04 	vldr	d6, [sp, #16]
 80085d2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80085d6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80085da:	2001      	movs	r0, #1
 80085dc:	3101      	adds	r1, #1
 80085de:	1052      	asrs	r2, r2, #1
 80085e0:	e7c7      	b.n	8008572 <_strtod_l+0x4e2>
 80085e2:	d0ea      	beq.n	80085ba <_strtod_l+0x52a>
 80085e4:	4252      	negs	r2, r2
 80085e6:	f012 000f 	ands.w	r0, r2, #15
 80085ea:	d00a      	beq.n	8008602 <_strtod_l+0x572>
 80085ec:	4911      	ldr	r1, [pc, #68]	; (8008634 <_strtod_l+0x5a4>)
 80085ee:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80085f2:	ed91 7b00 	vldr	d7, [r1]
 80085f6:	ec49 8b16 	vmov	d6, r8, r9
 80085fa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80085fe:	ec59 8b17 	vmov	r8, r9, d7
 8008602:	1112      	asrs	r2, r2, #4
 8008604:	d0d9      	beq.n	80085ba <_strtod_l+0x52a>
 8008606:	2a1f      	cmp	r2, #31
 8008608:	dd1e      	ble.n	8008648 <_strtod_l+0x5b8>
 800860a:	2500      	movs	r5, #0
 800860c:	462e      	mov	r6, r5
 800860e:	950a      	str	r5, [sp, #40]	; 0x28
 8008610:	462f      	mov	r7, r5
 8008612:	2322      	movs	r3, #34	; 0x22
 8008614:	f04f 0800 	mov.w	r8, #0
 8008618:	f04f 0900 	mov.w	r9, #0
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	e789      	b.n	8008534 <_strtod_l+0x4a4>
 8008620:	0800bb25 	.word	0x0800bb25
 8008624:	0800bb68 	.word	0x0800bb68
 8008628:	0800bb1d 	.word	0x0800bb1d
 800862c:	0800bcac 	.word	0x0800bcac
 8008630:	0800bf68 	.word	0x0800bf68
 8008634:	0800be48 	.word	0x0800be48
 8008638:	0800be20 	.word	0x0800be20
 800863c:	7ca00000 	.word	0x7ca00000
 8008640:	7ff00000 	.word	0x7ff00000
 8008644:	7fefffff 	.word	0x7fefffff
 8008648:	f012 0110 	ands.w	r1, r2, #16
 800864c:	bf18      	it	ne
 800864e:	216a      	movne	r1, #106	; 0x6a
 8008650:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8008654:	9104      	str	r1, [sp, #16]
 8008656:	49c0      	ldr	r1, [pc, #768]	; (8008958 <_strtod_l+0x8c8>)
 8008658:	2000      	movs	r0, #0
 800865a:	07d7      	lsls	r7, r2, #31
 800865c:	d508      	bpl.n	8008670 <_strtod_l+0x5e0>
 800865e:	ed9d 6b08 	vldr	d6, [sp, #32]
 8008662:	ed91 7b00 	vldr	d7, [r1]
 8008666:	ee26 7b07 	vmul.f64	d7, d6, d7
 800866a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800866e:	2001      	movs	r0, #1
 8008670:	1052      	asrs	r2, r2, #1
 8008672:	f101 0108 	add.w	r1, r1, #8
 8008676:	d1f0      	bne.n	800865a <_strtod_l+0x5ca>
 8008678:	b108      	cbz	r0, 800867e <_strtod_l+0x5ee>
 800867a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800867e:	9a04      	ldr	r2, [sp, #16]
 8008680:	b1ba      	cbz	r2, 80086b2 <_strtod_l+0x622>
 8008682:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008686:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800868a:	2a00      	cmp	r2, #0
 800868c:	4649      	mov	r1, r9
 800868e:	dd10      	ble.n	80086b2 <_strtod_l+0x622>
 8008690:	2a1f      	cmp	r2, #31
 8008692:	f340 8132 	ble.w	80088fa <_strtod_l+0x86a>
 8008696:	2a34      	cmp	r2, #52	; 0x34
 8008698:	bfde      	ittt	le
 800869a:	3a20      	suble	r2, #32
 800869c:	f04f 30ff 	movle.w	r0, #4294967295
 80086a0:	fa00 f202 	lslle.w	r2, r0, r2
 80086a4:	f04f 0800 	mov.w	r8, #0
 80086a8:	bfcc      	ite	gt
 80086aa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80086ae:	ea02 0901 	andle.w	r9, r2, r1
 80086b2:	ec49 8b17 	vmov	d7, r8, r9
 80086b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80086ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086be:	d0a4      	beq.n	800860a <_strtod_l+0x57a>
 80086c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086c2:	9200      	str	r2, [sp, #0]
 80086c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80086c6:	4632      	mov	r2, r6
 80086c8:	4620      	mov	r0, r4
 80086ca:	f001 fd9b 	bl	800a204 <__s2b>
 80086ce:	900a      	str	r0, [sp, #40]	; 0x28
 80086d0:	2800      	cmp	r0, #0
 80086d2:	f43f af25 	beq.w	8008520 <_strtod_l+0x490>
 80086d6:	9b06      	ldr	r3, [sp, #24]
 80086d8:	ebab 0505 	sub.w	r5, fp, r5
 80086dc:	2b00      	cmp	r3, #0
 80086de:	bfb4      	ite	lt
 80086e0:	462b      	movlt	r3, r5
 80086e2:	2300      	movge	r3, #0
 80086e4:	930c      	str	r3, [sp, #48]	; 0x30
 80086e6:	9b06      	ldr	r3, [sp, #24]
 80086e8:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8008940 <_strtod_l+0x8b0>
 80086ec:	ed9f ab96 	vldr	d10, [pc, #600]	; 8008948 <_strtod_l+0x8b8>
 80086f0:	ed9f bb97 	vldr	d11, [pc, #604]	; 8008950 <_strtod_l+0x8c0>
 80086f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80086f8:	2500      	movs	r5, #0
 80086fa:	9312      	str	r3, [sp, #72]	; 0x48
 80086fc:	462e      	mov	r6, r5
 80086fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008700:	4620      	mov	r0, r4
 8008702:	6859      	ldr	r1, [r3, #4]
 8008704:	f001 fcd2 	bl	800a0ac <_Balloc>
 8008708:	4607      	mov	r7, r0
 800870a:	2800      	cmp	r0, #0
 800870c:	f43f af0c 	beq.w	8008528 <_strtod_l+0x498>
 8008710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008712:	691a      	ldr	r2, [r3, #16]
 8008714:	3202      	adds	r2, #2
 8008716:	f103 010c 	add.w	r1, r3, #12
 800871a:	0092      	lsls	r2, r2, #2
 800871c:	300c      	adds	r0, #12
 800871e:	f001 fcb7 	bl	800a090 <memcpy>
 8008722:	ec49 8b10 	vmov	d0, r8, r9
 8008726:	aa1a      	add	r2, sp, #104	; 0x68
 8008728:	a919      	add	r1, sp, #100	; 0x64
 800872a:	4620      	mov	r0, r4
 800872c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8008730:	f002 f8a4 	bl	800a87c <__d2b>
 8008734:	9018      	str	r0, [sp, #96]	; 0x60
 8008736:	2800      	cmp	r0, #0
 8008738:	f43f aef6 	beq.w	8008528 <_strtod_l+0x498>
 800873c:	2101      	movs	r1, #1
 800873e:	4620      	mov	r0, r4
 8008740:	f001 fdfa 	bl	800a338 <__i2b>
 8008744:	4606      	mov	r6, r0
 8008746:	2800      	cmp	r0, #0
 8008748:	f43f aeee 	beq.w	8008528 <_strtod_l+0x498>
 800874c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800874e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008750:	2b00      	cmp	r3, #0
 8008752:	bfab      	itete	ge
 8008754:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008756:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008758:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 800875c:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8008760:	bfac      	ite	ge
 8008762:	eb03 0b02 	addge.w	fp, r3, r2
 8008766:	eba2 0a03 	sublt.w	sl, r2, r3
 800876a:	9a04      	ldr	r2, [sp, #16]
 800876c:	1a9b      	subs	r3, r3, r2
 800876e:	440b      	add	r3, r1
 8008770:	4a7a      	ldr	r2, [pc, #488]	; (800895c <_strtod_l+0x8cc>)
 8008772:	3b01      	subs	r3, #1
 8008774:	4293      	cmp	r3, r2
 8008776:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800877a:	f280 80d1 	bge.w	8008920 <_strtod_l+0x890>
 800877e:	1ad2      	subs	r2, r2, r3
 8008780:	2a1f      	cmp	r2, #31
 8008782:	eba1 0102 	sub.w	r1, r1, r2
 8008786:	f04f 0001 	mov.w	r0, #1
 800878a:	f300 80bd 	bgt.w	8008908 <_strtod_l+0x878>
 800878e:	fa00 f302 	lsl.w	r3, r0, r2
 8008792:	930e      	str	r3, [sp, #56]	; 0x38
 8008794:	2300      	movs	r3, #0
 8008796:	930d      	str	r3, [sp, #52]	; 0x34
 8008798:	eb0b 0301 	add.w	r3, fp, r1
 800879c:	9a04      	ldr	r2, [sp, #16]
 800879e:	459b      	cmp	fp, r3
 80087a0:	448a      	add	sl, r1
 80087a2:	4492      	add	sl, r2
 80087a4:	465a      	mov	r2, fp
 80087a6:	bfa8      	it	ge
 80087a8:	461a      	movge	r2, r3
 80087aa:	4552      	cmp	r2, sl
 80087ac:	bfa8      	it	ge
 80087ae:	4652      	movge	r2, sl
 80087b0:	2a00      	cmp	r2, #0
 80087b2:	bfc2      	ittt	gt
 80087b4:	1a9b      	subgt	r3, r3, r2
 80087b6:	ebaa 0a02 	subgt.w	sl, sl, r2
 80087ba:	ebab 0b02 	subgt.w	fp, fp, r2
 80087be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087c0:	2a00      	cmp	r2, #0
 80087c2:	dd18      	ble.n	80087f6 <_strtod_l+0x766>
 80087c4:	4631      	mov	r1, r6
 80087c6:	4620      	mov	r0, r4
 80087c8:	9315      	str	r3, [sp, #84]	; 0x54
 80087ca:	f001 fe71 	bl	800a4b0 <__pow5mult>
 80087ce:	4606      	mov	r6, r0
 80087d0:	2800      	cmp	r0, #0
 80087d2:	f43f aea9 	beq.w	8008528 <_strtod_l+0x498>
 80087d6:	4601      	mov	r1, r0
 80087d8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80087da:	4620      	mov	r0, r4
 80087dc:	f001 fdc2 	bl	800a364 <__multiply>
 80087e0:	9014      	str	r0, [sp, #80]	; 0x50
 80087e2:	2800      	cmp	r0, #0
 80087e4:	f43f aea0 	beq.w	8008528 <_strtod_l+0x498>
 80087e8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80087ea:	4620      	mov	r0, r4
 80087ec:	f001 fc9e 	bl	800a12c <_Bfree>
 80087f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80087f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087f4:	9218      	str	r2, [sp, #96]	; 0x60
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f300 8097 	bgt.w	800892a <_strtod_l+0x89a>
 80087fc:	9b06      	ldr	r3, [sp, #24]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	dd08      	ble.n	8008814 <_strtod_l+0x784>
 8008802:	4639      	mov	r1, r7
 8008804:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008806:	4620      	mov	r0, r4
 8008808:	f001 fe52 	bl	800a4b0 <__pow5mult>
 800880c:	4607      	mov	r7, r0
 800880e:	2800      	cmp	r0, #0
 8008810:	f43f ae8a 	beq.w	8008528 <_strtod_l+0x498>
 8008814:	f1ba 0f00 	cmp.w	sl, #0
 8008818:	dd08      	ble.n	800882c <_strtod_l+0x79c>
 800881a:	4639      	mov	r1, r7
 800881c:	4652      	mov	r2, sl
 800881e:	4620      	mov	r0, r4
 8008820:	f001 fea0 	bl	800a564 <__lshift>
 8008824:	4607      	mov	r7, r0
 8008826:	2800      	cmp	r0, #0
 8008828:	f43f ae7e 	beq.w	8008528 <_strtod_l+0x498>
 800882c:	f1bb 0f00 	cmp.w	fp, #0
 8008830:	dd08      	ble.n	8008844 <_strtod_l+0x7b4>
 8008832:	4631      	mov	r1, r6
 8008834:	465a      	mov	r2, fp
 8008836:	4620      	mov	r0, r4
 8008838:	f001 fe94 	bl	800a564 <__lshift>
 800883c:	4606      	mov	r6, r0
 800883e:	2800      	cmp	r0, #0
 8008840:	f43f ae72 	beq.w	8008528 <_strtod_l+0x498>
 8008844:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008846:	463a      	mov	r2, r7
 8008848:	4620      	mov	r0, r4
 800884a:	f001 ff13 	bl	800a674 <__mdiff>
 800884e:	4605      	mov	r5, r0
 8008850:	2800      	cmp	r0, #0
 8008852:	f43f ae69 	beq.w	8008528 <_strtod_l+0x498>
 8008856:	2300      	movs	r3, #0
 8008858:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800885c:	60c3      	str	r3, [r0, #12]
 800885e:	4631      	mov	r1, r6
 8008860:	f001 feec 	bl	800a63c <__mcmp>
 8008864:	2800      	cmp	r0, #0
 8008866:	da7f      	bge.n	8008968 <_strtod_l+0x8d8>
 8008868:	ea5a 0308 	orrs.w	r3, sl, r8
 800886c:	f040 80a5 	bne.w	80089ba <_strtod_l+0x92a>
 8008870:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008874:	2b00      	cmp	r3, #0
 8008876:	f040 80a0 	bne.w	80089ba <_strtod_l+0x92a>
 800887a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800887e:	0d1b      	lsrs	r3, r3, #20
 8008880:	051b      	lsls	r3, r3, #20
 8008882:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008886:	f240 8098 	bls.w	80089ba <_strtod_l+0x92a>
 800888a:	696b      	ldr	r3, [r5, #20]
 800888c:	b91b      	cbnz	r3, 8008896 <_strtod_l+0x806>
 800888e:	692b      	ldr	r3, [r5, #16]
 8008890:	2b01      	cmp	r3, #1
 8008892:	f340 8092 	ble.w	80089ba <_strtod_l+0x92a>
 8008896:	4629      	mov	r1, r5
 8008898:	2201      	movs	r2, #1
 800889a:	4620      	mov	r0, r4
 800889c:	f001 fe62 	bl	800a564 <__lshift>
 80088a0:	4631      	mov	r1, r6
 80088a2:	4605      	mov	r5, r0
 80088a4:	f001 feca 	bl	800a63c <__mcmp>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	f340 8086 	ble.w	80089ba <_strtod_l+0x92a>
 80088ae:	9904      	ldr	r1, [sp, #16]
 80088b0:	4a2b      	ldr	r2, [pc, #172]	; (8008960 <_strtod_l+0x8d0>)
 80088b2:	464b      	mov	r3, r9
 80088b4:	2900      	cmp	r1, #0
 80088b6:	f000 80a1 	beq.w	80089fc <_strtod_l+0x96c>
 80088ba:	ea02 0109 	and.w	r1, r2, r9
 80088be:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80088c2:	f300 809b 	bgt.w	80089fc <_strtod_l+0x96c>
 80088c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80088ca:	f77f aea2 	ble.w	8008612 <_strtod_l+0x582>
 80088ce:	4a25      	ldr	r2, [pc, #148]	; (8008964 <_strtod_l+0x8d4>)
 80088d0:	2300      	movs	r3, #0
 80088d2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80088d6:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 80088da:	ec49 8b17 	vmov	d7, r8, r9
 80088de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80088e2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80088e6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	bf08      	it	eq
 80088ee:	2322      	moveq	r3, #34	; 0x22
 80088f0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80088f4:	bf08      	it	eq
 80088f6:	6023      	streq	r3, [r4, #0]
 80088f8:	e620      	b.n	800853c <_strtod_l+0x4ac>
 80088fa:	f04f 31ff 	mov.w	r1, #4294967295
 80088fe:	fa01 f202 	lsl.w	r2, r1, r2
 8008902:	ea02 0808 	and.w	r8, r2, r8
 8008906:	e6d4      	b.n	80086b2 <_strtod_l+0x622>
 8008908:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800890c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008910:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008914:	33e2      	adds	r3, #226	; 0xe2
 8008916:	fa00 f303 	lsl.w	r3, r0, r3
 800891a:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 800891e:	e73b      	b.n	8008798 <_strtod_l+0x708>
 8008920:	2000      	movs	r0, #0
 8008922:	2301      	movs	r3, #1
 8008924:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8008928:	e736      	b.n	8008798 <_strtod_l+0x708>
 800892a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800892c:	461a      	mov	r2, r3
 800892e:	4620      	mov	r0, r4
 8008930:	f001 fe18 	bl	800a564 <__lshift>
 8008934:	9018      	str	r0, [sp, #96]	; 0x60
 8008936:	2800      	cmp	r0, #0
 8008938:	f47f af60 	bne.w	80087fc <_strtod_l+0x76c>
 800893c:	e5f4      	b.n	8008528 <_strtod_l+0x498>
 800893e:	bf00      	nop
 8008940:	94a03595 	.word	0x94a03595
 8008944:	3fcfffff 	.word	0x3fcfffff
 8008948:	94a03595 	.word	0x94a03595
 800894c:	3fdfffff 	.word	0x3fdfffff
 8008950:	35afe535 	.word	0x35afe535
 8008954:	3fe00000 	.word	0x3fe00000
 8008958:	0800bb80 	.word	0x0800bb80
 800895c:	fffffc02 	.word	0xfffffc02
 8008960:	7ff00000 	.word	0x7ff00000
 8008964:	39500000 	.word	0x39500000
 8008968:	46cb      	mov	fp, r9
 800896a:	d165      	bne.n	8008a38 <_strtod_l+0x9a8>
 800896c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008970:	f1ba 0f00 	cmp.w	sl, #0
 8008974:	d02a      	beq.n	80089cc <_strtod_l+0x93c>
 8008976:	4aaa      	ldr	r2, [pc, #680]	; (8008c20 <_strtod_l+0xb90>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d12b      	bne.n	80089d4 <_strtod_l+0x944>
 800897c:	9b04      	ldr	r3, [sp, #16]
 800897e:	4641      	mov	r1, r8
 8008980:	b1fb      	cbz	r3, 80089c2 <_strtod_l+0x932>
 8008982:	4aa8      	ldr	r2, [pc, #672]	; (8008c24 <_strtod_l+0xb94>)
 8008984:	ea09 0202 	and.w	r2, r9, r2
 8008988:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800898c:	f04f 30ff 	mov.w	r0, #4294967295
 8008990:	d81a      	bhi.n	80089c8 <_strtod_l+0x938>
 8008992:	0d12      	lsrs	r2, r2, #20
 8008994:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008998:	fa00 f303 	lsl.w	r3, r0, r3
 800899c:	4299      	cmp	r1, r3
 800899e:	d119      	bne.n	80089d4 <_strtod_l+0x944>
 80089a0:	4ba1      	ldr	r3, [pc, #644]	; (8008c28 <_strtod_l+0xb98>)
 80089a2:	459b      	cmp	fp, r3
 80089a4:	d102      	bne.n	80089ac <_strtod_l+0x91c>
 80089a6:	3101      	adds	r1, #1
 80089a8:	f43f adbe 	beq.w	8008528 <_strtod_l+0x498>
 80089ac:	4b9d      	ldr	r3, [pc, #628]	; (8008c24 <_strtod_l+0xb94>)
 80089ae:	ea0b 0303 	and.w	r3, fp, r3
 80089b2:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80089b6:	f04f 0800 	mov.w	r8, #0
 80089ba:	9b04      	ldr	r3, [sp, #16]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d186      	bne.n	80088ce <_strtod_l+0x83e>
 80089c0:	e5bc      	b.n	800853c <_strtod_l+0x4ac>
 80089c2:	f04f 33ff 	mov.w	r3, #4294967295
 80089c6:	e7e9      	b.n	800899c <_strtod_l+0x90c>
 80089c8:	4603      	mov	r3, r0
 80089ca:	e7e7      	b.n	800899c <_strtod_l+0x90c>
 80089cc:	ea53 0308 	orrs.w	r3, r3, r8
 80089d0:	f43f af6d 	beq.w	80088ae <_strtod_l+0x81e>
 80089d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089d6:	b1db      	cbz	r3, 8008a10 <_strtod_l+0x980>
 80089d8:	ea13 0f0b 	tst.w	r3, fp
 80089dc:	d0ed      	beq.n	80089ba <_strtod_l+0x92a>
 80089de:	9a04      	ldr	r2, [sp, #16]
 80089e0:	4640      	mov	r0, r8
 80089e2:	4649      	mov	r1, r9
 80089e4:	f1ba 0f00 	cmp.w	sl, #0
 80089e8:	d016      	beq.n	8008a18 <_strtod_l+0x988>
 80089ea:	f7ff fb35 	bl	8008058 <sulp>
 80089ee:	ed9d 7b08 	vldr	d7, [sp, #32]
 80089f2:	ee37 7b00 	vadd.f64	d7, d7, d0
 80089f6:	ec59 8b17 	vmov	r8, r9, d7
 80089fa:	e7de      	b.n	80089ba <_strtod_l+0x92a>
 80089fc:	4013      	ands	r3, r2
 80089fe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008a02:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008a06:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008a0a:	f04f 38ff 	mov.w	r8, #4294967295
 8008a0e:	e7d4      	b.n	80089ba <_strtod_l+0x92a>
 8008a10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a12:	ea13 0f08 	tst.w	r3, r8
 8008a16:	e7e1      	b.n	80089dc <_strtod_l+0x94c>
 8008a18:	f7ff fb1e 	bl	8008058 <sulp>
 8008a1c:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008a20:	ee37 7b40 	vsub.f64	d7, d7, d0
 8008a24:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008a28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a30:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8008a34:	d1c1      	bne.n	80089ba <_strtod_l+0x92a>
 8008a36:	e5ec      	b.n	8008612 <_strtod_l+0x582>
 8008a38:	4631      	mov	r1, r6
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	f001 ff7a 	bl	800a934 <__ratio>
 8008a40:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8008a44:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a4c:	d867      	bhi.n	8008b1e <_strtod_l+0xa8e>
 8008a4e:	f1ba 0f00 	cmp.w	sl, #0
 8008a52:	d044      	beq.n	8008ade <_strtod_l+0xa4e>
 8008a54:	4b75      	ldr	r3, [pc, #468]	; (8008c2c <_strtod_l+0xb9c>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8008a5c:	4971      	ldr	r1, [pc, #452]	; (8008c24 <_strtod_l+0xb94>)
 8008a5e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8008c38 <_strtod_l+0xba8>
 8008a62:	ea0b 0001 	and.w	r0, fp, r1
 8008a66:	4560      	cmp	r0, ip
 8008a68:	900d      	str	r0, [sp, #52]	; 0x34
 8008a6a:	f040 808b 	bne.w	8008b84 <_strtod_l+0xaf4>
 8008a6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a72:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8008a76:	ec49 8b10 	vmov	d0, r8, r9
 8008a7a:	ec43 2b1c 	vmov	d12, r2, r3
 8008a7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008a82:	f001 fe7f 	bl	800a784 <__ulp>
 8008a86:	ec49 8b1d 	vmov	d13, r8, r9
 8008a8a:	eeac db00 	vfma.f64	d13, d12, d0
 8008a8e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8008a92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a94:	4963      	ldr	r1, [pc, #396]	; (8008c24 <_strtod_l+0xb94>)
 8008a96:	4a66      	ldr	r2, [pc, #408]	; (8008c30 <_strtod_l+0xba0>)
 8008a98:	4019      	ands	r1, r3
 8008a9a:	4291      	cmp	r1, r2
 8008a9c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8008aa0:	d947      	bls.n	8008b32 <_strtod_l+0xaa2>
 8008aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aa4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d103      	bne.n	8008ab4 <_strtod_l+0xa24>
 8008aac:	9b08      	ldr	r3, [sp, #32]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	f43f ad3a 	beq.w	8008528 <_strtod_l+0x498>
 8008ab4:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8008c28 <_strtod_l+0xb98>
 8008ab8:	f04f 38ff 	mov.w	r8, #4294967295
 8008abc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f001 fb34 	bl	800a12c <_Bfree>
 8008ac4:	4639      	mov	r1, r7
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f001 fb30 	bl	800a12c <_Bfree>
 8008acc:	4631      	mov	r1, r6
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f001 fb2c 	bl	800a12c <_Bfree>
 8008ad4:	4629      	mov	r1, r5
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f001 fb28 	bl	800a12c <_Bfree>
 8008adc:	e60f      	b.n	80086fe <_strtod_l+0x66e>
 8008ade:	f1b8 0f00 	cmp.w	r8, #0
 8008ae2:	d112      	bne.n	8008b0a <_strtod_l+0xa7a>
 8008ae4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ae8:	b9b3      	cbnz	r3, 8008b18 <_strtod_l+0xa88>
 8008aea:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008aee:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008af6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8008afa:	d401      	bmi.n	8008b00 <_strtod_l+0xa70>
 8008afc:	ee20 8b08 	vmul.f64	d8, d0, d8
 8008b00:	eeb1 7b48 	vneg.f64	d7, d8
 8008b04:	ec53 2b17 	vmov	r2, r3, d7
 8008b08:	e7a8      	b.n	8008a5c <_strtod_l+0x9cc>
 8008b0a:	f1b8 0f01 	cmp.w	r8, #1
 8008b0e:	d103      	bne.n	8008b18 <_strtod_l+0xa88>
 8008b10:	f1b9 0f00 	cmp.w	r9, #0
 8008b14:	f43f ad7d 	beq.w	8008612 <_strtod_l+0x582>
 8008b18:	4b46      	ldr	r3, [pc, #280]	; (8008c34 <_strtod_l+0xba4>)
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	e79c      	b.n	8008a58 <_strtod_l+0x9c8>
 8008b1e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8008b22:	ee20 8b08 	vmul.f64	d8, d0, d8
 8008b26:	f1ba 0f00 	cmp.w	sl, #0
 8008b2a:	d0e9      	beq.n	8008b00 <_strtod_l+0xa70>
 8008b2c:	ec53 2b18 	vmov	r2, r3, d8
 8008b30:	e794      	b.n	8008a5c <_strtod_l+0x9cc>
 8008b32:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008b36:	9b04      	ldr	r3, [sp, #16]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1bf      	bne.n	8008abc <_strtod_l+0xa2c>
 8008b3c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b42:	0d1b      	lsrs	r3, r3, #20
 8008b44:	051b      	lsls	r3, r3, #20
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d1b8      	bne.n	8008abc <_strtod_l+0xa2c>
 8008b4a:	ec51 0b18 	vmov	r0, r1, d8
 8008b4e:	f7f7 fdf3 	bl	8000738 <__aeabi_d2lz>
 8008b52:	f7f7 fdab 	bl	80006ac <__aeabi_l2d>
 8008b56:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b5a:	ec41 0b17 	vmov	d7, r0, r1
 8008b5e:	ea43 0308 	orr.w	r3, r3, r8
 8008b62:	ea53 030a 	orrs.w	r3, r3, sl
 8008b66:	ee38 8b47 	vsub.f64	d8, d8, d7
 8008b6a:	d03e      	beq.n	8008bea <_strtod_l+0xb5a>
 8008b6c:	eeb4 8bca 	vcmpe.f64	d8, d10
 8008b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b74:	f53f ace2 	bmi.w	800853c <_strtod_l+0x4ac>
 8008b78:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8008b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b80:	dd9c      	ble.n	8008abc <_strtod_l+0xa2c>
 8008b82:	e4db      	b.n	800853c <_strtod_l+0x4ac>
 8008b84:	9904      	ldr	r1, [sp, #16]
 8008b86:	b301      	cbz	r1, 8008bca <_strtod_l+0xb3a>
 8008b88:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008b8a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8008b8e:	d81c      	bhi.n	8008bca <_strtod_l+0xb3a>
 8008b90:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8008c18 <_strtod_l+0xb88>
 8008b94:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b9c:	d811      	bhi.n	8008bc2 <_strtod_l+0xb32>
 8008b9e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8008ba2:	ee18 3a10 	vmov	r3, s16
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	bf38      	it	cc
 8008baa:	2301      	movcc	r3, #1
 8008bac:	ee08 3a10 	vmov	s16, r3
 8008bb0:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8008bb4:	f1ba 0f00 	cmp.w	sl, #0
 8008bb8:	d114      	bne.n	8008be4 <_strtod_l+0xb54>
 8008bba:	eeb1 7b48 	vneg.f64	d7, d8
 8008bbe:	ec53 2b17 	vmov	r2, r3, d7
 8008bc2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008bc4:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8008bc8:	1a0b      	subs	r3, r1, r0
 8008bca:	ed9d 0b08 	vldr	d0, [sp, #32]
 8008bce:	ec43 2b1c 	vmov	d12, r2, r3
 8008bd2:	f001 fdd7 	bl	800a784 <__ulp>
 8008bd6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008bda:	eeac 7b00 	vfma.f64	d7, d12, d0
 8008bde:	ec59 8b17 	vmov	r8, r9, d7
 8008be2:	e7a8      	b.n	8008b36 <_strtod_l+0xaa6>
 8008be4:	ec53 2b18 	vmov	r2, r3, d8
 8008be8:	e7eb      	b.n	8008bc2 <_strtod_l+0xb32>
 8008bea:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8008bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf2:	f57f af63 	bpl.w	8008abc <_strtod_l+0xa2c>
 8008bf6:	e4a1      	b.n	800853c <_strtod_l+0x4ac>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bfc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008bfe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c00:	6013      	str	r3, [r2, #0]
 8008c02:	f7ff ba8d 	b.w	8008120 <_strtod_l+0x90>
 8008c06:	2a65      	cmp	r2, #101	; 0x65
 8008c08:	f43f ab89 	beq.w	800831e <_strtod_l+0x28e>
 8008c0c:	2a45      	cmp	r2, #69	; 0x45
 8008c0e:	f43f ab86 	beq.w	800831e <_strtod_l+0x28e>
 8008c12:	2101      	movs	r1, #1
 8008c14:	f7ff bbbe 	b.w	8008394 <_strtod_l+0x304>
 8008c18:	ffc00000 	.word	0xffc00000
 8008c1c:	41dfffff 	.word	0x41dfffff
 8008c20:	000fffff 	.word	0x000fffff
 8008c24:	7ff00000 	.word	0x7ff00000
 8008c28:	7fefffff 	.word	0x7fefffff
 8008c2c:	3ff00000 	.word	0x3ff00000
 8008c30:	7c9fffff 	.word	0x7c9fffff
 8008c34:	bff00000 	.word	0xbff00000
 8008c38:	7fe00000 	.word	0x7fe00000

08008c3c <_strtod_r>:
 8008c3c:	4b01      	ldr	r3, [pc, #4]	; (8008c44 <_strtod_r+0x8>)
 8008c3e:	f7ff ba27 	b.w	8008090 <_strtod_l>
 8008c42:	bf00      	nop
 8008c44:	24000078 	.word	0x24000078

08008c48 <_strtol_l.isra.0>:
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c4e:	d001      	beq.n	8008c54 <_strtol_l.isra.0+0xc>
 8008c50:	2b24      	cmp	r3, #36	; 0x24
 8008c52:	d906      	bls.n	8008c62 <_strtol_l.isra.0+0x1a>
 8008c54:	f7fe fb60 	bl	8007318 <__errno>
 8008c58:	2316      	movs	r3, #22
 8008c5a:	6003      	str	r3, [r0, #0]
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c62:	4f3a      	ldr	r7, [pc, #232]	; (8008d4c <_strtol_l.isra.0+0x104>)
 8008c64:	468e      	mov	lr, r1
 8008c66:	4676      	mov	r6, lr
 8008c68:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008c6c:	5de5      	ldrb	r5, [r4, r7]
 8008c6e:	f015 0508 	ands.w	r5, r5, #8
 8008c72:	d1f8      	bne.n	8008c66 <_strtol_l.isra.0+0x1e>
 8008c74:	2c2d      	cmp	r4, #45	; 0x2d
 8008c76:	d134      	bne.n	8008ce2 <_strtol_l.isra.0+0x9a>
 8008c78:	f89e 4000 	ldrb.w	r4, [lr]
 8008c7c:	f04f 0801 	mov.w	r8, #1
 8008c80:	f106 0e02 	add.w	lr, r6, #2
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d05c      	beq.n	8008d42 <_strtol_l.isra.0+0xfa>
 8008c88:	2b10      	cmp	r3, #16
 8008c8a:	d10c      	bne.n	8008ca6 <_strtol_l.isra.0+0x5e>
 8008c8c:	2c30      	cmp	r4, #48	; 0x30
 8008c8e:	d10a      	bne.n	8008ca6 <_strtol_l.isra.0+0x5e>
 8008c90:	f89e 4000 	ldrb.w	r4, [lr]
 8008c94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008c98:	2c58      	cmp	r4, #88	; 0x58
 8008c9a:	d14d      	bne.n	8008d38 <_strtol_l.isra.0+0xf0>
 8008c9c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008ca0:	2310      	movs	r3, #16
 8008ca2:	f10e 0e02 	add.w	lr, lr, #2
 8008ca6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008caa:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008cae:	2600      	movs	r6, #0
 8008cb0:	fbbc f9f3 	udiv	r9, ip, r3
 8008cb4:	4635      	mov	r5, r6
 8008cb6:	fb03 ca19 	mls	sl, r3, r9, ip
 8008cba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008cbe:	2f09      	cmp	r7, #9
 8008cc0:	d818      	bhi.n	8008cf4 <_strtol_l.isra.0+0xac>
 8008cc2:	463c      	mov	r4, r7
 8008cc4:	42a3      	cmp	r3, r4
 8008cc6:	dd24      	ble.n	8008d12 <_strtol_l.isra.0+0xca>
 8008cc8:	2e00      	cmp	r6, #0
 8008cca:	db1f      	blt.n	8008d0c <_strtol_l.isra.0+0xc4>
 8008ccc:	45a9      	cmp	r9, r5
 8008cce:	d31d      	bcc.n	8008d0c <_strtol_l.isra.0+0xc4>
 8008cd0:	d101      	bne.n	8008cd6 <_strtol_l.isra.0+0x8e>
 8008cd2:	45a2      	cmp	sl, r4
 8008cd4:	db1a      	blt.n	8008d0c <_strtol_l.isra.0+0xc4>
 8008cd6:	fb05 4503 	mla	r5, r5, r3, r4
 8008cda:	2601      	movs	r6, #1
 8008cdc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008ce0:	e7eb      	b.n	8008cba <_strtol_l.isra.0+0x72>
 8008ce2:	2c2b      	cmp	r4, #43	; 0x2b
 8008ce4:	bf08      	it	eq
 8008ce6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008cea:	46a8      	mov	r8, r5
 8008cec:	bf08      	it	eq
 8008cee:	f106 0e02 	addeq.w	lr, r6, #2
 8008cf2:	e7c7      	b.n	8008c84 <_strtol_l.isra.0+0x3c>
 8008cf4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008cf8:	2f19      	cmp	r7, #25
 8008cfa:	d801      	bhi.n	8008d00 <_strtol_l.isra.0+0xb8>
 8008cfc:	3c37      	subs	r4, #55	; 0x37
 8008cfe:	e7e1      	b.n	8008cc4 <_strtol_l.isra.0+0x7c>
 8008d00:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008d04:	2f19      	cmp	r7, #25
 8008d06:	d804      	bhi.n	8008d12 <_strtol_l.isra.0+0xca>
 8008d08:	3c57      	subs	r4, #87	; 0x57
 8008d0a:	e7db      	b.n	8008cc4 <_strtol_l.isra.0+0x7c>
 8008d0c:	f04f 36ff 	mov.w	r6, #4294967295
 8008d10:	e7e4      	b.n	8008cdc <_strtol_l.isra.0+0x94>
 8008d12:	2e00      	cmp	r6, #0
 8008d14:	da05      	bge.n	8008d22 <_strtol_l.isra.0+0xda>
 8008d16:	2322      	movs	r3, #34	; 0x22
 8008d18:	6003      	str	r3, [r0, #0]
 8008d1a:	4665      	mov	r5, ip
 8008d1c:	b942      	cbnz	r2, 8008d30 <_strtol_l.isra.0+0xe8>
 8008d1e:	4628      	mov	r0, r5
 8008d20:	e79d      	b.n	8008c5e <_strtol_l.isra.0+0x16>
 8008d22:	f1b8 0f00 	cmp.w	r8, #0
 8008d26:	d000      	beq.n	8008d2a <_strtol_l.isra.0+0xe2>
 8008d28:	426d      	negs	r5, r5
 8008d2a:	2a00      	cmp	r2, #0
 8008d2c:	d0f7      	beq.n	8008d1e <_strtol_l.isra.0+0xd6>
 8008d2e:	b10e      	cbz	r6, 8008d34 <_strtol_l.isra.0+0xec>
 8008d30:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008d34:	6011      	str	r1, [r2, #0]
 8008d36:	e7f2      	b.n	8008d1e <_strtol_l.isra.0+0xd6>
 8008d38:	2430      	movs	r4, #48	; 0x30
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1b3      	bne.n	8008ca6 <_strtol_l.isra.0+0x5e>
 8008d3e:	2308      	movs	r3, #8
 8008d40:	e7b1      	b.n	8008ca6 <_strtol_l.isra.0+0x5e>
 8008d42:	2c30      	cmp	r4, #48	; 0x30
 8008d44:	d0a4      	beq.n	8008c90 <_strtol_l.isra.0+0x48>
 8008d46:	230a      	movs	r3, #10
 8008d48:	e7ad      	b.n	8008ca6 <_strtol_l.isra.0+0x5e>
 8008d4a:	bf00      	nop
 8008d4c:	0800bba9 	.word	0x0800bba9

08008d50 <_strtol_r>:
 8008d50:	f7ff bf7a 	b.w	8008c48 <_strtol_l.isra.0>

08008d54 <quorem>:
 8008d54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d58:	6903      	ldr	r3, [r0, #16]
 8008d5a:	690c      	ldr	r4, [r1, #16]
 8008d5c:	42a3      	cmp	r3, r4
 8008d5e:	4607      	mov	r7, r0
 8008d60:	f2c0 8081 	blt.w	8008e66 <quorem+0x112>
 8008d64:	3c01      	subs	r4, #1
 8008d66:	f101 0814 	add.w	r8, r1, #20
 8008d6a:	f100 0514 	add.w	r5, r0, #20
 8008d6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d72:	9301      	str	r3, [sp, #4]
 8008d74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008d84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d88:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d8c:	d331      	bcc.n	8008df2 <quorem+0x9e>
 8008d8e:	f04f 0e00 	mov.w	lr, #0
 8008d92:	4640      	mov	r0, r8
 8008d94:	46ac      	mov	ip, r5
 8008d96:	46f2      	mov	sl, lr
 8008d98:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d9c:	b293      	uxth	r3, r2
 8008d9e:	fb06 e303 	mla	r3, r6, r3, lr
 8008da2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	ebaa 0303 	sub.w	r3, sl, r3
 8008dac:	0c12      	lsrs	r2, r2, #16
 8008dae:	f8dc a000 	ldr.w	sl, [ip]
 8008db2:	fb06 e202 	mla	r2, r6, r2, lr
 8008db6:	fa13 f38a 	uxtah	r3, r3, sl
 8008dba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008dbe:	fa1f fa82 	uxth.w	sl, r2
 8008dc2:	f8dc 2000 	ldr.w	r2, [ip]
 8008dc6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008dca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dd4:	4581      	cmp	r9, r0
 8008dd6:	f84c 3b04 	str.w	r3, [ip], #4
 8008dda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008dde:	d2db      	bcs.n	8008d98 <quorem+0x44>
 8008de0:	f855 300b 	ldr.w	r3, [r5, fp]
 8008de4:	b92b      	cbnz	r3, 8008df2 <quorem+0x9e>
 8008de6:	9b01      	ldr	r3, [sp, #4]
 8008de8:	3b04      	subs	r3, #4
 8008dea:	429d      	cmp	r5, r3
 8008dec:	461a      	mov	r2, r3
 8008dee:	d32e      	bcc.n	8008e4e <quorem+0xfa>
 8008df0:	613c      	str	r4, [r7, #16]
 8008df2:	4638      	mov	r0, r7
 8008df4:	f001 fc22 	bl	800a63c <__mcmp>
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	db24      	blt.n	8008e46 <quorem+0xf2>
 8008dfc:	3601      	adds	r6, #1
 8008dfe:	4628      	mov	r0, r5
 8008e00:	f04f 0c00 	mov.w	ip, #0
 8008e04:	f858 2b04 	ldr.w	r2, [r8], #4
 8008e08:	f8d0 e000 	ldr.w	lr, [r0]
 8008e0c:	b293      	uxth	r3, r2
 8008e0e:	ebac 0303 	sub.w	r3, ip, r3
 8008e12:	0c12      	lsrs	r2, r2, #16
 8008e14:	fa13 f38e 	uxtah	r3, r3, lr
 8008e18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008e1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e26:	45c1      	cmp	r9, r8
 8008e28:	f840 3b04 	str.w	r3, [r0], #4
 8008e2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008e30:	d2e8      	bcs.n	8008e04 <quorem+0xb0>
 8008e32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e3a:	b922      	cbnz	r2, 8008e46 <quorem+0xf2>
 8008e3c:	3b04      	subs	r3, #4
 8008e3e:	429d      	cmp	r5, r3
 8008e40:	461a      	mov	r2, r3
 8008e42:	d30a      	bcc.n	8008e5a <quorem+0x106>
 8008e44:	613c      	str	r4, [r7, #16]
 8008e46:	4630      	mov	r0, r6
 8008e48:	b003      	add	sp, #12
 8008e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e4e:	6812      	ldr	r2, [r2, #0]
 8008e50:	3b04      	subs	r3, #4
 8008e52:	2a00      	cmp	r2, #0
 8008e54:	d1cc      	bne.n	8008df0 <quorem+0x9c>
 8008e56:	3c01      	subs	r4, #1
 8008e58:	e7c7      	b.n	8008dea <quorem+0x96>
 8008e5a:	6812      	ldr	r2, [r2, #0]
 8008e5c:	3b04      	subs	r3, #4
 8008e5e:	2a00      	cmp	r2, #0
 8008e60:	d1f0      	bne.n	8008e44 <quorem+0xf0>
 8008e62:	3c01      	subs	r4, #1
 8008e64:	e7eb      	b.n	8008e3e <quorem+0xea>
 8008e66:	2000      	movs	r0, #0
 8008e68:	e7ee      	b.n	8008e48 <quorem+0xf4>
 8008e6a:	0000      	movs	r0, r0
 8008e6c:	0000      	movs	r0, r0
	...

08008e70 <_dtoa_r>:
 8008e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e74:	ec59 8b10 	vmov	r8, r9, d0
 8008e78:	b095      	sub	sp, #84	; 0x54
 8008e7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e7c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8008e7e:	9107      	str	r1, [sp, #28]
 8008e80:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8008e84:	4606      	mov	r6, r0
 8008e86:	9209      	str	r2, [sp, #36]	; 0x24
 8008e88:	9310      	str	r3, [sp, #64]	; 0x40
 8008e8a:	b975      	cbnz	r5, 8008eaa <_dtoa_r+0x3a>
 8008e8c:	2010      	movs	r0, #16
 8008e8e:	f001 f8e5 	bl	800a05c <malloc>
 8008e92:	4602      	mov	r2, r0
 8008e94:	6270      	str	r0, [r6, #36]	; 0x24
 8008e96:	b920      	cbnz	r0, 8008ea2 <_dtoa_r+0x32>
 8008e98:	4bab      	ldr	r3, [pc, #684]	; (8009148 <_dtoa_r+0x2d8>)
 8008e9a:	21ea      	movs	r1, #234	; 0xea
 8008e9c:	48ab      	ldr	r0, [pc, #684]	; (800914c <_dtoa_r+0x2dc>)
 8008e9e:	f002 f80f 	bl	800aec0 <__assert_func>
 8008ea2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ea6:	6005      	str	r5, [r0, #0]
 8008ea8:	60c5      	str	r5, [r0, #12]
 8008eaa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008eac:	6819      	ldr	r1, [r3, #0]
 8008eae:	b151      	cbz	r1, 8008ec6 <_dtoa_r+0x56>
 8008eb0:	685a      	ldr	r2, [r3, #4]
 8008eb2:	604a      	str	r2, [r1, #4]
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	4093      	lsls	r3, r2
 8008eb8:	608b      	str	r3, [r1, #8]
 8008eba:	4630      	mov	r0, r6
 8008ebc:	f001 f936 	bl	800a12c <_Bfree>
 8008ec0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	601a      	str	r2, [r3, #0]
 8008ec6:	f1b9 0300 	subs.w	r3, r9, #0
 8008eca:	bfbb      	ittet	lt
 8008ecc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008ed0:	9303      	strlt	r3, [sp, #12]
 8008ed2:	2300      	movge	r3, #0
 8008ed4:	2201      	movlt	r2, #1
 8008ed6:	bfac      	ite	ge
 8008ed8:	6023      	strge	r3, [r4, #0]
 8008eda:	6022      	strlt	r2, [r4, #0]
 8008edc:	4b9c      	ldr	r3, [pc, #624]	; (8009150 <_dtoa_r+0x2e0>)
 8008ede:	9c03      	ldr	r4, [sp, #12]
 8008ee0:	43a3      	bics	r3, r4
 8008ee2:	d11a      	bne.n	8008f1a <_dtoa_r+0xaa>
 8008ee4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ee6:	f242 730f 	movw	r3, #9999	; 0x270f
 8008eea:	6013      	str	r3, [r2, #0]
 8008eec:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008ef0:	ea53 0308 	orrs.w	r3, r3, r8
 8008ef4:	f000 8512 	beq.w	800991c <_dtoa_r+0xaac>
 8008ef8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008efa:	b953      	cbnz	r3, 8008f12 <_dtoa_r+0xa2>
 8008efc:	4b95      	ldr	r3, [pc, #596]	; (8009154 <_dtoa_r+0x2e4>)
 8008efe:	e01f      	b.n	8008f40 <_dtoa_r+0xd0>
 8008f00:	4b95      	ldr	r3, [pc, #596]	; (8009158 <_dtoa_r+0x2e8>)
 8008f02:	9300      	str	r3, [sp, #0]
 8008f04:	3308      	adds	r3, #8
 8008f06:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008f08:	6013      	str	r3, [r2, #0]
 8008f0a:	9800      	ldr	r0, [sp, #0]
 8008f0c:	b015      	add	sp, #84	; 0x54
 8008f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f12:	4b90      	ldr	r3, [pc, #576]	; (8009154 <_dtoa_r+0x2e4>)
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	3303      	adds	r3, #3
 8008f18:	e7f5      	b.n	8008f06 <_dtoa_r+0x96>
 8008f1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f1e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f26:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008f2a:	d10b      	bne.n	8008f44 <_dtoa_r+0xd4>
 8008f2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f2e:	2301      	movs	r3, #1
 8008f30:	6013      	str	r3, [r2, #0]
 8008f32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f000 84ee 	beq.w	8009916 <_dtoa_r+0xaa6>
 8008f3a:	4888      	ldr	r0, [pc, #544]	; (800915c <_dtoa_r+0x2ec>)
 8008f3c:	6018      	str	r0, [r3, #0]
 8008f3e:	1e43      	subs	r3, r0, #1
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	e7e2      	b.n	8008f0a <_dtoa_r+0x9a>
 8008f44:	a913      	add	r1, sp, #76	; 0x4c
 8008f46:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008f4a:	aa12      	add	r2, sp, #72	; 0x48
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	f001 fc95 	bl	800a87c <__d2b>
 8008f52:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8008f56:	4605      	mov	r5, r0
 8008f58:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008f5a:	2900      	cmp	r1, #0
 8008f5c:	d047      	beq.n	8008fee <_dtoa_r+0x17e>
 8008f5e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008f60:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008f64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008f68:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8008f6c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008f70:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008f74:	2400      	movs	r4, #0
 8008f76:	ec43 2b16 	vmov	d6, r2, r3
 8008f7a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008f7e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8009130 <_dtoa_r+0x2c0>
 8008f82:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008f86:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8009138 <_dtoa_r+0x2c8>
 8008f8a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008f8e:	eeb0 7b46 	vmov.f64	d7, d6
 8008f92:	ee06 1a90 	vmov	s13, r1
 8008f96:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8008f9a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8009140 <_dtoa_r+0x2d0>
 8008f9e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008fa2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008fa6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fae:	ee16 ba90 	vmov	fp, s13
 8008fb2:	9411      	str	r4, [sp, #68]	; 0x44
 8008fb4:	d508      	bpl.n	8008fc8 <_dtoa_r+0x158>
 8008fb6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008fba:	eeb4 6b47 	vcmp.f64	d6, d7
 8008fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fc2:	bf18      	it	ne
 8008fc4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008fc8:	f1bb 0f16 	cmp.w	fp, #22
 8008fcc:	d832      	bhi.n	8009034 <_dtoa_r+0x1c4>
 8008fce:	4b64      	ldr	r3, [pc, #400]	; (8009160 <_dtoa_r+0x2f0>)
 8008fd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008fd4:	ed93 7b00 	vldr	d7, [r3]
 8008fd8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8008fdc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fe4:	d501      	bpl.n	8008fea <_dtoa_r+0x17a>
 8008fe6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008fea:	2300      	movs	r3, #0
 8008fec:	e023      	b.n	8009036 <_dtoa_r+0x1c6>
 8008fee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008ff0:	4401      	add	r1, r0
 8008ff2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008ff6:	2b20      	cmp	r3, #32
 8008ff8:	bfc3      	ittte	gt
 8008ffa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008ffe:	fa04 f303 	lslgt.w	r3, r4, r3
 8009002:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009006:	f1c3 0320 	rsble	r3, r3, #32
 800900a:	bfc6      	itte	gt
 800900c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009010:	ea43 0308 	orrgt.w	r3, r3, r8
 8009014:	fa08 f303 	lslle.w	r3, r8, r3
 8009018:	ee07 3a90 	vmov	s15, r3
 800901c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009020:	3901      	subs	r1, #1
 8009022:	ed8d 7b00 	vstr	d7, [sp]
 8009026:	9c01      	ldr	r4, [sp, #4]
 8009028:	e9dd 2300 	ldrd	r2, r3, [sp]
 800902c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009030:	2401      	movs	r4, #1
 8009032:	e7a0      	b.n	8008f76 <_dtoa_r+0x106>
 8009034:	2301      	movs	r3, #1
 8009036:	930f      	str	r3, [sp, #60]	; 0x3c
 8009038:	1a43      	subs	r3, r0, r1
 800903a:	1e5a      	subs	r2, r3, #1
 800903c:	bf45      	ittet	mi
 800903e:	f1c3 0301 	rsbmi	r3, r3, #1
 8009042:	9305      	strmi	r3, [sp, #20]
 8009044:	2300      	movpl	r3, #0
 8009046:	2300      	movmi	r3, #0
 8009048:	9206      	str	r2, [sp, #24]
 800904a:	bf54      	ite	pl
 800904c:	9305      	strpl	r3, [sp, #20]
 800904e:	9306      	strmi	r3, [sp, #24]
 8009050:	f1bb 0f00 	cmp.w	fp, #0
 8009054:	db18      	blt.n	8009088 <_dtoa_r+0x218>
 8009056:	9b06      	ldr	r3, [sp, #24]
 8009058:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800905c:	445b      	add	r3, fp
 800905e:	9306      	str	r3, [sp, #24]
 8009060:	2300      	movs	r3, #0
 8009062:	9a07      	ldr	r2, [sp, #28]
 8009064:	2a09      	cmp	r2, #9
 8009066:	d849      	bhi.n	80090fc <_dtoa_r+0x28c>
 8009068:	2a05      	cmp	r2, #5
 800906a:	bfc4      	itt	gt
 800906c:	3a04      	subgt	r2, #4
 800906e:	9207      	strgt	r2, [sp, #28]
 8009070:	9a07      	ldr	r2, [sp, #28]
 8009072:	f1a2 0202 	sub.w	r2, r2, #2
 8009076:	bfcc      	ite	gt
 8009078:	2400      	movgt	r4, #0
 800907a:	2401      	movle	r4, #1
 800907c:	2a03      	cmp	r2, #3
 800907e:	d848      	bhi.n	8009112 <_dtoa_r+0x2a2>
 8009080:	e8df f002 	tbb	[pc, r2]
 8009084:	3a2c2e0b 	.word	0x3a2c2e0b
 8009088:	9b05      	ldr	r3, [sp, #20]
 800908a:	2200      	movs	r2, #0
 800908c:	eba3 030b 	sub.w	r3, r3, fp
 8009090:	9305      	str	r3, [sp, #20]
 8009092:	920e      	str	r2, [sp, #56]	; 0x38
 8009094:	f1cb 0300 	rsb	r3, fp, #0
 8009098:	e7e3      	b.n	8009062 <_dtoa_r+0x1f2>
 800909a:	2200      	movs	r2, #0
 800909c:	9208      	str	r2, [sp, #32]
 800909e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090a0:	2a00      	cmp	r2, #0
 80090a2:	dc39      	bgt.n	8009118 <_dtoa_r+0x2a8>
 80090a4:	f04f 0a01 	mov.w	sl, #1
 80090a8:	46d1      	mov	r9, sl
 80090aa:	4652      	mov	r2, sl
 80090ac:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80090b0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80090b2:	2100      	movs	r1, #0
 80090b4:	6079      	str	r1, [r7, #4]
 80090b6:	2004      	movs	r0, #4
 80090b8:	f100 0c14 	add.w	ip, r0, #20
 80090bc:	4594      	cmp	ip, r2
 80090be:	6879      	ldr	r1, [r7, #4]
 80090c0:	d92f      	bls.n	8009122 <_dtoa_r+0x2b2>
 80090c2:	4630      	mov	r0, r6
 80090c4:	930c      	str	r3, [sp, #48]	; 0x30
 80090c6:	f000 fff1 	bl	800a0ac <_Balloc>
 80090ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090cc:	9000      	str	r0, [sp, #0]
 80090ce:	4602      	mov	r2, r0
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d149      	bne.n	8009168 <_dtoa_r+0x2f8>
 80090d4:	4b23      	ldr	r3, [pc, #140]	; (8009164 <_dtoa_r+0x2f4>)
 80090d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80090da:	e6df      	b.n	8008e9c <_dtoa_r+0x2c>
 80090dc:	2201      	movs	r2, #1
 80090de:	e7dd      	b.n	800909c <_dtoa_r+0x22c>
 80090e0:	2200      	movs	r2, #0
 80090e2:	9208      	str	r2, [sp, #32]
 80090e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090e6:	eb0b 0a02 	add.w	sl, fp, r2
 80090ea:	f10a 0901 	add.w	r9, sl, #1
 80090ee:	464a      	mov	r2, r9
 80090f0:	2a01      	cmp	r2, #1
 80090f2:	bfb8      	it	lt
 80090f4:	2201      	movlt	r2, #1
 80090f6:	e7db      	b.n	80090b0 <_dtoa_r+0x240>
 80090f8:	2201      	movs	r2, #1
 80090fa:	e7f2      	b.n	80090e2 <_dtoa_r+0x272>
 80090fc:	2401      	movs	r4, #1
 80090fe:	2200      	movs	r2, #0
 8009100:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009104:	f04f 3aff 	mov.w	sl, #4294967295
 8009108:	2100      	movs	r1, #0
 800910a:	46d1      	mov	r9, sl
 800910c:	2212      	movs	r2, #18
 800910e:	9109      	str	r1, [sp, #36]	; 0x24
 8009110:	e7ce      	b.n	80090b0 <_dtoa_r+0x240>
 8009112:	2201      	movs	r2, #1
 8009114:	9208      	str	r2, [sp, #32]
 8009116:	e7f5      	b.n	8009104 <_dtoa_r+0x294>
 8009118:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800911c:	46d1      	mov	r9, sl
 800911e:	4652      	mov	r2, sl
 8009120:	e7c6      	b.n	80090b0 <_dtoa_r+0x240>
 8009122:	3101      	adds	r1, #1
 8009124:	6079      	str	r1, [r7, #4]
 8009126:	0040      	lsls	r0, r0, #1
 8009128:	e7c6      	b.n	80090b8 <_dtoa_r+0x248>
 800912a:	bf00      	nop
 800912c:	f3af 8000 	nop.w
 8009130:	636f4361 	.word	0x636f4361
 8009134:	3fd287a7 	.word	0x3fd287a7
 8009138:	8b60c8b3 	.word	0x8b60c8b3
 800913c:	3fc68a28 	.word	0x3fc68a28
 8009140:	509f79fb 	.word	0x509f79fb
 8009144:	3fd34413 	.word	0x3fd34413
 8009148:	0800bcb6 	.word	0x0800bcb6
 800914c:	0800bccd 	.word	0x0800bccd
 8009150:	7ff00000 	.word	0x7ff00000
 8009154:	0800bcb2 	.word	0x0800bcb2
 8009158:	0800bca9 	.word	0x0800bca9
 800915c:	0800bb29 	.word	0x0800bb29
 8009160:	0800be48 	.word	0x0800be48
 8009164:	0800bd2c 	.word	0x0800bd2c
 8009168:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800916a:	9900      	ldr	r1, [sp, #0]
 800916c:	6011      	str	r1, [r2, #0]
 800916e:	f1b9 0f0e 	cmp.w	r9, #14
 8009172:	d872      	bhi.n	800925a <_dtoa_r+0x3ea>
 8009174:	2c00      	cmp	r4, #0
 8009176:	d070      	beq.n	800925a <_dtoa_r+0x3ea>
 8009178:	f1bb 0f00 	cmp.w	fp, #0
 800917c:	f340 80a6 	ble.w	80092cc <_dtoa_r+0x45c>
 8009180:	49ca      	ldr	r1, [pc, #808]	; (80094ac <_dtoa_r+0x63c>)
 8009182:	f00b 020f 	and.w	r2, fp, #15
 8009186:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800918a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800918e:	ed92 7b00 	vldr	d7, [r2]
 8009192:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009196:	f000 808d 	beq.w	80092b4 <_dtoa_r+0x444>
 800919a:	4ac5      	ldr	r2, [pc, #788]	; (80094b0 <_dtoa_r+0x640>)
 800919c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80091a0:	ed92 6b08 	vldr	d6, [r2, #32]
 80091a4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80091a8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80091ac:	f001 010f 	and.w	r1, r1, #15
 80091b0:	2203      	movs	r2, #3
 80091b2:	48bf      	ldr	r0, [pc, #764]	; (80094b0 <_dtoa_r+0x640>)
 80091b4:	2900      	cmp	r1, #0
 80091b6:	d17f      	bne.n	80092b8 <_dtoa_r+0x448>
 80091b8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80091bc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80091c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80091c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80091c6:	2900      	cmp	r1, #0
 80091c8:	f000 80b2 	beq.w	8009330 <_dtoa_r+0x4c0>
 80091cc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80091d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80091d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80091d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091dc:	f140 80a8 	bpl.w	8009330 <_dtoa_r+0x4c0>
 80091e0:	f1b9 0f00 	cmp.w	r9, #0
 80091e4:	f000 80a4 	beq.w	8009330 <_dtoa_r+0x4c0>
 80091e8:	f1ba 0f00 	cmp.w	sl, #0
 80091ec:	dd31      	ble.n	8009252 <_dtoa_r+0x3e2>
 80091ee:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80091f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80091f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80091fa:	f10b 37ff 	add.w	r7, fp, #4294967295
 80091fe:	3201      	adds	r2, #1
 8009200:	4650      	mov	r0, sl
 8009202:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009206:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800920a:	ee07 2a90 	vmov	s15, r2
 800920e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009212:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009216:	ed8d 5b02 	vstr	d5, [sp, #8]
 800921a:	9c03      	ldr	r4, [sp, #12]
 800921c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009220:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009224:	2800      	cmp	r0, #0
 8009226:	f040 8086 	bne.w	8009336 <_dtoa_r+0x4c6>
 800922a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800922e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009232:	ec42 1b17 	vmov	d7, r1, r2
 8009236:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800923a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800923e:	f300 8272 	bgt.w	8009726 <_dtoa_r+0x8b6>
 8009242:	eeb1 7b47 	vneg.f64	d7, d7
 8009246:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800924a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800924e:	f100 8267 	bmi.w	8009720 <_dtoa_r+0x8b0>
 8009252:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8009256:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800925a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800925c:	2a00      	cmp	r2, #0
 800925e:	f2c0 8129 	blt.w	80094b4 <_dtoa_r+0x644>
 8009262:	f1bb 0f0e 	cmp.w	fp, #14
 8009266:	f300 8125 	bgt.w	80094b4 <_dtoa_r+0x644>
 800926a:	4b90      	ldr	r3, [pc, #576]	; (80094ac <_dtoa_r+0x63c>)
 800926c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009270:	ed93 6b00 	vldr	d6, [r3]
 8009274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009276:	2b00      	cmp	r3, #0
 8009278:	f280 80c3 	bge.w	8009402 <_dtoa_r+0x592>
 800927c:	f1b9 0f00 	cmp.w	r9, #0
 8009280:	f300 80bf 	bgt.w	8009402 <_dtoa_r+0x592>
 8009284:	f040 824c 	bne.w	8009720 <_dtoa_r+0x8b0>
 8009288:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800928c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009290:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009294:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800929c:	464c      	mov	r4, r9
 800929e:	464f      	mov	r7, r9
 80092a0:	f280 8222 	bge.w	80096e8 <_dtoa_r+0x878>
 80092a4:	f8dd 8000 	ldr.w	r8, [sp]
 80092a8:	2331      	movs	r3, #49	; 0x31
 80092aa:	f808 3b01 	strb.w	r3, [r8], #1
 80092ae:	f10b 0b01 	add.w	fp, fp, #1
 80092b2:	e21e      	b.n	80096f2 <_dtoa_r+0x882>
 80092b4:	2202      	movs	r2, #2
 80092b6:	e77c      	b.n	80091b2 <_dtoa_r+0x342>
 80092b8:	07cc      	lsls	r4, r1, #31
 80092ba:	d504      	bpl.n	80092c6 <_dtoa_r+0x456>
 80092bc:	ed90 6b00 	vldr	d6, [r0]
 80092c0:	3201      	adds	r2, #1
 80092c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80092c6:	1049      	asrs	r1, r1, #1
 80092c8:	3008      	adds	r0, #8
 80092ca:	e773      	b.n	80091b4 <_dtoa_r+0x344>
 80092cc:	d02e      	beq.n	800932c <_dtoa_r+0x4bc>
 80092ce:	f1cb 0100 	rsb	r1, fp, #0
 80092d2:	4a76      	ldr	r2, [pc, #472]	; (80094ac <_dtoa_r+0x63c>)
 80092d4:	f001 000f 	and.w	r0, r1, #15
 80092d8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80092dc:	ed92 7b00 	vldr	d7, [r2]
 80092e0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80092e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80092e8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80092ec:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80092f0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80092f4:	486e      	ldr	r0, [pc, #440]	; (80094b0 <_dtoa_r+0x640>)
 80092f6:	1109      	asrs	r1, r1, #4
 80092f8:	2400      	movs	r4, #0
 80092fa:	2202      	movs	r2, #2
 80092fc:	b939      	cbnz	r1, 800930e <_dtoa_r+0x49e>
 80092fe:	2c00      	cmp	r4, #0
 8009300:	f43f af60 	beq.w	80091c4 <_dtoa_r+0x354>
 8009304:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009308:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800930c:	e75a      	b.n	80091c4 <_dtoa_r+0x354>
 800930e:	07cf      	lsls	r7, r1, #31
 8009310:	d509      	bpl.n	8009326 <_dtoa_r+0x4b6>
 8009312:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8009316:	ed90 7b00 	vldr	d7, [r0]
 800931a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800931e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009322:	3201      	adds	r2, #1
 8009324:	2401      	movs	r4, #1
 8009326:	1049      	asrs	r1, r1, #1
 8009328:	3008      	adds	r0, #8
 800932a:	e7e7      	b.n	80092fc <_dtoa_r+0x48c>
 800932c:	2202      	movs	r2, #2
 800932e:	e749      	b.n	80091c4 <_dtoa_r+0x354>
 8009330:	465f      	mov	r7, fp
 8009332:	4648      	mov	r0, r9
 8009334:	e765      	b.n	8009202 <_dtoa_r+0x392>
 8009336:	ec42 1b17 	vmov	d7, r1, r2
 800933a:	4a5c      	ldr	r2, [pc, #368]	; (80094ac <_dtoa_r+0x63c>)
 800933c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009340:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009344:	9a00      	ldr	r2, [sp, #0]
 8009346:	1814      	adds	r4, r2, r0
 8009348:	9a08      	ldr	r2, [sp, #32]
 800934a:	b352      	cbz	r2, 80093a2 <_dtoa_r+0x532>
 800934c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009350:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009354:	f8dd 8000 	ldr.w	r8, [sp]
 8009358:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800935c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009360:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009364:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009368:	ee14 2a90 	vmov	r2, s9
 800936c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009370:	3230      	adds	r2, #48	; 0x30
 8009372:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009376:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800937a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800937e:	f808 2b01 	strb.w	r2, [r8], #1
 8009382:	d439      	bmi.n	80093f8 <_dtoa_r+0x588>
 8009384:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009388:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800938c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009390:	d472      	bmi.n	8009478 <_dtoa_r+0x608>
 8009392:	45a0      	cmp	r8, r4
 8009394:	f43f af5d 	beq.w	8009252 <_dtoa_r+0x3e2>
 8009398:	ee27 7b03 	vmul.f64	d7, d7, d3
 800939c:	ee26 6b03 	vmul.f64	d6, d6, d3
 80093a0:	e7e0      	b.n	8009364 <_dtoa_r+0x4f4>
 80093a2:	f8dd 8000 	ldr.w	r8, [sp]
 80093a6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80093aa:	4621      	mov	r1, r4
 80093ac:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80093b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80093b4:	ee14 2a90 	vmov	r2, s9
 80093b8:	3230      	adds	r2, #48	; 0x30
 80093ba:	f808 2b01 	strb.w	r2, [r8], #1
 80093be:	45a0      	cmp	r8, r4
 80093c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80093c4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80093c8:	d118      	bne.n	80093fc <_dtoa_r+0x58c>
 80093ca:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80093ce:	ee37 4b05 	vadd.f64	d4, d7, d5
 80093d2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80093d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093da:	dc4d      	bgt.n	8009478 <_dtoa_r+0x608>
 80093dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80093e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80093e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093e8:	f57f af33 	bpl.w	8009252 <_dtoa_r+0x3e2>
 80093ec:	4688      	mov	r8, r1
 80093ee:	3901      	subs	r1, #1
 80093f0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80093f4:	2b30      	cmp	r3, #48	; 0x30
 80093f6:	d0f9      	beq.n	80093ec <_dtoa_r+0x57c>
 80093f8:	46bb      	mov	fp, r7
 80093fa:	e02a      	b.n	8009452 <_dtoa_r+0x5e2>
 80093fc:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009400:	e7d6      	b.n	80093b0 <_dtoa_r+0x540>
 8009402:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009406:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800940a:	f8dd 8000 	ldr.w	r8, [sp]
 800940e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009412:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009416:	ee15 3a10 	vmov	r3, s10
 800941a:	3330      	adds	r3, #48	; 0x30
 800941c:	f808 3b01 	strb.w	r3, [r8], #1
 8009420:	9b00      	ldr	r3, [sp, #0]
 8009422:	eba8 0303 	sub.w	r3, r8, r3
 8009426:	4599      	cmp	r9, r3
 8009428:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800942c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009430:	d133      	bne.n	800949a <_dtoa_r+0x62a>
 8009432:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009436:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800943a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800943e:	dc1a      	bgt.n	8009476 <_dtoa_r+0x606>
 8009440:	eeb4 7b46 	vcmp.f64	d7, d6
 8009444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009448:	d103      	bne.n	8009452 <_dtoa_r+0x5e2>
 800944a:	ee15 3a10 	vmov	r3, s10
 800944e:	07d9      	lsls	r1, r3, #31
 8009450:	d411      	bmi.n	8009476 <_dtoa_r+0x606>
 8009452:	4629      	mov	r1, r5
 8009454:	4630      	mov	r0, r6
 8009456:	f000 fe69 	bl	800a12c <_Bfree>
 800945a:	2300      	movs	r3, #0
 800945c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800945e:	f888 3000 	strb.w	r3, [r8]
 8009462:	f10b 0301 	add.w	r3, fp, #1
 8009466:	6013      	str	r3, [r2, #0]
 8009468:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800946a:	2b00      	cmp	r3, #0
 800946c:	f43f ad4d 	beq.w	8008f0a <_dtoa_r+0x9a>
 8009470:	f8c3 8000 	str.w	r8, [r3]
 8009474:	e549      	b.n	8008f0a <_dtoa_r+0x9a>
 8009476:	465f      	mov	r7, fp
 8009478:	4643      	mov	r3, r8
 800947a:	4698      	mov	r8, r3
 800947c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009480:	2a39      	cmp	r2, #57	; 0x39
 8009482:	d106      	bne.n	8009492 <_dtoa_r+0x622>
 8009484:	9a00      	ldr	r2, [sp, #0]
 8009486:	429a      	cmp	r2, r3
 8009488:	d1f7      	bne.n	800947a <_dtoa_r+0x60a>
 800948a:	9900      	ldr	r1, [sp, #0]
 800948c:	2230      	movs	r2, #48	; 0x30
 800948e:	3701      	adds	r7, #1
 8009490:	700a      	strb	r2, [r1, #0]
 8009492:	781a      	ldrb	r2, [r3, #0]
 8009494:	3201      	adds	r2, #1
 8009496:	701a      	strb	r2, [r3, #0]
 8009498:	e7ae      	b.n	80093f8 <_dtoa_r+0x588>
 800949a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800949e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80094a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094a6:	d1b2      	bne.n	800940e <_dtoa_r+0x59e>
 80094a8:	e7d3      	b.n	8009452 <_dtoa_r+0x5e2>
 80094aa:	bf00      	nop
 80094ac:	0800be48 	.word	0x0800be48
 80094b0:	0800be20 	.word	0x0800be20
 80094b4:	9908      	ldr	r1, [sp, #32]
 80094b6:	2900      	cmp	r1, #0
 80094b8:	f000 80d1 	beq.w	800965e <_dtoa_r+0x7ee>
 80094bc:	9907      	ldr	r1, [sp, #28]
 80094be:	2901      	cmp	r1, #1
 80094c0:	f300 80b4 	bgt.w	800962c <_dtoa_r+0x7bc>
 80094c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80094c6:	2900      	cmp	r1, #0
 80094c8:	f000 80ac 	beq.w	8009624 <_dtoa_r+0x7b4>
 80094cc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80094d0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80094d4:	461c      	mov	r4, r3
 80094d6:	930a      	str	r3, [sp, #40]	; 0x28
 80094d8:	9b05      	ldr	r3, [sp, #20]
 80094da:	4413      	add	r3, r2
 80094dc:	9305      	str	r3, [sp, #20]
 80094de:	9b06      	ldr	r3, [sp, #24]
 80094e0:	2101      	movs	r1, #1
 80094e2:	4413      	add	r3, r2
 80094e4:	4630      	mov	r0, r6
 80094e6:	9306      	str	r3, [sp, #24]
 80094e8:	f000 ff26 	bl	800a338 <__i2b>
 80094ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ee:	4607      	mov	r7, r0
 80094f0:	f1b8 0f00 	cmp.w	r8, #0
 80094f4:	dd0d      	ble.n	8009512 <_dtoa_r+0x6a2>
 80094f6:	9a06      	ldr	r2, [sp, #24]
 80094f8:	2a00      	cmp	r2, #0
 80094fa:	dd0a      	ble.n	8009512 <_dtoa_r+0x6a2>
 80094fc:	4542      	cmp	r2, r8
 80094fe:	9905      	ldr	r1, [sp, #20]
 8009500:	bfa8      	it	ge
 8009502:	4642      	movge	r2, r8
 8009504:	1a89      	subs	r1, r1, r2
 8009506:	9105      	str	r1, [sp, #20]
 8009508:	9906      	ldr	r1, [sp, #24]
 800950a:	eba8 0802 	sub.w	r8, r8, r2
 800950e:	1a8a      	subs	r2, r1, r2
 8009510:	9206      	str	r2, [sp, #24]
 8009512:	b303      	cbz	r3, 8009556 <_dtoa_r+0x6e6>
 8009514:	9a08      	ldr	r2, [sp, #32]
 8009516:	2a00      	cmp	r2, #0
 8009518:	f000 80a6 	beq.w	8009668 <_dtoa_r+0x7f8>
 800951c:	2c00      	cmp	r4, #0
 800951e:	dd13      	ble.n	8009548 <_dtoa_r+0x6d8>
 8009520:	4639      	mov	r1, r7
 8009522:	4622      	mov	r2, r4
 8009524:	4630      	mov	r0, r6
 8009526:	930c      	str	r3, [sp, #48]	; 0x30
 8009528:	f000 ffc2 	bl	800a4b0 <__pow5mult>
 800952c:	462a      	mov	r2, r5
 800952e:	4601      	mov	r1, r0
 8009530:	4607      	mov	r7, r0
 8009532:	4630      	mov	r0, r6
 8009534:	f000 ff16 	bl	800a364 <__multiply>
 8009538:	4629      	mov	r1, r5
 800953a:	900a      	str	r0, [sp, #40]	; 0x28
 800953c:	4630      	mov	r0, r6
 800953e:	f000 fdf5 	bl	800a12c <_Bfree>
 8009542:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009544:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009546:	4615      	mov	r5, r2
 8009548:	1b1a      	subs	r2, r3, r4
 800954a:	d004      	beq.n	8009556 <_dtoa_r+0x6e6>
 800954c:	4629      	mov	r1, r5
 800954e:	4630      	mov	r0, r6
 8009550:	f000 ffae 	bl	800a4b0 <__pow5mult>
 8009554:	4605      	mov	r5, r0
 8009556:	2101      	movs	r1, #1
 8009558:	4630      	mov	r0, r6
 800955a:	f000 feed 	bl	800a338 <__i2b>
 800955e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009560:	2b00      	cmp	r3, #0
 8009562:	4604      	mov	r4, r0
 8009564:	f340 8082 	ble.w	800966c <_dtoa_r+0x7fc>
 8009568:	461a      	mov	r2, r3
 800956a:	4601      	mov	r1, r0
 800956c:	4630      	mov	r0, r6
 800956e:	f000 ff9f 	bl	800a4b0 <__pow5mult>
 8009572:	9b07      	ldr	r3, [sp, #28]
 8009574:	2b01      	cmp	r3, #1
 8009576:	4604      	mov	r4, r0
 8009578:	dd7b      	ble.n	8009672 <_dtoa_r+0x802>
 800957a:	2300      	movs	r3, #0
 800957c:	930a      	str	r3, [sp, #40]	; 0x28
 800957e:	6922      	ldr	r2, [r4, #16]
 8009580:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009584:	6910      	ldr	r0, [r2, #16]
 8009586:	f000 fe87 	bl	800a298 <__hi0bits>
 800958a:	f1c0 0020 	rsb	r0, r0, #32
 800958e:	9b06      	ldr	r3, [sp, #24]
 8009590:	4418      	add	r0, r3
 8009592:	f010 001f 	ands.w	r0, r0, #31
 8009596:	f000 808d 	beq.w	80096b4 <_dtoa_r+0x844>
 800959a:	f1c0 0220 	rsb	r2, r0, #32
 800959e:	2a04      	cmp	r2, #4
 80095a0:	f340 8086 	ble.w	80096b0 <_dtoa_r+0x840>
 80095a4:	f1c0 001c 	rsb	r0, r0, #28
 80095a8:	9b05      	ldr	r3, [sp, #20]
 80095aa:	4403      	add	r3, r0
 80095ac:	9305      	str	r3, [sp, #20]
 80095ae:	9b06      	ldr	r3, [sp, #24]
 80095b0:	4403      	add	r3, r0
 80095b2:	4480      	add	r8, r0
 80095b4:	9306      	str	r3, [sp, #24]
 80095b6:	9b05      	ldr	r3, [sp, #20]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	dd05      	ble.n	80095c8 <_dtoa_r+0x758>
 80095bc:	4629      	mov	r1, r5
 80095be:	461a      	mov	r2, r3
 80095c0:	4630      	mov	r0, r6
 80095c2:	f000 ffcf 	bl	800a564 <__lshift>
 80095c6:	4605      	mov	r5, r0
 80095c8:	9b06      	ldr	r3, [sp, #24]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	dd05      	ble.n	80095da <_dtoa_r+0x76a>
 80095ce:	4621      	mov	r1, r4
 80095d0:	461a      	mov	r2, r3
 80095d2:	4630      	mov	r0, r6
 80095d4:	f000 ffc6 	bl	800a564 <__lshift>
 80095d8:	4604      	mov	r4, r0
 80095da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d06b      	beq.n	80096b8 <_dtoa_r+0x848>
 80095e0:	4621      	mov	r1, r4
 80095e2:	4628      	mov	r0, r5
 80095e4:	f001 f82a 	bl	800a63c <__mcmp>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	da65      	bge.n	80096b8 <_dtoa_r+0x848>
 80095ec:	2300      	movs	r3, #0
 80095ee:	4629      	mov	r1, r5
 80095f0:	220a      	movs	r2, #10
 80095f2:	4630      	mov	r0, r6
 80095f4:	f000 fdbc 	bl	800a170 <__multadd>
 80095f8:	9b08      	ldr	r3, [sp, #32]
 80095fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80095fe:	4605      	mov	r5, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	f000 8192 	beq.w	800992a <_dtoa_r+0xaba>
 8009606:	4639      	mov	r1, r7
 8009608:	2300      	movs	r3, #0
 800960a:	220a      	movs	r2, #10
 800960c:	4630      	mov	r0, r6
 800960e:	f000 fdaf 	bl	800a170 <__multadd>
 8009612:	f1ba 0f00 	cmp.w	sl, #0
 8009616:	4607      	mov	r7, r0
 8009618:	f300 808e 	bgt.w	8009738 <_dtoa_r+0x8c8>
 800961c:	9b07      	ldr	r3, [sp, #28]
 800961e:	2b02      	cmp	r3, #2
 8009620:	dc51      	bgt.n	80096c6 <_dtoa_r+0x856>
 8009622:	e089      	b.n	8009738 <_dtoa_r+0x8c8>
 8009624:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009626:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800962a:	e751      	b.n	80094d0 <_dtoa_r+0x660>
 800962c:	f109 34ff 	add.w	r4, r9, #4294967295
 8009630:	42a3      	cmp	r3, r4
 8009632:	bfbf      	itttt	lt
 8009634:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009636:	1ae3      	sublt	r3, r4, r3
 8009638:	18d2      	addlt	r2, r2, r3
 800963a:	4613      	movlt	r3, r2
 800963c:	bfb7      	itett	lt
 800963e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009640:	1b1c      	subge	r4, r3, r4
 8009642:	4623      	movlt	r3, r4
 8009644:	2400      	movlt	r4, #0
 8009646:	f1b9 0f00 	cmp.w	r9, #0
 800964a:	bfb5      	itete	lt
 800964c:	9a05      	ldrlt	r2, [sp, #20]
 800964e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8009652:	eba2 0809 	sublt.w	r8, r2, r9
 8009656:	464a      	movge	r2, r9
 8009658:	bfb8      	it	lt
 800965a:	2200      	movlt	r2, #0
 800965c:	e73b      	b.n	80094d6 <_dtoa_r+0x666>
 800965e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009662:	9f08      	ldr	r7, [sp, #32]
 8009664:	461c      	mov	r4, r3
 8009666:	e743      	b.n	80094f0 <_dtoa_r+0x680>
 8009668:	461a      	mov	r2, r3
 800966a:	e76f      	b.n	800954c <_dtoa_r+0x6dc>
 800966c:	9b07      	ldr	r3, [sp, #28]
 800966e:	2b01      	cmp	r3, #1
 8009670:	dc18      	bgt.n	80096a4 <_dtoa_r+0x834>
 8009672:	9b02      	ldr	r3, [sp, #8]
 8009674:	b9b3      	cbnz	r3, 80096a4 <_dtoa_r+0x834>
 8009676:	9b03      	ldr	r3, [sp, #12]
 8009678:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800967c:	b9a2      	cbnz	r2, 80096a8 <_dtoa_r+0x838>
 800967e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009682:	0d12      	lsrs	r2, r2, #20
 8009684:	0512      	lsls	r2, r2, #20
 8009686:	b18a      	cbz	r2, 80096ac <_dtoa_r+0x83c>
 8009688:	9b05      	ldr	r3, [sp, #20]
 800968a:	3301      	adds	r3, #1
 800968c:	9305      	str	r3, [sp, #20]
 800968e:	9b06      	ldr	r3, [sp, #24]
 8009690:	3301      	adds	r3, #1
 8009692:	9306      	str	r3, [sp, #24]
 8009694:	2301      	movs	r3, #1
 8009696:	930a      	str	r3, [sp, #40]	; 0x28
 8009698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800969a:	2b00      	cmp	r3, #0
 800969c:	f47f af6f 	bne.w	800957e <_dtoa_r+0x70e>
 80096a0:	2001      	movs	r0, #1
 80096a2:	e774      	b.n	800958e <_dtoa_r+0x71e>
 80096a4:	2300      	movs	r3, #0
 80096a6:	e7f6      	b.n	8009696 <_dtoa_r+0x826>
 80096a8:	9b02      	ldr	r3, [sp, #8]
 80096aa:	e7f4      	b.n	8009696 <_dtoa_r+0x826>
 80096ac:	920a      	str	r2, [sp, #40]	; 0x28
 80096ae:	e7f3      	b.n	8009698 <_dtoa_r+0x828>
 80096b0:	d081      	beq.n	80095b6 <_dtoa_r+0x746>
 80096b2:	4610      	mov	r0, r2
 80096b4:	301c      	adds	r0, #28
 80096b6:	e777      	b.n	80095a8 <_dtoa_r+0x738>
 80096b8:	f1b9 0f00 	cmp.w	r9, #0
 80096bc:	dc37      	bgt.n	800972e <_dtoa_r+0x8be>
 80096be:	9b07      	ldr	r3, [sp, #28]
 80096c0:	2b02      	cmp	r3, #2
 80096c2:	dd34      	ble.n	800972e <_dtoa_r+0x8be>
 80096c4:	46ca      	mov	sl, r9
 80096c6:	f1ba 0f00 	cmp.w	sl, #0
 80096ca:	d10d      	bne.n	80096e8 <_dtoa_r+0x878>
 80096cc:	4621      	mov	r1, r4
 80096ce:	4653      	mov	r3, sl
 80096d0:	2205      	movs	r2, #5
 80096d2:	4630      	mov	r0, r6
 80096d4:	f000 fd4c 	bl	800a170 <__multadd>
 80096d8:	4601      	mov	r1, r0
 80096da:	4604      	mov	r4, r0
 80096dc:	4628      	mov	r0, r5
 80096de:	f000 ffad 	bl	800a63c <__mcmp>
 80096e2:	2800      	cmp	r0, #0
 80096e4:	f73f adde 	bgt.w	80092a4 <_dtoa_r+0x434>
 80096e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096ea:	f8dd 8000 	ldr.w	r8, [sp]
 80096ee:	ea6f 0b03 	mvn.w	fp, r3
 80096f2:	f04f 0900 	mov.w	r9, #0
 80096f6:	4621      	mov	r1, r4
 80096f8:	4630      	mov	r0, r6
 80096fa:	f000 fd17 	bl	800a12c <_Bfree>
 80096fe:	2f00      	cmp	r7, #0
 8009700:	f43f aea7 	beq.w	8009452 <_dtoa_r+0x5e2>
 8009704:	f1b9 0f00 	cmp.w	r9, #0
 8009708:	d005      	beq.n	8009716 <_dtoa_r+0x8a6>
 800970a:	45b9      	cmp	r9, r7
 800970c:	d003      	beq.n	8009716 <_dtoa_r+0x8a6>
 800970e:	4649      	mov	r1, r9
 8009710:	4630      	mov	r0, r6
 8009712:	f000 fd0b 	bl	800a12c <_Bfree>
 8009716:	4639      	mov	r1, r7
 8009718:	4630      	mov	r0, r6
 800971a:	f000 fd07 	bl	800a12c <_Bfree>
 800971e:	e698      	b.n	8009452 <_dtoa_r+0x5e2>
 8009720:	2400      	movs	r4, #0
 8009722:	4627      	mov	r7, r4
 8009724:	e7e0      	b.n	80096e8 <_dtoa_r+0x878>
 8009726:	46bb      	mov	fp, r7
 8009728:	4604      	mov	r4, r0
 800972a:	4607      	mov	r7, r0
 800972c:	e5ba      	b.n	80092a4 <_dtoa_r+0x434>
 800972e:	9b08      	ldr	r3, [sp, #32]
 8009730:	46ca      	mov	sl, r9
 8009732:	2b00      	cmp	r3, #0
 8009734:	f000 8100 	beq.w	8009938 <_dtoa_r+0xac8>
 8009738:	f1b8 0f00 	cmp.w	r8, #0
 800973c:	dd05      	ble.n	800974a <_dtoa_r+0x8da>
 800973e:	4639      	mov	r1, r7
 8009740:	4642      	mov	r2, r8
 8009742:	4630      	mov	r0, r6
 8009744:	f000 ff0e 	bl	800a564 <__lshift>
 8009748:	4607      	mov	r7, r0
 800974a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800974c:	2b00      	cmp	r3, #0
 800974e:	d05d      	beq.n	800980c <_dtoa_r+0x99c>
 8009750:	6879      	ldr	r1, [r7, #4]
 8009752:	4630      	mov	r0, r6
 8009754:	f000 fcaa 	bl	800a0ac <_Balloc>
 8009758:	4680      	mov	r8, r0
 800975a:	b928      	cbnz	r0, 8009768 <_dtoa_r+0x8f8>
 800975c:	4b82      	ldr	r3, [pc, #520]	; (8009968 <_dtoa_r+0xaf8>)
 800975e:	4602      	mov	r2, r0
 8009760:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009764:	f7ff bb9a 	b.w	8008e9c <_dtoa_r+0x2c>
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	3202      	adds	r2, #2
 800976c:	0092      	lsls	r2, r2, #2
 800976e:	f107 010c 	add.w	r1, r7, #12
 8009772:	300c      	adds	r0, #12
 8009774:	f000 fc8c 	bl	800a090 <memcpy>
 8009778:	2201      	movs	r2, #1
 800977a:	4641      	mov	r1, r8
 800977c:	4630      	mov	r0, r6
 800977e:	f000 fef1 	bl	800a564 <__lshift>
 8009782:	9b00      	ldr	r3, [sp, #0]
 8009784:	3301      	adds	r3, #1
 8009786:	9305      	str	r3, [sp, #20]
 8009788:	9b00      	ldr	r3, [sp, #0]
 800978a:	4453      	add	r3, sl
 800978c:	9309      	str	r3, [sp, #36]	; 0x24
 800978e:	9b02      	ldr	r3, [sp, #8]
 8009790:	f003 0301 	and.w	r3, r3, #1
 8009794:	46b9      	mov	r9, r7
 8009796:	9308      	str	r3, [sp, #32]
 8009798:	4607      	mov	r7, r0
 800979a:	9b05      	ldr	r3, [sp, #20]
 800979c:	4621      	mov	r1, r4
 800979e:	3b01      	subs	r3, #1
 80097a0:	4628      	mov	r0, r5
 80097a2:	9302      	str	r3, [sp, #8]
 80097a4:	f7ff fad6 	bl	8008d54 <quorem>
 80097a8:	4603      	mov	r3, r0
 80097aa:	3330      	adds	r3, #48	; 0x30
 80097ac:	9006      	str	r0, [sp, #24]
 80097ae:	4649      	mov	r1, r9
 80097b0:	4628      	mov	r0, r5
 80097b2:	930a      	str	r3, [sp, #40]	; 0x28
 80097b4:	f000 ff42 	bl	800a63c <__mcmp>
 80097b8:	463a      	mov	r2, r7
 80097ba:	4682      	mov	sl, r0
 80097bc:	4621      	mov	r1, r4
 80097be:	4630      	mov	r0, r6
 80097c0:	f000 ff58 	bl	800a674 <__mdiff>
 80097c4:	68c2      	ldr	r2, [r0, #12]
 80097c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097c8:	4680      	mov	r8, r0
 80097ca:	bb0a      	cbnz	r2, 8009810 <_dtoa_r+0x9a0>
 80097cc:	4601      	mov	r1, r0
 80097ce:	4628      	mov	r0, r5
 80097d0:	f000 ff34 	bl	800a63c <__mcmp>
 80097d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097d6:	4602      	mov	r2, r0
 80097d8:	4641      	mov	r1, r8
 80097da:	4630      	mov	r0, r6
 80097dc:	920e      	str	r2, [sp, #56]	; 0x38
 80097de:	930a      	str	r3, [sp, #40]	; 0x28
 80097e0:	f000 fca4 	bl	800a12c <_Bfree>
 80097e4:	9b07      	ldr	r3, [sp, #28]
 80097e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097e8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80097ec:	ea43 0102 	orr.w	r1, r3, r2
 80097f0:	9b08      	ldr	r3, [sp, #32]
 80097f2:	430b      	orrs	r3, r1
 80097f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f6:	d10d      	bne.n	8009814 <_dtoa_r+0x9a4>
 80097f8:	2b39      	cmp	r3, #57	; 0x39
 80097fa:	d029      	beq.n	8009850 <_dtoa_r+0x9e0>
 80097fc:	f1ba 0f00 	cmp.w	sl, #0
 8009800:	dd01      	ble.n	8009806 <_dtoa_r+0x996>
 8009802:	9b06      	ldr	r3, [sp, #24]
 8009804:	3331      	adds	r3, #49	; 0x31
 8009806:	9a02      	ldr	r2, [sp, #8]
 8009808:	7013      	strb	r3, [r2, #0]
 800980a:	e774      	b.n	80096f6 <_dtoa_r+0x886>
 800980c:	4638      	mov	r0, r7
 800980e:	e7b8      	b.n	8009782 <_dtoa_r+0x912>
 8009810:	2201      	movs	r2, #1
 8009812:	e7e1      	b.n	80097d8 <_dtoa_r+0x968>
 8009814:	f1ba 0f00 	cmp.w	sl, #0
 8009818:	db06      	blt.n	8009828 <_dtoa_r+0x9b8>
 800981a:	9907      	ldr	r1, [sp, #28]
 800981c:	ea41 0a0a 	orr.w	sl, r1, sl
 8009820:	9908      	ldr	r1, [sp, #32]
 8009822:	ea5a 0101 	orrs.w	r1, sl, r1
 8009826:	d120      	bne.n	800986a <_dtoa_r+0x9fa>
 8009828:	2a00      	cmp	r2, #0
 800982a:	ddec      	ble.n	8009806 <_dtoa_r+0x996>
 800982c:	4629      	mov	r1, r5
 800982e:	2201      	movs	r2, #1
 8009830:	4630      	mov	r0, r6
 8009832:	9305      	str	r3, [sp, #20]
 8009834:	f000 fe96 	bl	800a564 <__lshift>
 8009838:	4621      	mov	r1, r4
 800983a:	4605      	mov	r5, r0
 800983c:	f000 fefe 	bl	800a63c <__mcmp>
 8009840:	2800      	cmp	r0, #0
 8009842:	9b05      	ldr	r3, [sp, #20]
 8009844:	dc02      	bgt.n	800984c <_dtoa_r+0x9dc>
 8009846:	d1de      	bne.n	8009806 <_dtoa_r+0x996>
 8009848:	07da      	lsls	r2, r3, #31
 800984a:	d5dc      	bpl.n	8009806 <_dtoa_r+0x996>
 800984c:	2b39      	cmp	r3, #57	; 0x39
 800984e:	d1d8      	bne.n	8009802 <_dtoa_r+0x992>
 8009850:	9a02      	ldr	r2, [sp, #8]
 8009852:	2339      	movs	r3, #57	; 0x39
 8009854:	7013      	strb	r3, [r2, #0]
 8009856:	4643      	mov	r3, r8
 8009858:	4698      	mov	r8, r3
 800985a:	3b01      	subs	r3, #1
 800985c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009860:	2a39      	cmp	r2, #57	; 0x39
 8009862:	d051      	beq.n	8009908 <_dtoa_r+0xa98>
 8009864:	3201      	adds	r2, #1
 8009866:	701a      	strb	r2, [r3, #0]
 8009868:	e745      	b.n	80096f6 <_dtoa_r+0x886>
 800986a:	2a00      	cmp	r2, #0
 800986c:	dd03      	ble.n	8009876 <_dtoa_r+0xa06>
 800986e:	2b39      	cmp	r3, #57	; 0x39
 8009870:	d0ee      	beq.n	8009850 <_dtoa_r+0x9e0>
 8009872:	3301      	adds	r3, #1
 8009874:	e7c7      	b.n	8009806 <_dtoa_r+0x996>
 8009876:	9a05      	ldr	r2, [sp, #20]
 8009878:	9909      	ldr	r1, [sp, #36]	; 0x24
 800987a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800987e:	428a      	cmp	r2, r1
 8009880:	d02b      	beq.n	80098da <_dtoa_r+0xa6a>
 8009882:	4629      	mov	r1, r5
 8009884:	2300      	movs	r3, #0
 8009886:	220a      	movs	r2, #10
 8009888:	4630      	mov	r0, r6
 800988a:	f000 fc71 	bl	800a170 <__multadd>
 800988e:	45b9      	cmp	r9, r7
 8009890:	4605      	mov	r5, r0
 8009892:	f04f 0300 	mov.w	r3, #0
 8009896:	f04f 020a 	mov.w	r2, #10
 800989a:	4649      	mov	r1, r9
 800989c:	4630      	mov	r0, r6
 800989e:	d107      	bne.n	80098b0 <_dtoa_r+0xa40>
 80098a0:	f000 fc66 	bl	800a170 <__multadd>
 80098a4:	4681      	mov	r9, r0
 80098a6:	4607      	mov	r7, r0
 80098a8:	9b05      	ldr	r3, [sp, #20]
 80098aa:	3301      	adds	r3, #1
 80098ac:	9305      	str	r3, [sp, #20]
 80098ae:	e774      	b.n	800979a <_dtoa_r+0x92a>
 80098b0:	f000 fc5e 	bl	800a170 <__multadd>
 80098b4:	4639      	mov	r1, r7
 80098b6:	4681      	mov	r9, r0
 80098b8:	2300      	movs	r3, #0
 80098ba:	220a      	movs	r2, #10
 80098bc:	4630      	mov	r0, r6
 80098be:	f000 fc57 	bl	800a170 <__multadd>
 80098c2:	4607      	mov	r7, r0
 80098c4:	e7f0      	b.n	80098a8 <_dtoa_r+0xa38>
 80098c6:	f1ba 0f00 	cmp.w	sl, #0
 80098ca:	9a00      	ldr	r2, [sp, #0]
 80098cc:	bfcc      	ite	gt
 80098ce:	46d0      	movgt	r8, sl
 80098d0:	f04f 0801 	movle.w	r8, #1
 80098d4:	4490      	add	r8, r2
 80098d6:	f04f 0900 	mov.w	r9, #0
 80098da:	4629      	mov	r1, r5
 80098dc:	2201      	movs	r2, #1
 80098de:	4630      	mov	r0, r6
 80098e0:	9302      	str	r3, [sp, #8]
 80098e2:	f000 fe3f 	bl	800a564 <__lshift>
 80098e6:	4621      	mov	r1, r4
 80098e8:	4605      	mov	r5, r0
 80098ea:	f000 fea7 	bl	800a63c <__mcmp>
 80098ee:	2800      	cmp	r0, #0
 80098f0:	dcb1      	bgt.n	8009856 <_dtoa_r+0x9e6>
 80098f2:	d102      	bne.n	80098fa <_dtoa_r+0xa8a>
 80098f4:	9b02      	ldr	r3, [sp, #8]
 80098f6:	07db      	lsls	r3, r3, #31
 80098f8:	d4ad      	bmi.n	8009856 <_dtoa_r+0x9e6>
 80098fa:	4643      	mov	r3, r8
 80098fc:	4698      	mov	r8, r3
 80098fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009902:	2a30      	cmp	r2, #48	; 0x30
 8009904:	d0fa      	beq.n	80098fc <_dtoa_r+0xa8c>
 8009906:	e6f6      	b.n	80096f6 <_dtoa_r+0x886>
 8009908:	9a00      	ldr	r2, [sp, #0]
 800990a:	429a      	cmp	r2, r3
 800990c:	d1a4      	bne.n	8009858 <_dtoa_r+0x9e8>
 800990e:	f10b 0b01 	add.w	fp, fp, #1
 8009912:	2331      	movs	r3, #49	; 0x31
 8009914:	e778      	b.n	8009808 <_dtoa_r+0x998>
 8009916:	4b15      	ldr	r3, [pc, #84]	; (800996c <_dtoa_r+0xafc>)
 8009918:	f7ff bb12 	b.w	8008f40 <_dtoa_r+0xd0>
 800991c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800991e:	2b00      	cmp	r3, #0
 8009920:	f47f aaee 	bne.w	8008f00 <_dtoa_r+0x90>
 8009924:	4b12      	ldr	r3, [pc, #72]	; (8009970 <_dtoa_r+0xb00>)
 8009926:	f7ff bb0b 	b.w	8008f40 <_dtoa_r+0xd0>
 800992a:	f1ba 0f00 	cmp.w	sl, #0
 800992e:	dc03      	bgt.n	8009938 <_dtoa_r+0xac8>
 8009930:	9b07      	ldr	r3, [sp, #28]
 8009932:	2b02      	cmp	r3, #2
 8009934:	f73f aec7 	bgt.w	80096c6 <_dtoa_r+0x856>
 8009938:	f8dd 8000 	ldr.w	r8, [sp]
 800993c:	4621      	mov	r1, r4
 800993e:	4628      	mov	r0, r5
 8009940:	f7ff fa08 	bl	8008d54 <quorem>
 8009944:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009948:	f808 3b01 	strb.w	r3, [r8], #1
 800994c:	9a00      	ldr	r2, [sp, #0]
 800994e:	eba8 0202 	sub.w	r2, r8, r2
 8009952:	4592      	cmp	sl, r2
 8009954:	ddb7      	ble.n	80098c6 <_dtoa_r+0xa56>
 8009956:	4629      	mov	r1, r5
 8009958:	2300      	movs	r3, #0
 800995a:	220a      	movs	r2, #10
 800995c:	4630      	mov	r0, r6
 800995e:	f000 fc07 	bl	800a170 <__multadd>
 8009962:	4605      	mov	r5, r0
 8009964:	e7ea      	b.n	800993c <_dtoa_r+0xacc>
 8009966:	bf00      	nop
 8009968:	0800bd2c 	.word	0x0800bd2c
 800996c:	0800bb28 	.word	0x0800bb28
 8009970:	0800bca9 	.word	0x0800bca9

08009974 <rshift>:
 8009974:	6903      	ldr	r3, [r0, #16]
 8009976:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800997a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800997e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009982:	f100 0414 	add.w	r4, r0, #20
 8009986:	dd45      	ble.n	8009a14 <rshift+0xa0>
 8009988:	f011 011f 	ands.w	r1, r1, #31
 800998c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009990:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009994:	d10c      	bne.n	80099b0 <rshift+0x3c>
 8009996:	f100 0710 	add.w	r7, r0, #16
 800999a:	4629      	mov	r1, r5
 800999c:	42b1      	cmp	r1, r6
 800999e:	d334      	bcc.n	8009a0a <rshift+0x96>
 80099a0:	1a9b      	subs	r3, r3, r2
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	1eea      	subs	r2, r5, #3
 80099a6:	4296      	cmp	r6, r2
 80099a8:	bf38      	it	cc
 80099aa:	2300      	movcc	r3, #0
 80099ac:	4423      	add	r3, r4
 80099ae:	e015      	b.n	80099dc <rshift+0x68>
 80099b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80099b4:	f1c1 0820 	rsb	r8, r1, #32
 80099b8:	40cf      	lsrs	r7, r1
 80099ba:	f105 0e04 	add.w	lr, r5, #4
 80099be:	46a1      	mov	r9, r4
 80099c0:	4576      	cmp	r6, lr
 80099c2:	46f4      	mov	ip, lr
 80099c4:	d815      	bhi.n	80099f2 <rshift+0x7e>
 80099c6:	1a9b      	subs	r3, r3, r2
 80099c8:	009a      	lsls	r2, r3, #2
 80099ca:	3a04      	subs	r2, #4
 80099cc:	3501      	adds	r5, #1
 80099ce:	42ae      	cmp	r6, r5
 80099d0:	bf38      	it	cc
 80099d2:	2200      	movcc	r2, #0
 80099d4:	18a3      	adds	r3, r4, r2
 80099d6:	50a7      	str	r7, [r4, r2]
 80099d8:	b107      	cbz	r7, 80099dc <rshift+0x68>
 80099da:	3304      	adds	r3, #4
 80099dc:	1b1a      	subs	r2, r3, r4
 80099de:	42a3      	cmp	r3, r4
 80099e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80099e4:	bf08      	it	eq
 80099e6:	2300      	moveq	r3, #0
 80099e8:	6102      	str	r2, [r0, #16]
 80099ea:	bf08      	it	eq
 80099ec:	6143      	streq	r3, [r0, #20]
 80099ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099f2:	f8dc c000 	ldr.w	ip, [ip]
 80099f6:	fa0c fc08 	lsl.w	ip, ip, r8
 80099fa:	ea4c 0707 	orr.w	r7, ip, r7
 80099fe:	f849 7b04 	str.w	r7, [r9], #4
 8009a02:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a06:	40cf      	lsrs	r7, r1
 8009a08:	e7da      	b.n	80099c0 <rshift+0x4c>
 8009a0a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009a0e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009a12:	e7c3      	b.n	800999c <rshift+0x28>
 8009a14:	4623      	mov	r3, r4
 8009a16:	e7e1      	b.n	80099dc <rshift+0x68>

08009a18 <__hexdig_fun>:
 8009a18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009a1c:	2b09      	cmp	r3, #9
 8009a1e:	d802      	bhi.n	8009a26 <__hexdig_fun+0xe>
 8009a20:	3820      	subs	r0, #32
 8009a22:	b2c0      	uxtb	r0, r0
 8009a24:	4770      	bx	lr
 8009a26:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009a2a:	2b05      	cmp	r3, #5
 8009a2c:	d801      	bhi.n	8009a32 <__hexdig_fun+0x1a>
 8009a2e:	3847      	subs	r0, #71	; 0x47
 8009a30:	e7f7      	b.n	8009a22 <__hexdig_fun+0xa>
 8009a32:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009a36:	2b05      	cmp	r3, #5
 8009a38:	d801      	bhi.n	8009a3e <__hexdig_fun+0x26>
 8009a3a:	3827      	subs	r0, #39	; 0x27
 8009a3c:	e7f1      	b.n	8009a22 <__hexdig_fun+0xa>
 8009a3e:	2000      	movs	r0, #0
 8009a40:	4770      	bx	lr
	...

08009a44 <__gethex>:
 8009a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a48:	ed2d 8b02 	vpush	{d8}
 8009a4c:	b089      	sub	sp, #36	; 0x24
 8009a4e:	ee08 0a10 	vmov	s16, r0
 8009a52:	9304      	str	r3, [sp, #16]
 8009a54:	4bbc      	ldr	r3, [pc, #752]	; (8009d48 <__gethex+0x304>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	9301      	str	r3, [sp, #4]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	468b      	mov	fp, r1
 8009a5e:	4690      	mov	r8, r2
 8009a60:	f7f6 fc3e 	bl	80002e0 <strlen>
 8009a64:	9b01      	ldr	r3, [sp, #4]
 8009a66:	f8db 2000 	ldr.w	r2, [fp]
 8009a6a:	4403      	add	r3, r0
 8009a6c:	4682      	mov	sl, r0
 8009a6e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009a72:	9305      	str	r3, [sp, #20]
 8009a74:	1c93      	adds	r3, r2, #2
 8009a76:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009a7a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009a7e:	32fe      	adds	r2, #254	; 0xfe
 8009a80:	18d1      	adds	r1, r2, r3
 8009a82:	461f      	mov	r7, r3
 8009a84:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009a88:	9100      	str	r1, [sp, #0]
 8009a8a:	2830      	cmp	r0, #48	; 0x30
 8009a8c:	d0f8      	beq.n	8009a80 <__gethex+0x3c>
 8009a8e:	f7ff ffc3 	bl	8009a18 <__hexdig_fun>
 8009a92:	4604      	mov	r4, r0
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d13a      	bne.n	8009b0e <__gethex+0xca>
 8009a98:	9901      	ldr	r1, [sp, #4]
 8009a9a:	4652      	mov	r2, sl
 8009a9c:	4638      	mov	r0, r7
 8009a9e:	f001 f9ef 	bl	800ae80 <strncmp>
 8009aa2:	4605      	mov	r5, r0
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d168      	bne.n	8009b7a <__gethex+0x136>
 8009aa8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009aac:	eb07 060a 	add.w	r6, r7, sl
 8009ab0:	f7ff ffb2 	bl	8009a18 <__hexdig_fun>
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	d062      	beq.n	8009b7e <__gethex+0x13a>
 8009ab8:	4633      	mov	r3, r6
 8009aba:	7818      	ldrb	r0, [r3, #0]
 8009abc:	2830      	cmp	r0, #48	; 0x30
 8009abe:	461f      	mov	r7, r3
 8009ac0:	f103 0301 	add.w	r3, r3, #1
 8009ac4:	d0f9      	beq.n	8009aba <__gethex+0x76>
 8009ac6:	f7ff ffa7 	bl	8009a18 <__hexdig_fun>
 8009aca:	2301      	movs	r3, #1
 8009acc:	fab0 f480 	clz	r4, r0
 8009ad0:	0964      	lsrs	r4, r4, #5
 8009ad2:	4635      	mov	r5, r6
 8009ad4:	9300      	str	r3, [sp, #0]
 8009ad6:	463a      	mov	r2, r7
 8009ad8:	4616      	mov	r6, r2
 8009ada:	3201      	adds	r2, #1
 8009adc:	7830      	ldrb	r0, [r6, #0]
 8009ade:	f7ff ff9b 	bl	8009a18 <__hexdig_fun>
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	d1f8      	bne.n	8009ad8 <__gethex+0x94>
 8009ae6:	9901      	ldr	r1, [sp, #4]
 8009ae8:	4652      	mov	r2, sl
 8009aea:	4630      	mov	r0, r6
 8009aec:	f001 f9c8 	bl	800ae80 <strncmp>
 8009af0:	b980      	cbnz	r0, 8009b14 <__gethex+0xd0>
 8009af2:	b94d      	cbnz	r5, 8009b08 <__gethex+0xc4>
 8009af4:	eb06 050a 	add.w	r5, r6, sl
 8009af8:	462a      	mov	r2, r5
 8009afa:	4616      	mov	r6, r2
 8009afc:	3201      	adds	r2, #1
 8009afe:	7830      	ldrb	r0, [r6, #0]
 8009b00:	f7ff ff8a 	bl	8009a18 <__hexdig_fun>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d1f8      	bne.n	8009afa <__gethex+0xb6>
 8009b08:	1bad      	subs	r5, r5, r6
 8009b0a:	00ad      	lsls	r5, r5, #2
 8009b0c:	e004      	b.n	8009b18 <__gethex+0xd4>
 8009b0e:	2400      	movs	r4, #0
 8009b10:	4625      	mov	r5, r4
 8009b12:	e7e0      	b.n	8009ad6 <__gethex+0x92>
 8009b14:	2d00      	cmp	r5, #0
 8009b16:	d1f7      	bne.n	8009b08 <__gethex+0xc4>
 8009b18:	7833      	ldrb	r3, [r6, #0]
 8009b1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009b1e:	2b50      	cmp	r3, #80	; 0x50
 8009b20:	d13b      	bne.n	8009b9a <__gethex+0x156>
 8009b22:	7873      	ldrb	r3, [r6, #1]
 8009b24:	2b2b      	cmp	r3, #43	; 0x2b
 8009b26:	d02c      	beq.n	8009b82 <__gethex+0x13e>
 8009b28:	2b2d      	cmp	r3, #45	; 0x2d
 8009b2a:	d02e      	beq.n	8009b8a <__gethex+0x146>
 8009b2c:	1c71      	adds	r1, r6, #1
 8009b2e:	f04f 0900 	mov.w	r9, #0
 8009b32:	7808      	ldrb	r0, [r1, #0]
 8009b34:	f7ff ff70 	bl	8009a18 <__hexdig_fun>
 8009b38:	1e43      	subs	r3, r0, #1
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	2b18      	cmp	r3, #24
 8009b3e:	d82c      	bhi.n	8009b9a <__gethex+0x156>
 8009b40:	f1a0 0210 	sub.w	r2, r0, #16
 8009b44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009b48:	f7ff ff66 	bl	8009a18 <__hexdig_fun>
 8009b4c:	1e43      	subs	r3, r0, #1
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	2b18      	cmp	r3, #24
 8009b52:	d91d      	bls.n	8009b90 <__gethex+0x14c>
 8009b54:	f1b9 0f00 	cmp.w	r9, #0
 8009b58:	d000      	beq.n	8009b5c <__gethex+0x118>
 8009b5a:	4252      	negs	r2, r2
 8009b5c:	4415      	add	r5, r2
 8009b5e:	f8cb 1000 	str.w	r1, [fp]
 8009b62:	b1e4      	cbz	r4, 8009b9e <__gethex+0x15a>
 8009b64:	9b00      	ldr	r3, [sp, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	bf14      	ite	ne
 8009b6a:	2700      	movne	r7, #0
 8009b6c:	2706      	moveq	r7, #6
 8009b6e:	4638      	mov	r0, r7
 8009b70:	b009      	add	sp, #36	; 0x24
 8009b72:	ecbd 8b02 	vpop	{d8}
 8009b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b7a:	463e      	mov	r6, r7
 8009b7c:	4625      	mov	r5, r4
 8009b7e:	2401      	movs	r4, #1
 8009b80:	e7ca      	b.n	8009b18 <__gethex+0xd4>
 8009b82:	f04f 0900 	mov.w	r9, #0
 8009b86:	1cb1      	adds	r1, r6, #2
 8009b88:	e7d3      	b.n	8009b32 <__gethex+0xee>
 8009b8a:	f04f 0901 	mov.w	r9, #1
 8009b8e:	e7fa      	b.n	8009b86 <__gethex+0x142>
 8009b90:	230a      	movs	r3, #10
 8009b92:	fb03 0202 	mla	r2, r3, r2, r0
 8009b96:	3a10      	subs	r2, #16
 8009b98:	e7d4      	b.n	8009b44 <__gethex+0x100>
 8009b9a:	4631      	mov	r1, r6
 8009b9c:	e7df      	b.n	8009b5e <__gethex+0x11a>
 8009b9e:	1bf3      	subs	r3, r6, r7
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	4621      	mov	r1, r4
 8009ba4:	2b07      	cmp	r3, #7
 8009ba6:	dc0b      	bgt.n	8009bc0 <__gethex+0x17c>
 8009ba8:	ee18 0a10 	vmov	r0, s16
 8009bac:	f000 fa7e 	bl	800a0ac <_Balloc>
 8009bb0:	4604      	mov	r4, r0
 8009bb2:	b940      	cbnz	r0, 8009bc6 <__gethex+0x182>
 8009bb4:	4b65      	ldr	r3, [pc, #404]	; (8009d4c <__gethex+0x308>)
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	21de      	movs	r1, #222	; 0xde
 8009bba:	4865      	ldr	r0, [pc, #404]	; (8009d50 <__gethex+0x30c>)
 8009bbc:	f001 f980 	bl	800aec0 <__assert_func>
 8009bc0:	3101      	adds	r1, #1
 8009bc2:	105b      	asrs	r3, r3, #1
 8009bc4:	e7ee      	b.n	8009ba4 <__gethex+0x160>
 8009bc6:	f100 0914 	add.w	r9, r0, #20
 8009bca:	f04f 0b00 	mov.w	fp, #0
 8009bce:	f1ca 0301 	rsb	r3, sl, #1
 8009bd2:	f8cd 9008 	str.w	r9, [sp, #8]
 8009bd6:	f8cd b000 	str.w	fp, [sp]
 8009bda:	9306      	str	r3, [sp, #24]
 8009bdc:	42b7      	cmp	r7, r6
 8009bde:	d340      	bcc.n	8009c62 <__gethex+0x21e>
 8009be0:	9802      	ldr	r0, [sp, #8]
 8009be2:	9b00      	ldr	r3, [sp, #0]
 8009be4:	f840 3b04 	str.w	r3, [r0], #4
 8009be8:	eba0 0009 	sub.w	r0, r0, r9
 8009bec:	1080      	asrs	r0, r0, #2
 8009bee:	0146      	lsls	r6, r0, #5
 8009bf0:	6120      	str	r0, [r4, #16]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 fb50 	bl	800a298 <__hi0bits>
 8009bf8:	1a30      	subs	r0, r6, r0
 8009bfa:	f8d8 6000 	ldr.w	r6, [r8]
 8009bfe:	42b0      	cmp	r0, r6
 8009c00:	dd63      	ble.n	8009cca <__gethex+0x286>
 8009c02:	1b87      	subs	r7, r0, r6
 8009c04:	4639      	mov	r1, r7
 8009c06:	4620      	mov	r0, r4
 8009c08:	f000 feeb 	bl	800a9e2 <__any_on>
 8009c0c:	4682      	mov	sl, r0
 8009c0e:	b1a8      	cbz	r0, 8009c3c <__gethex+0x1f8>
 8009c10:	1e7b      	subs	r3, r7, #1
 8009c12:	1159      	asrs	r1, r3, #5
 8009c14:	f003 021f 	and.w	r2, r3, #31
 8009c18:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009c1c:	f04f 0a01 	mov.w	sl, #1
 8009c20:	fa0a f202 	lsl.w	r2, sl, r2
 8009c24:	420a      	tst	r2, r1
 8009c26:	d009      	beq.n	8009c3c <__gethex+0x1f8>
 8009c28:	4553      	cmp	r3, sl
 8009c2a:	dd05      	ble.n	8009c38 <__gethex+0x1f4>
 8009c2c:	1eb9      	subs	r1, r7, #2
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f000 fed7 	bl	800a9e2 <__any_on>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d145      	bne.n	8009cc4 <__gethex+0x280>
 8009c38:	f04f 0a02 	mov.w	sl, #2
 8009c3c:	4639      	mov	r1, r7
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f7ff fe98 	bl	8009974 <rshift>
 8009c44:	443d      	add	r5, r7
 8009c46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c4a:	42ab      	cmp	r3, r5
 8009c4c:	da4c      	bge.n	8009ce8 <__gethex+0x2a4>
 8009c4e:	ee18 0a10 	vmov	r0, s16
 8009c52:	4621      	mov	r1, r4
 8009c54:	f000 fa6a 	bl	800a12c <_Bfree>
 8009c58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	6013      	str	r3, [r2, #0]
 8009c5e:	27a3      	movs	r7, #163	; 0xa3
 8009c60:	e785      	b.n	8009b6e <__gethex+0x12a>
 8009c62:	1e73      	subs	r3, r6, #1
 8009c64:	9a05      	ldr	r2, [sp, #20]
 8009c66:	9303      	str	r3, [sp, #12]
 8009c68:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d019      	beq.n	8009ca4 <__gethex+0x260>
 8009c70:	f1bb 0f20 	cmp.w	fp, #32
 8009c74:	d107      	bne.n	8009c86 <__gethex+0x242>
 8009c76:	9b02      	ldr	r3, [sp, #8]
 8009c78:	9a00      	ldr	r2, [sp, #0]
 8009c7a:	f843 2b04 	str.w	r2, [r3], #4
 8009c7e:	9302      	str	r3, [sp, #8]
 8009c80:	2300      	movs	r3, #0
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	469b      	mov	fp, r3
 8009c86:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009c8a:	f7ff fec5 	bl	8009a18 <__hexdig_fun>
 8009c8e:	9b00      	ldr	r3, [sp, #0]
 8009c90:	f000 000f 	and.w	r0, r0, #15
 8009c94:	fa00 f00b 	lsl.w	r0, r0, fp
 8009c98:	4303      	orrs	r3, r0
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	f10b 0b04 	add.w	fp, fp, #4
 8009ca0:	9b03      	ldr	r3, [sp, #12]
 8009ca2:	e00d      	b.n	8009cc0 <__gethex+0x27c>
 8009ca4:	9b03      	ldr	r3, [sp, #12]
 8009ca6:	9a06      	ldr	r2, [sp, #24]
 8009ca8:	4413      	add	r3, r2
 8009caa:	42bb      	cmp	r3, r7
 8009cac:	d3e0      	bcc.n	8009c70 <__gethex+0x22c>
 8009cae:	4618      	mov	r0, r3
 8009cb0:	9901      	ldr	r1, [sp, #4]
 8009cb2:	9307      	str	r3, [sp, #28]
 8009cb4:	4652      	mov	r2, sl
 8009cb6:	f001 f8e3 	bl	800ae80 <strncmp>
 8009cba:	9b07      	ldr	r3, [sp, #28]
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d1d7      	bne.n	8009c70 <__gethex+0x22c>
 8009cc0:	461e      	mov	r6, r3
 8009cc2:	e78b      	b.n	8009bdc <__gethex+0x198>
 8009cc4:	f04f 0a03 	mov.w	sl, #3
 8009cc8:	e7b8      	b.n	8009c3c <__gethex+0x1f8>
 8009cca:	da0a      	bge.n	8009ce2 <__gethex+0x29e>
 8009ccc:	1a37      	subs	r7, r6, r0
 8009cce:	4621      	mov	r1, r4
 8009cd0:	ee18 0a10 	vmov	r0, s16
 8009cd4:	463a      	mov	r2, r7
 8009cd6:	f000 fc45 	bl	800a564 <__lshift>
 8009cda:	1bed      	subs	r5, r5, r7
 8009cdc:	4604      	mov	r4, r0
 8009cde:	f100 0914 	add.w	r9, r0, #20
 8009ce2:	f04f 0a00 	mov.w	sl, #0
 8009ce6:	e7ae      	b.n	8009c46 <__gethex+0x202>
 8009ce8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009cec:	42a8      	cmp	r0, r5
 8009cee:	dd72      	ble.n	8009dd6 <__gethex+0x392>
 8009cf0:	1b45      	subs	r5, r0, r5
 8009cf2:	42ae      	cmp	r6, r5
 8009cf4:	dc36      	bgt.n	8009d64 <__gethex+0x320>
 8009cf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d02a      	beq.n	8009d54 <__gethex+0x310>
 8009cfe:	2b03      	cmp	r3, #3
 8009d00:	d02c      	beq.n	8009d5c <__gethex+0x318>
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d115      	bne.n	8009d32 <__gethex+0x2ee>
 8009d06:	42ae      	cmp	r6, r5
 8009d08:	d113      	bne.n	8009d32 <__gethex+0x2ee>
 8009d0a:	2e01      	cmp	r6, #1
 8009d0c:	d10b      	bne.n	8009d26 <__gethex+0x2e2>
 8009d0e:	9a04      	ldr	r2, [sp, #16]
 8009d10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d14:	6013      	str	r3, [r2, #0]
 8009d16:	2301      	movs	r3, #1
 8009d18:	6123      	str	r3, [r4, #16]
 8009d1a:	f8c9 3000 	str.w	r3, [r9]
 8009d1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d20:	2762      	movs	r7, #98	; 0x62
 8009d22:	601c      	str	r4, [r3, #0]
 8009d24:	e723      	b.n	8009b6e <__gethex+0x12a>
 8009d26:	1e71      	subs	r1, r6, #1
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f000 fe5a 	bl	800a9e2 <__any_on>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d1ed      	bne.n	8009d0e <__gethex+0x2ca>
 8009d32:	ee18 0a10 	vmov	r0, s16
 8009d36:	4621      	mov	r1, r4
 8009d38:	f000 f9f8 	bl	800a12c <_Bfree>
 8009d3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d3e:	2300      	movs	r3, #0
 8009d40:	6013      	str	r3, [r2, #0]
 8009d42:	2750      	movs	r7, #80	; 0x50
 8009d44:	e713      	b.n	8009b6e <__gethex+0x12a>
 8009d46:	bf00      	nop
 8009d48:	0800bda8 	.word	0x0800bda8
 8009d4c:	0800bd2c 	.word	0x0800bd2c
 8009d50:	0800bd3d 	.word	0x0800bd3d
 8009d54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d1eb      	bne.n	8009d32 <__gethex+0x2ee>
 8009d5a:	e7d8      	b.n	8009d0e <__gethex+0x2ca>
 8009d5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1d5      	bne.n	8009d0e <__gethex+0x2ca>
 8009d62:	e7e6      	b.n	8009d32 <__gethex+0x2ee>
 8009d64:	1e6f      	subs	r7, r5, #1
 8009d66:	f1ba 0f00 	cmp.w	sl, #0
 8009d6a:	d131      	bne.n	8009dd0 <__gethex+0x38c>
 8009d6c:	b127      	cbz	r7, 8009d78 <__gethex+0x334>
 8009d6e:	4639      	mov	r1, r7
 8009d70:	4620      	mov	r0, r4
 8009d72:	f000 fe36 	bl	800a9e2 <__any_on>
 8009d76:	4682      	mov	sl, r0
 8009d78:	117b      	asrs	r3, r7, #5
 8009d7a:	2101      	movs	r1, #1
 8009d7c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009d80:	f007 071f 	and.w	r7, r7, #31
 8009d84:	fa01 f707 	lsl.w	r7, r1, r7
 8009d88:	421f      	tst	r7, r3
 8009d8a:	4629      	mov	r1, r5
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	bf18      	it	ne
 8009d90:	f04a 0a02 	orrne.w	sl, sl, #2
 8009d94:	1b76      	subs	r6, r6, r5
 8009d96:	f7ff fded 	bl	8009974 <rshift>
 8009d9a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009d9e:	2702      	movs	r7, #2
 8009da0:	f1ba 0f00 	cmp.w	sl, #0
 8009da4:	d048      	beq.n	8009e38 <__gethex+0x3f4>
 8009da6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009daa:	2b02      	cmp	r3, #2
 8009dac:	d015      	beq.n	8009dda <__gethex+0x396>
 8009dae:	2b03      	cmp	r3, #3
 8009db0:	d017      	beq.n	8009de2 <__gethex+0x39e>
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d109      	bne.n	8009dca <__gethex+0x386>
 8009db6:	f01a 0f02 	tst.w	sl, #2
 8009dba:	d006      	beq.n	8009dca <__gethex+0x386>
 8009dbc:	f8d9 0000 	ldr.w	r0, [r9]
 8009dc0:	ea4a 0a00 	orr.w	sl, sl, r0
 8009dc4:	f01a 0f01 	tst.w	sl, #1
 8009dc8:	d10e      	bne.n	8009de8 <__gethex+0x3a4>
 8009dca:	f047 0710 	orr.w	r7, r7, #16
 8009dce:	e033      	b.n	8009e38 <__gethex+0x3f4>
 8009dd0:	f04f 0a01 	mov.w	sl, #1
 8009dd4:	e7d0      	b.n	8009d78 <__gethex+0x334>
 8009dd6:	2701      	movs	r7, #1
 8009dd8:	e7e2      	b.n	8009da0 <__gethex+0x35c>
 8009dda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ddc:	f1c3 0301 	rsb	r3, r3, #1
 8009de0:	9315      	str	r3, [sp, #84]	; 0x54
 8009de2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d0f0      	beq.n	8009dca <__gethex+0x386>
 8009de8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009dec:	f104 0314 	add.w	r3, r4, #20
 8009df0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009df4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009df8:	f04f 0c00 	mov.w	ip, #0
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e02:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e06:	d01c      	beq.n	8009e42 <__gethex+0x3fe>
 8009e08:	3201      	adds	r2, #1
 8009e0a:	6002      	str	r2, [r0, #0]
 8009e0c:	2f02      	cmp	r7, #2
 8009e0e:	f104 0314 	add.w	r3, r4, #20
 8009e12:	d13f      	bne.n	8009e94 <__gethex+0x450>
 8009e14:	f8d8 2000 	ldr.w	r2, [r8]
 8009e18:	3a01      	subs	r2, #1
 8009e1a:	42b2      	cmp	r2, r6
 8009e1c:	d10a      	bne.n	8009e34 <__gethex+0x3f0>
 8009e1e:	1171      	asrs	r1, r6, #5
 8009e20:	2201      	movs	r2, #1
 8009e22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e26:	f006 061f 	and.w	r6, r6, #31
 8009e2a:	fa02 f606 	lsl.w	r6, r2, r6
 8009e2e:	421e      	tst	r6, r3
 8009e30:	bf18      	it	ne
 8009e32:	4617      	movne	r7, r2
 8009e34:	f047 0720 	orr.w	r7, r7, #32
 8009e38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e3a:	601c      	str	r4, [r3, #0]
 8009e3c:	9b04      	ldr	r3, [sp, #16]
 8009e3e:	601d      	str	r5, [r3, #0]
 8009e40:	e695      	b.n	8009b6e <__gethex+0x12a>
 8009e42:	4299      	cmp	r1, r3
 8009e44:	f843 cc04 	str.w	ip, [r3, #-4]
 8009e48:	d8d8      	bhi.n	8009dfc <__gethex+0x3b8>
 8009e4a:	68a3      	ldr	r3, [r4, #8]
 8009e4c:	459b      	cmp	fp, r3
 8009e4e:	db19      	blt.n	8009e84 <__gethex+0x440>
 8009e50:	6861      	ldr	r1, [r4, #4]
 8009e52:	ee18 0a10 	vmov	r0, s16
 8009e56:	3101      	adds	r1, #1
 8009e58:	f000 f928 	bl	800a0ac <_Balloc>
 8009e5c:	4681      	mov	r9, r0
 8009e5e:	b918      	cbnz	r0, 8009e68 <__gethex+0x424>
 8009e60:	4b1a      	ldr	r3, [pc, #104]	; (8009ecc <__gethex+0x488>)
 8009e62:	4602      	mov	r2, r0
 8009e64:	2184      	movs	r1, #132	; 0x84
 8009e66:	e6a8      	b.n	8009bba <__gethex+0x176>
 8009e68:	6922      	ldr	r2, [r4, #16]
 8009e6a:	3202      	adds	r2, #2
 8009e6c:	f104 010c 	add.w	r1, r4, #12
 8009e70:	0092      	lsls	r2, r2, #2
 8009e72:	300c      	adds	r0, #12
 8009e74:	f000 f90c 	bl	800a090 <memcpy>
 8009e78:	4621      	mov	r1, r4
 8009e7a:	ee18 0a10 	vmov	r0, s16
 8009e7e:	f000 f955 	bl	800a12c <_Bfree>
 8009e82:	464c      	mov	r4, r9
 8009e84:	6923      	ldr	r3, [r4, #16]
 8009e86:	1c5a      	adds	r2, r3, #1
 8009e88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e8c:	6122      	str	r2, [r4, #16]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	615a      	str	r2, [r3, #20]
 8009e92:	e7bb      	b.n	8009e0c <__gethex+0x3c8>
 8009e94:	6922      	ldr	r2, [r4, #16]
 8009e96:	455a      	cmp	r2, fp
 8009e98:	dd0b      	ble.n	8009eb2 <__gethex+0x46e>
 8009e9a:	2101      	movs	r1, #1
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f7ff fd69 	bl	8009974 <rshift>
 8009ea2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ea6:	3501      	adds	r5, #1
 8009ea8:	42ab      	cmp	r3, r5
 8009eaa:	f6ff aed0 	blt.w	8009c4e <__gethex+0x20a>
 8009eae:	2701      	movs	r7, #1
 8009eb0:	e7c0      	b.n	8009e34 <__gethex+0x3f0>
 8009eb2:	f016 061f 	ands.w	r6, r6, #31
 8009eb6:	d0fa      	beq.n	8009eae <__gethex+0x46a>
 8009eb8:	449a      	add	sl, r3
 8009eba:	f1c6 0620 	rsb	r6, r6, #32
 8009ebe:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009ec2:	f000 f9e9 	bl	800a298 <__hi0bits>
 8009ec6:	42b0      	cmp	r0, r6
 8009ec8:	dbe7      	blt.n	8009e9a <__gethex+0x456>
 8009eca:	e7f0      	b.n	8009eae <__gethex+0x46a>
 8009ecc:	0800bd2c 	.word	0x0800bd2c

08009ed0 <L_shift>:
 8009ed0:	f1c2 0208 	rsb	r2, r2, #8
 8009ed4:	0092      	lsls	r2, r2, #2
 8009ed6:	b570      	push	{r4, r5, r6, lr}
 8009ed8:	f1c2 0620 	rsb	r6, r2, #32
 8009edc:	6843      	ldr	r3, [r0, #4]
 8009ede:	6804      	ldr	r4, [r0, #0]
 8009ee0:	fa03 f506 	lsl.w	r5, r3, r6
 8009ee4:	432c      	orrs	r4, r5
 8009ee6:	40d3      	lsrs	r3, r2
 8009ee8:	6004      	str	r4, [r0, #0]
 8009eea:	f840 3f04 	str.w	r3, [r0, #4]!
 8009eee:	4288      	cmp	r0, r1
 8009ef0:	d3f4      	bcc.n	8009edc <L_shift+0xc>
 8009ef2:	bd70      	pop	{r4, r5, r6, pc}

08009ef4 <__match>:
 8009ef4:	b530      	push	{r4, r5, lr}
 8009ef6:	6803      	ldr	r3, [r0, #0]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009efe:	b914      	cbnz	r4, 8009f06 <__match+0x12>
 8009f00:	6003      	str	r3, [r0, #0]
 8009f02:	2001      	movs	r0, #1
 8009f04:	bd30      	pop	{r4, r5, pc}
 8009f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009f0e:	2d19      	cmp	r5, #25
 8009f10:	bf98      	it	ls
 8009f12:	3220      	addls	r2, #32
 8009f14:	42a2      	cmp	r2, r4
 8009f16:	d0f0      	beq.n	8009efa <__match+0x6>
 8009f18:	2000      	movs	r0, #0
 8009f1a:	e7f3      	b.n	8009f04 <__match+0x10>

08009f1c <__hexnan>:
 8009f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f20:	680b      	ldr	r3, [r1, #0]
 8009f22:	6801      	ldr	r1, [r0, #0]
 8009f24:	115e      	asrs	r6, r3, #5
 8009f26:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009f2a:	f013 031f 	ands.w	r3, r3, #31
 8009f2e:	b087      	sub	sp, #28
 8009f30:	bf18      	it	ne
 8009f32:	3604      	addne	r6, #4
 8009f34:	2500      	movs	r5, #0
 8009f36:	1f37      	subs	r7, r6, #4
 8009f38:	4682      	mov	sl, r0
 8009f3a:	4690      	mov	r8, r2
 8009f3c:	9301      	str	r3, [sp, #4]
 8009f3e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009f42:	46b9      	mov	r9, r7
 8009f44:	463c      	mov	r4, r7
 8009f46:	9502      	str	r5, [sp, #8]
 8009f48:	46ab      	mov	fp, r5
 8009f4a:	784a      	ldrb	r2, [r1, #1]
 8009f4c:	1c4b      	adds	r3, r1, #1
 8009f4e:	9303      	str	r3, [sp, #12]
 8009f50:	b342      	cbz	r2, 8009fa4 <__hexnan+0x88>
 8009f52:	4610      	mov	r0, r2
 8009f54:	9105      	str	r1, [sp, #20]
 8009f56:	9204      	str	r2, [sp, #16]
 8009f58:	f7ff fd5e 	bl	8009a18 <__hexdig_fun>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d14f      	bne.n	800a000 <__hexnan+0xe4>
 8009f60:	9a04      	ldr	r2, [sp, #16]
 8009f62:	9905      	ldr	r1, [sp, #20]
 8009f64:	2a20      	cmp	r2, #32
 8009f66:	d818      	bhi.n	8009f9a <__hexnan+0x7e>
 8009f68:	9b02      	ldr	r3, [sp, #8]
 8009f6a:	459b      	cmp	fp, r3
 8009f6c:	dd13      	ble.n	8009f96 <__hexnan+0x7a>
 8009f6e:	454c      	cmp	r4, r9
 8009f70:	d206      	bcs.n	8009f80 <__hexnan+0x64>
 8009f72:	2d07      	cmp	r5, #7
 8009f74:	dc04      	bgt.n	8009f80 <__hexnan+0x64>
 8009f76:	462a      	mov	r2, r5
 8009f78:	4649      	mov	r1, r9
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f7ff ffa8 	bl	8009ed0 <L_shift>
 8009f80:	4544      	cmp	r4, r8
 8009f82:	d950      	bls.n	800a026 <__hexnan+0x10a>
 8009f84:	2300      	movs	r3, #0
 8009f86:	f1a4 0904 	sub.w	r9, r4, #4
 8009f8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f8e:	f8cd b008 	str.w	fp, [sp, #8]
 8009f92:	464c      	mov	r4, r9
 8009f94:	461d      	mov	r5, r3
 8009f96:	9903      	ldr	r1, [sp, #12]
 8009f98:	e7d7      	b.n	8009f4a <__hexnan+0x2e>
 8009f9a:	2a29      	cmp	r2, #41	; 0x29
 8009f9c:	d156      	bne.n	800a04c <__hexnan+0x130>
 8009f9e:	3102      	adds	r1, #2
 8009fa0:	f8ca 1000 	str.w	r1, [sl]
 8009fa4:	f1bb 0f00 	cmp.w	fp, #0
 8009fa8:	d050      	beq.n	800a04c <__hexnan+0x130>
 8009faa:	454c      	cmp	r4, r9
 8009fac:	d206      	bcs.n	8009fbc <__hexnan+0xa0>
 8009fae:	2d07      	cmp	r5, #7
 8009fb0:	dc04      	bgt.n	8009fbc <__hexnan+0xa0>
 8009fb2:	462a      	mov	r2, r5
 8009fb4:	4649      	mov	r1, r9
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	f7ff ff8a 	bl	8009ed0 <L_shift>
 8009fbc:	4544      	cmp	r4, r8
 8009fbe:	d934      	bls.n	800a02a <__hexnan+0x10e>
 8009fc0:	f1a8 0204 	sub.w	r2, r8, #4
 8009fc4:	4623      	mov	r3, r4
 8009fc6:	f853 1b04 	ldr.w	r1, [r3], #4
 8009fca:	f842 1f04 	str.w	r1, [r2, #4]!
 8009fce:	429f      	cmp	r7, r3
 8009fd0:	d2f9      	bcs.n	8009fc6 <__hexnan+0xaa>
 8009fd2:	1b3b      	subs	r3, r7, r4
 8009fd4:	f023 0303 	bic.w	r3, r3, #3
 8009fd8:	3304      	adds	r3, #4
 8009fda:	3401      	adds	r4, #1
 8009fdc:	3e03      	subs	r6, #3
 8009fde:	42b4      	cmp	r4, r6
 8009fe0:	bf88      	it	hi
 8009fe2:	2304      	movhi	r3, #4
 8009fe4:	4443      	add	r3, r8
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f843 2b04 	str.w	r2, [r3], #4
 8009fec:	429f      	cmp	r7, r3
 8009fee:	d2fb      	bcs.n	8009fe8 <__hexnan+0xcc>
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	b91b      	cbnz	r3, 8009ffc <__hexnan+0xe0>
 8009ff4:	4547      	cmp	r7, r8
 8009ff6:	d127      	bne.n	800a048 <__hexnan+0x12c>
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	603b      	str	r3, [r7, #0]
 8009ffc:	2005      	movs	r0, #5
 8009ffe:	e026      	b.n	800a04e <__hexnan+0x132>
 800a000:	3501      	adds	r5, #1
 800a002:	2d08      	cmp	r5, #8
 800a004:	f10b 0b01 	add.w	fp, fp, #1
 800a008:	dd06      	ble.n	800a018 <__hexnan+0xfc>
 800a00a:	4544      	cmp	r4, r8
 800a00c:	d9c3      	bls.n	8009f96 <__hexnan+0x7a>
 800a00e:	2300      	movs	r3, #0
 800a010:	f844 3c04 	str.w	r3, [r4, #-4]
 800a014:	2501      	movs	r5, #1
 800a016:	3c04      	subs	r4, #4
 800a018:	6822      	ldr	r2, [r4, #0]
 800a01a:	f000 000f 	and.w	r0, r0, #15
 800a01e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a022:	6022      	str	r2, [r4, #0]
 800a024:	e7b7      	b.n	8009f96 <__hexnan+0x7a>
 800a026:	2508      	movs	r5, #8
 800a028:	e7b5      	b.n	8009f96 <__hexnan+0x7a>
 800a02a:	9b01      	ldr	r3, [sp, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d0df      	beq.n	8009ff0 <__hexnan+0xd4>
 800a030:	f04f 32ff 	mov.w	r2, #4294967295
 800a034:	f1c3 0320 	rsb	r3, r3, #32
 800a038:	fa22 f303 	lsr.w	r3, r2, r3
 800a03c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a040:	401a      	ands	r2, r3
 800a042:	f846 2c04 	str.w	r2, [r6, #-4]
 800a046:	e7d3      	b.n	8009ff0 <__hexnan+0xd4>
 800a048:	3f04      	subs	r7, #4
 800a04a:	e7d1      	b.n	8009ff0 <__hexnan+0xd4>
 800a04c:	2004      	movs	r0, #4
 800a04e:	b007      	add	sp, #28
 800a050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a054 <_localeconv_r>:
 800a054:	4800      	ldr	r0, [pc, #0]	; (800a058 <_localeconv_r+0x4>)
 800a056:	4770      	bx	lr
 800a058:	24000168 	.word	0x24000168

0800a05c <malloc>:
 800a05c:	4b02      	ldr	r3, [pc, #8]	; (800a068 <malloc+0xc>)
 800a05e:	4601      	mov	r1, r0
 800a060:	6818      	ldr	r0, [r3, #0]
 800a062:	f000 bd3f 	b.w	800aae4 <_malloc_r>
 800a066:	bf00      	nop
 800a068:	24000010 	.word	0x24000010

0800a06c <__ascii_mbtowc>:
 800a06c:	b082      	sub	sp, #8
 800a06e:	b901      	cbnz	r1, 800a072 <__ascii_mbtowc+0x6>
 800a070:	a901      	add	r1, sp, #4
 800a072:	b142      	cbz	r2, 800a086 <__ascii_mbtowc+0x1a>
 800a074:	b14b      	cbz	r3, 800a08a <__ascii_mbtowc+0x1e>
 800a076:	7813      	ldrb	r3, [r2, #0]
 800a078:	600b      	str	r3, [r1, #0]
 800a07a:	7812      	ldrb	r2, [r2, #0]
 800a07c:	1e10      	subs	r0, r2, #0
 800a07e:	bf18      	it	ne
 800a080:	2001      	movne	r0, #1
 800a082:	b002      	add	sp, #8
 800a084:	4770      	bx	lr
 800a086:	4610      	mov	r0, r2
 800a088:	e7fb      	b.n	800a082 <__ascii_mbtowc+0x16>
 800a08a:	f06f 0001 	mvn.w	r0, #1
 800a08e:	e7f8      	b.n	800a082 <__ascii_mbtowc+0x16>

0800a090 <memcpy>:
 800a090:	440a      	add	r2, r1
 800a092:	4291      	cmp	r1, r2
 800a094:	f100 33ff 	add.w	r3, r0, #4294967295
 800a098:	d100      	bne.n	800a09c <memcpy+0xc>
 800a09a:	4770      	bx	lr
 800a09c:	b510      	push	{r4, lr}
 800a09e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0a6:	4291      	cmp	r1, r2
 800a0a8:	d1f9      	bne.n	800a09e <memcpy+0xe>
 800a0aa:	bd10      	pop	{r4, pc}

0800a0ac <_Balloc>:
 800a0ac:	b570      	push	{r4, r5, r6, lr}
 800a0ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a0b0:	4604      	mov	r4, r0
 800a0b2:	460d      	mov	r5, r1
 800a0b4:	b976      	cbnz	r6, 800a0d4 <_Balloc+0x28>
 800a0b6:	2010      	movs	r0, #16
 800a0b8:	f7ff ffd0 	bl	800a05c <malloc>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	6260      	str	r0, [r4, #36]	; 0x24
 800a0c0:	b920      	cbnz	r0, 800a0cc <_Balloc+0x20>
 800a0c2:	4b18      	ldr	r3, [pc, #96]	; (800a124 <_Balloc+0x78>)
 800a0c4:	4818      	ldr	r0, [pc, #96]	; (800a128 <_Balloc+0x7c>)
 800a0c6:	2166      	movs	r1, #102	; 0x66
 800a0c8:	f000 fefa 	bl	800aec0 <__assert_func>
 800a0cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0d0:	6006      	str	r6, [r0, #0]
 800a0d2:	60c6      	str	r6, [r0, #12]
 800a0d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a0d6:	68f3      	ldr	r3, [r6, #12]
 800a0d8:	b183      	cbz	r3, 800a0fc <_Balloc+0x50>
 800a0da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a0e2:	b9b8      	cbnz	r0, 800a114 <_Balloc+0x68>
 800a0e4:	2101      	movs	r1, #1
 800a0e6:	fa01 f605 	lsl.w	r6, r1, r5
 800a0ea:	1d72      	adds	r2, r6, #5
 800a0ec:	0092      	lsls	r2, r2, #2
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f000 fc98 	bl	800aa24 <_calloc_r>
 800a0f4:	b160      	cbz	r0, 800a110 <_Balloc+0x64>
 800a0f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a0fa:	e00e      	b.n	800a11a <_Balloc+0x6e>
 800a0fc:	2221      	movs	r2, #33	; 0x21
 800a0fe:	2104      	movs	r1, #4
 800a100:	4620      	mov	r0, r4
 800a102:	f000 fc8f 	bl	800aa24 <_calloc_r>
 800a106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a108:	60f0      	str	r0, [r6, #12]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1e4      	bne.n	800a0da <_Balloc+0x2e>
 800a110:	2000      	movs	r0, #0
 800a112:	bd70      	pop	{r4, r5, r6, pc}
 800a114:	6802      	ldr	r2, [r0, #0]
 800a116:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a11a:	2300      	movs	r3, #0
 800a11c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a120:	e7f7      	b.n	800a112 <_Balloc+0x66>
 800a122:	bf00      	nop
 800a124:	0800bcb6 	.word	0x0800bcb6
 800a128:	0800bdbc 	.word	0x0800bdbc

0800a12c <_Bfree>:
 800a12c:	b570      	push	{r4, r5, r6, lr}
 800a12e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a130:	4605      	mov	r5, r0
 800a132:	460c      	mov	r4, r1
 800a134:	b976      	cbnz	r6, 800a154 <_Bfree+0x28>
 800a136:	2010      	movs	r0, #16
 800a138:	f7ff ff90 	bl	800a05c <malloc>
 800a13c:	4602      	mov	r2, r0
 800a13e:	6268      	str	r0, [r5, #36]	; 0x24
 800a140:	b920      	cbnz	r0, 800a14c <_Bfree+0x20>
 800a142:	4b09      	ldr	r3, [pc, #36]	; (800a168 <_Bfree+0x3c>)
 800a144:	4809      	ldr	r0, [pc, #36]	; (800a16c <_Bfree+0x40>)
 800a146:	218a      	movs	r1, #138	; 0x8a
 800a148:	f000 feba 	bl	800aec0 <__assert_func>
 800a14c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a150:	6006      	str	r6, [r0, #0]
 800a152:	60c6      	str	r6, [r0, #12]
 800a154:	b13c      	cbz	r4, 800a166 <_Bfree+0x3a>
 800a156:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a158:	6862      	ldr	r2, [r4, #4]
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a160:	6021      	str	r1, [r4, #0]
 800a162:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a166:	bd70      	pop	{r4, r5, r6, pc}
 800a168:	0800bcb6 	.word	0x0800bcb6
 800a16c:	0800bdbc 	.word	0x0800bdbc

0800a170 <__multadd>:
 800a170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a174:	690e      	ldr	r6, [r1, #16]
 800a176:	4607      	mov	r7, r0
 800a178:	4698      	mov	r8, r3
 800a17a:	460c      	mov	r4, r1
 800a17c:	f101 0014 	add.w	r0, r1, #20
 800a180:	2300      	movs	r3, #0
 800a182:	6805      	ldr	r5, [r0, #0]
 800a184:	b2a9      	uxth	r1, r5
 800a186:	fb02 8101 	mla	r1, r2, r1, r8
 800a18a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a18e:	0c2d      	lsrs	r5, r5, #16
 800a190:	fb02 c505 	mla	r5, r2, r5, ip
 800a194:	b289      	uxth	r1, r1
 800a196:	3301      	adds	r3, #1
 800a198:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a19c:	429e      	cmp	r6, r3
 800a19e:	f840 1b04 	str.w	r1, [r0], #4
 800a1a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a1a6:	dcec      	bgt.n	800a182 <__multadd+0x12>
 800a1a8:	f1b8 0f00 	cmp.w	r8, #0
 800a1ac:	d022      	beq.n	800a1f4 <__multadd+0x84>
 800a1ae:	68a3      	ldr	r3, [r4, #8]
 800a1b0:	42b3      	cmp	r3, r6
 800a1b2:	dc19      	bgt.n	800a1e8 <__multadd+0x78>
 800a1b4:	6861      	ldr	r1, [r4, #4]
 800a1b6:	4638      	mov	r0, r7
 800a1b8:	3101      	adds	r1, #1
 800a1ba:	f7ff ff77 	bl	800a0ac <_Balloc>
 800a1be:	4605      	mov	r5, r0
 800a1c0:	b928      	cbnz	r0, 800a1ce <__multadd+0x5e>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	4b0d      	ldr	r3, [pc, #52]	; (800a1fc <__multadd+0x8c>)
 800a1c6:	480e      	ldr	r0, [pc, #56]	; (800a200 <__multadd+0x90>)
 800a1c8:	21b5      	movs	r1, #181	; 0xb5
 800a1ca:	f000 fe79 	bl	800aec0 <__assert_func>
 800a1ce:	6922      	ldr	r2, [r4, #16]
 800a1d0:	3202      	adds	r2, #2
 800a1d2:	f104 010c 	add.w	r1, r4, #12
 800a1d6:	0092      	lsls	r2, r2, #2
 800a1d8:	300c      	adds	r0, #12
 800a1da:	f7ff ff59 	bl	800a090 <memcpy>
 800a1de:	4621      	mov	r1, r4
 800a1e0:	4638      	mov	r0, r7
 800a1e2:	f7ff ffa3 	bl	800a12c <_Bfree>
 800a1e6:	462c      	mov	r4, r5
 800a1e8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a1ec:	3601      	adds	r6, #1
 800a1ee:	f8c3 8014 	str.w	r8, [r3, #20]
 800a1f2:	6126      	str	r6, [r4, #16]
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1fa:	bf00      	nop
 800a1fc:	0800bd2c 	.word	0x0800bd2c
 800a200:	0800bdbc 	.word	0x0800bdbc

0800a204 <__s2b>:
 800a204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a208:	460c      	mov	r4, r1
 800a20a:	4615      	mov	r5, r2
 800a20c:	461f      	mov	r7, r3
 800a20e:	2209      	movs	r2, #9
 800a210:	3308      	adds	r3, #8
 800a212:	4606      	mov	r6, r0
 800a214:	fb93 f3f2 	sdiv	r3, r3, r2
 800a218:	2100      	movs	r1, #0
 800a21a:	2201      	movs	r2, #1
 800a21c:	429a      	cmp	r2, r3
 800a21e:	db09      	blt.n	800a234 <__s2b+0x30>
 800a220:	4630      	mov	r0, r6
 800a222:	f7ff ff43 	bl	800a0ac <_Balloc>
 800a226:	b940      	cbnz	r0, 800a23a <__s2b+0x36>
 800a228:	4602      	mov	r2, r0
 800a22a:	4b19      	ldr	r3, [pc, #100]	; (800a290 <__s2b+0x8c>)
 800a22c:	4819      	ldr	r0, [pc, #100]	; (800a294 <__s2b+0x90>)
 800a22e:	21ce      	movs	r1, #206	; 0xce
 800a230:	f000 fe46 	bl	800aec0 <__assert_func>
 800a234:	0052      	lsls	r2, r2, #1
 800a236:	3101      	adds	r1, #1
 800a238:	e7f0      	b.n	800a21c <__s2b+0x18>
 800a23a:	9b08      	ldr	r3, [sp, #32]
 800a23c:	6143      	str	r3, [r0, #20]
 800a23e:	2d09      	cmp	r5, #9
 800a240:	f04f 0301 	mov.w	r3, #1
 800a244:	6103      	str	r3, [r0, #16]
 800a246:	dd16      	ble.n	800a276 <__s2b+0x72>
 800a248:	f104 0909 	add.w	r9, r4, #9
 800a24c:	46c8      	mov	r8, r9
 800a24e:	442c      	add	r4, r5
 800a250:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a254:	4601      	mov	r1, r0
 800a256:	3b30      	subs	r3, #48	; 0x30
 800a258:	220a      	movs	r2, #10
 800a25a:	4630      	mov	r0, r6
 800a25c:	f7ff ff88 	bl	800a170 <__multadd>
 800a260:	45a0      	cmp	r8, r4
 800a262:	d1f5      	bne.n	800a250 <__s2b+0x4c>
 800a264:	f1a5 0408 	sub.w	r4, r5, #8
 800a268:	444c      	add	r4, r9
 800a26a:	1b2d      	subs	r5, r5, r4
 800a26c:	1963      	adds	r3, r4, r5
 800a26e:	42bb      	cmp	r3, r7
 800a270:	db04      	blt.n	800a27c <__s2b+0x78>
 800a272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a276:	340a      	adds	r4, #10
 800a278:	2509      	movs	r5, #9
 800a27a:	e7f6      	b.n	800a26a <__s2b+0x66>
 800a27c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a280:	4601      	mov	r1, r0
 800a282:	3b30      	subs	r3, #48	; 0x30
 800a284:	220a      	movs	r2, #10
 800a286:	4630      	mov	r0, r6
 800a288:	f7ff ff72 	bl	800a170 <__multadd>
 800a28c:	e7ee      	b.n	800a26c <__s2b+0x68>
 800a28e:	bf00      	nop
 800a290:	0800bd2c 	.word	0x0800bd2c
 800a294:	0800bdbc 	.word	0x0800bdbc

0800a298 <__hi0bits>:
 800a298:	0c03      	lsrs	r3, r0, #16
 800a29a:	041b      	lsls	r3, r3, #16
 800a29c:	b9d3      	cbnz	r3, 800a2d4 <__hi0bits+0x3c>
 800a29e:	0400      	lsls	r0, r0, #16
 800a2a0:	2310      	movs	r3, #16
 800a2a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a2a6:	bf04      	itt	eq
 800a2a8:	0200      	lsleq	r0, r0, #8
 800a2aa:	3308      	addeq	r3, #8
 800a2ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a2b0:	bf04      	itt	eq
 800a2b2:	0100      	lsleq	r0, r0, #4
 800a2b4:	3304      	addeq	r3, #4
 800a2b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a2ba:	bf04      	itt	eq
 800a2bc:	0080      	lsleq	r0, r0, #2
 800a2be:	3302      	addeq	r3, #2
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	db05      	blt.n	800a2d0 <__hi0bits+0x38>
 800a2c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a2c8:	f103 0301 	add.w	r3, r3, #1
 800a2cc:	bf08      	it	eq
 800a2ce:	2320      	moveq	r3, #32
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	4770      	bx	lr
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	e7e4      	b.n	800a2a2 <__hi0bits+0xa>

0800a2d8 <__lo0bits>:
 800a2d8:	6803      	ldr	r3, [r0, #0]
 800a2da:	f013 0207 	ands.w	r2, r3, #7
 800a2de:	4601      	mov	r1, r0
 800a2e0:	d00b      	beq.n	800a2fa <__lo0bits+0x22>
 800a2e2:	07da      	lsls	r2, r3, #31
 800a2e4:	d424      	bmi.n	800a330 <__lo0bits+0x58>
 800a2e6:	0798      	lsls	r0, r3, #30
 800a2e8:	bf49      	itett	mi
 800a2ea:	085b      	lsrmi	r3, r3, #1
 800a2ec:	089b      	lsrpl	r3, r3, #2
 800a2ee:	2001      	movmi	r0, #1
 800a2f0:	600b      	strmi	r3, [r1, #0]
 800a2f2:	bf5c      	itt	pl
 800a2f4:	600b      	strpl	r3, [r1, #0]
 800a2f6:	2002      	movpl	r0, #2
 800a2f8:	4770      	bx	lr
 800a2fa:	b298      	uxth	r0, r3
 800a2fc:	b9b0      	cbnz	r0, 800a32c <__lo0bits+0x54>
 800a2fe:	0c1b      	lsrs	r3, r3, #16
 800a300:	2010      	movs	r0, #16
 800a302:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a306:	bf04      	itt	eq
 800a308:	0a1b      	lsreq	r3, r3, #8
 800a30a:	3008      	addeq	r0, #8
 800a30c:	071a      	lsls	r2, r3, #28
 800a30e:	bf04      	itt	eq
 800a310:	091b      	lsreq	r3, r3, #4
 800a312:	3004      	addeq	r0, #4
 800a314:	079a      	lsls	r2, r3, #30
 800a316:	bf04      	itt	eq
 800a318:	089b      	lsreq	r3, r3, #2
 800a31a:	3002      	addeq	r0, #2
 800a31c:	07da      	lsls	r2, r3, #31
 800a31e:	d403      	bmi.n	800a328 <__lo0bits+0x50>
 800a320:	085b      	lsrs	r3, r3, #1
 800a322:	f100 0001 	add.w	r0, r0, #1
 800a326:	d005      	beq.n	800a334 <__lo0bits+0x5c>
 800a328:	600b      	str	r3, [r1, #0]
 800a32a:	4770      	bx	lr
 800a32c:	4610      	mov	r0, r2
 800a32e:	e7e8      	b.n	800a302 <__lo0bits+0x2a>
 800a330:	2000      	movs	r0, #0
 800a332:	4770      	bx	lr
 800a334:	2020      	movs	r0, #32
 800a336:	4770      	bx	lr

0800a338 <__i2b>:
 800a338:	b510      	push	{r4, lr}
 800a33a:	460c      	mov	r4, r1
 800a33c:	2101      	movs	r1, #1
 800a33e:	f7ff feb5 	bl	800a0ac <_Balloc>
 800a342:	4602      	mov	r2, r0
 800a344:	b928      	cbnz	r0, 800a352 <__i2b+0x1a>
 800a346:	4b05      	ldr	r3, [pc, #20]	; (800a35c <__i2b+0x24>)
 800a348:	4805      	ldr	r0, [pc, #20]	; (800a360 <__i2b+0x28>)
 800a34a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a34e:	f000 fdb7 	bl	800aec0 <__assert_func>
 800a352:	2301      	movs	r3, #1
 800a354:	6144      	str	r4, [r0, #20]
 800a356:	6103      	str	r3, [r0, #16]
 800a358:	bd10      	pop	{r4, pc}
 800a35a:	bf00      	nop
 800a35c:	0800bd2c 	.word	0x0800bd2c
 800a360:	0800bdbc 	.word	0x0800bdbc

0800a364 <__multiply>:
 800a364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a368:	4614      	mov	r4, r2
 800a36a:	690a      	ldr	r2, [r1, #16]
 800a36c:	6923      	ldr	r3, [r4, #16]
 800a36e:	429a      	cmp	r2, r3
 800a370:	bfb8      	it	lt
 800a372:	460b      	movlt	r3, r1
 800a374:	460d      	mov	r5, r1
 800a376:	bfbc      	itt	lt
 800a378:	4625      	movlt	r5, r4
 800a37a:	461c      	movlt	r4, r3
 800a37c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a380:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a384:	68ab      	ldr	r3, [r5, #8]
 800a386:	6869      	ldr	r1, [r5, #4]
 800a388:	eb0a 0709 	add.w	r7, sl, r9
 800a38c:	42bb      	cmp	r3, r7
 800a38e:	b085      	sub	sp, #20
 800a390:	bfb8      	it	lt
 800a392:	3101      	addlt	r1, #1
 800a394:	f7ff fe8a 	bl	800a0ac <_Balloc>
 800a398:	b930      	cbnz	r0, 800a3a8 <__multiply+0x44>
 800a39a:	4602      	mov	r2, r0
 800a39c:	4b42      	ldr	r3, [pc, #264]	; (800a4a8 <__multiply+0x144>)
 800a39e:	4843      	ldr	r0, [pc, #268]	; (800a4ac <__multiply+0x148>)
 800a3a0:	f240 115d 	movw	r1, #349	; 0x15d
 800a3a4:	f000 fd8c 	bl	800aec0 <__assert_func>
 800a3a8:	f100 0614 	add.w	r6, r0, #20
 800a3ac:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a3b0:	4633      	mov	r3, r6
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	4543      	cmp	r3, r8
 800a3b6:	d31e      	bcc.n	800a3f6 <__multiply+0x92>
 800a3b8:	f105 0c14 	add.w	ip, r5, #20
 800a3bc:	f104 0314 	add.w	r3, r4, #20
 800a3c0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a3c4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a3c8:	9202      	str	r2, [sp, #8]
 800a3ca:	ebac 0205 	sub.w	r2, ip, r5
 800a3ce:	3a15      	subs	r2, #21
 800a3d0:	f022 0203 	bic.w	r2, r2, #3
 800a3d4:	3204      	adds	r2, #4
 800a3d6:	f105 0115 	add.w	r1, r5, #21
 800a3da:	458c      	cmp	ip, r1
 800a3dc:	bf38      	it	cc
 800a3de:	2204      	movcc	r2, #4
 800a3e0:	9201      	str	r2, [sp, #4]
 800a3e2:	9a02      	ldr	r2, [sp, #8]
 800a3e4:	9303      	str	r3, [sp, #12]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d808      	bhi.n	800a3fc <__multiply+0x98>
 800a3ea:	2f00      	cmp	r7, #0
 800a3ec:	dc55      	bgt.n	800a49a <__multiply+0x136>
 800a3ee:	6107      	str	r7, [r0, #16]
 800a3f0:	b005      	add	sp, #20
 800a3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f6:	f843 2b04 	str.w	r2, [r3], #4
 800a3fa:	e7db      	b.n	800a3b4 <__multiply+0x50>
 800a3fc:	f8b3 a000 	ldrh.w	sl, [r3]
 800a400:	f1ba 0f00 	cmp.w	sl, #0
 800a404:	d020      	beq.n	800a448 <__multiply+0xe4>
 800a406:	f105 0e14 	add.w	lr, r5, #20
 800a40a:	46b1      	mov	r9, r6
 800a40c:	2200      	movs	r2, #0
 800a40e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a412:	f8d9 b000 	ldr.w	fp, [r9]
 800a416:	b2a1      	uxth	r1, r4
 800a418:	fa1f fb8b 	uxth.w	fp, fp
 800a41c:	fb0a b101 	mla	r1, sl, r1, fp
 800a420:	4411      	add	r1, r2
 800a422:	f8d9 2000 	ldr.w	r2, [r9]
 800a426:	0c24      	lsrs	r4, r4, #16
 800a428:	0c12      	lsrs	r2, r2, #16
 800a42a:	fb0a 2404 	mla	r4, sl, r4, r2
 800a42e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a432:	b289      	uxth	r1, r1
 800a434:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a438:	45f4      	cmp	ip, lr
 800a43a:	f849 1b04 	str.w	r1, [r9], #4
 800a43e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a442:	d8e4      	bhi.n	800a40e <__multiply+0xaa>
 800a444:	9901      	ldr	r1, [sp, #4]
 800a446:	5072      	str	r2, [r6, r1]
 800a448:	9a03      	ldr	r2, [sp, #12]
 800a44a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a44e:	3304      	adds	r3, #4
 800a450:	f1b9 0f00 	cmp.w	r9, #0
 800a454:	d01f      	beq.n	800a496 <__multiply+0x132>
 800a456:	6834      	ldr	r4, [r6, #0]
 800a458:	f105 0114 	add.w	r1, r5, #20
 800a45c:	46b6      	mov	lr, r6
 800a45e:	f04f 0a00 	mov.w	sl, #0
 800a462:	880a      	ldrh	r2, [r1, #0]
 800a464:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a468:	fb09 b202 	mla	r2, r9, r2, fp
 800a46c:	4492      	add	sl, r2
 800a46e:	b2a4      	uxth	r4, r4
 800a470:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a474:	f84e 4b04 	str.w	r4, [lr], #4
 800a478:	f851 4b04 	ldr.w	r4, [r1], #4
 800a47c:	f8be 2000 	ldrh.w	r2, [lr]
 800a480:	0c24      	lsrs	r4, r4, #16
 800a482:	fb09 2404 	mla	r4, r9, r4, r2
 800a486:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a48a:	458c      	cmp	ip, r1
 800a48c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a490:	d8e7      	bhi.n	800a462 <__multiply+0xfe>
 800a492:	9a01      	ldr	r2, [sp, #4]
 800a494:	50b4      	str	r4, [r6, r2]
 800a496:	3604      	adds	r6, #4
 800a498:	e7a3      	b.n	800a3e2 <__multiply+0x7e>
 800a49a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d1a5      	bne.n	800a3ee <__multiply+0x8a>
 800a4a2:	3f01      	subs	r7, #1
 800a4a4:	e7a1      	b.n	800a3ea <__multiply+0x86>
 800a4a6:	bf00      	nop
 800a4a8:	0800bd2c 	.word	0x0800bd2c
 800a4ac:	0800bdbc 	.word	0x0800bdbc

0800a4b0 <__pow5mult>:
 800a4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4b4:	4615      	mov	r5, r2
 800a4b6:	f012 0203 	ands.w	r2, r2, #3
 800a4ba:	4606      	mov	r6, r0
 800a4bc:	460f      	mov	r7, r1
 800a4be:	d007      	beq.n	800a4d0 <__pow5mult+0x20>
 800a4c0:	4c25      	ldr	r4, [pc, #148]	; (800a558 <__pow5mult+0xa8>)
 800a4c2:	3a01      	subs	r2, #1
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4ca:	f7ff fe51 	bl	800a170 <__multadd>
 800a4ce:	4607      	mov	r7, r0
 800a4d0:	10ad      	asrs	r5, r5, #2
 800a4d2:	d03d      	beq.n	800a550 <__pow5mult+0xa0>
 800a4d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a4d6:	b97c      	cbnz	r4, 800a4f8 <__pow5mult+0x48>
 800a4d8:	2010      	movs	r0, #16
 800a4da:	f7ff fdbf 	bl	800a05c <malloc>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	6270      	str	r0, [r6, #36]	; 0x24
 800a4e2:	b928      	cbnz	r0, 800a4f0 <__pow5mult+0x40>
 800a4e4:	4b1d      	ldr	r3, [pc, #116]	; (800a55c <__pow5mult+0xac>)
 800a4e6:	481e      	ldr	r0, [pc, #120]	; (800a560 <__pow5mult+0xb0>)
 800a4e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a4ec:	f000 fce8 	bl	800aec0 <__assert_func>
 800a4f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4f4:	6004      	str	r4, [r0, #0]
 800a4f6:	60c4      	str	r4, [r0, #12]
 800a4f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a4fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a500:	b94c      	cbnz	r4, 800a516 <__pow5mult+0x66>
 800a502:	f240 2171 	movw	r1, #625	; 0x271
 800a506:	4630      	mov	r0, r6
 800a508:	f7ff ff16 	bl	800a338 <__i2b>
 800a50c:	2300      	movs	r3, #0
 800a50e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a512:	4604      	mov	r4, r0
 800a514:	6003      	str	r3, [r0, #0]
 800a516:	f04f 0900 	mov.w	r9, #0
 800a51a:	07eb      	lsls	r3, r5, #31
 800a51c:	d50a      	bpl.n	800a534 <__pow5mult+0x84>
 800a51e:	4639      	mov	r1, r7
 800a520:	4622      	mov	r2, r4
 800a522:	4630      	mov	r0, r6
 800a524:	f7ff ff1e 	bl	800a364 <__multiply>
 800a528:	4639      	mov	r1, r7
 800a52a:	4680      	mov	r8, r0
 800a52c:	4630      	mov	r0, r6
 800a52e:	f7ff fdfd 	bl	800a12c <_Bfree>
 800a532:	4647      	mov	r7, r8
 800a534:	106d      	asrs	r5, r5, #1
 800a536:	d00b      	beq.n	800a550 <__pow5mult+0xa0>
 800a538:	6820      	ldr	r0, [r4, #0]
 800a53a:	b938      	cbnz	r0, 800a54c <__pow5mult+0x9c>
 800a53c:	4622      	mov	r2, r4
 800a53e:	4621      	mov	r1, r4
 800a540:	4630      	mov	r0, r6
 800a542:	f7ff ff0f 	bl	800a364 <__multiply>
 800a546:	6020      	str	r0, [r4, #0]
 800a548:	f8c0 9000 	str.w	r9, [r0]
 800a54c:	4604      	mov	r4, r0
 800a54e:	e7e4      	b.n	800a51a <__pow5mult+0x6a>
 800a550:	4638      	mov	r0, r7
 800a552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a556:	bf00      	nop
 800a558:	0800bf10 	.word	0x0800bf10
 800a55c:	0800bcb6 	.word	0x0800bcb6
 800a560:	0800bdbc 	.word	0x0800bdbc

0800a564 <__lshift>:
 800a564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a568:	460c      	mov	r4, r1
 800a56a:	6849      	ldr	r1, [r1, #4]
 800a56c:	6923      	ldr	r3, [r4, #16]
 800a56e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a572:	68a3      	ldr	r3, [r4, #8]
 800a574:	4607      	mov	r7, r0
 800a576:	4691      	mov	r9, r2
 800a578:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a57c:	f108 0601 	add.w	r6, r8, #1
 800a580:	42b3      	cmp	r3, r6
 800a582:	db0b      	blt.n	800a59c <__lshift+0x38>
 800a584:	4638      	mov	r0, r7
 800a586:	f7ff fd91 	bl	800a0ac <_Balloc>
 800a58a:	4605      	mov	r5, r0
 800a58c:	b948      	cbnz	r0, 800a5a2 <__lshift+0x3e>
 800a58e:	4602      	mov	r2, r0
 800a590:	4b28      	ldr	r3, [pc, #160]	; (800a634 <__lshift+0xd0>)
 800a592:	4829      	ldr	r0, [pc, #164]	; (800a638 <__lshift+0xd4>)
 800a594:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a598:	f000 fc92 	bl	800aec0 <__assert_func>
 800a59c:	3101      	adds	r1, #1
 800a59e:	005b      	lsls	r3, r3, #1
 800a5a0:	e7ee      	b.n	800a580 <__lshift+0x1c>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	f100 0114 	add.w	r1, r0, #20
 800a5a8:	f100 0210 	add.w	r2, r0, #16
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	4553      	cmp	r3, sl
 800a5b0:	db33      	blt.n	800a61a <__lshift+0xb6>
 800a5b2:	6920      	ldr	r0, [r4, #16]
 800a5b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5b8:	f104 0314 	add.w	r3, r4, #20
 800a5bc:	f019 091f 	ands.w	r9, r9, #31
 800a5c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5c8:	d02b      	beq.n	800a622 <__lshift+0xbe>
 800a5ca:	f1c9 0e20 	rsb	lr, r9, #32
 800a5ce:	468a      	mov	sl, r1
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	6818      	ldr	r0, [r3, #0]
 800a5d4:	fa00 f009 	lsl.w	r0, r0, r9
 800a5d8:	4302      	orrs	r2, r0
 800a5da:	f84a 2b04 	str.w	r2, [sl], #4
 800a5de:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5e2:	459c      	cmp	ip, r3
 800a5e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a5e8:	d8f3      	bhi.n	800a5d2 <__lshift+0x6e>
 800a5ea:	ebac 0304 	sub.w	r3, ip, r4
 800a5ee:	3b15      	subs	r3, #21
 800a5f0:	f023 0303 	bic.w	r3, r3, #3
 800a5f4:	3304      	adds	r3, #4
 800a5f6:	f104 0015 	add.w	r0, r4, #21
 800a5fa:	4584      	cmp	ip, r0
 800a5fc:	bf38      	it	cc
 800a5fe:	2304      	movcc	r3, #4
 800a600:	50ca      	str	r2, [r1, r3]
 800a602:	b10a      	cbz	r2, 800a608 <__lshift+0xa4>
 800a604:	f108 0602 	add.w	r6, r8, #2
 800a608:	3e01      	subs	r6, #1
 800a60a:	4638      	mov	r0, r7
 800a60c:	612e      	str	r6, [r5, #16]
 800a60e:	4621      	mov	r1, r4
 800a610:	f7ff fd8c 	bl	800a12c <_Bfree>
 800a614:	4628      	mov	r0, r5
 800a616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a61a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a61e:	3301      	adds	r3, #1
 800a620:	e7c5      	b.n	800a5ae <__lshift+0x4a>
 800a622:	3904      	subs	r1, #4
 800a624:	f853 2b04 	ldr.w	r2, [r3], #4
 800a628:	f841 2f04 	str.w	r2, [r1, #4]!
 800a62c:	459c      	cmp	ip, r3
 800a62e:	d8f9      	bhi.n	800a624 <__lshift+0xc0>
 800a630:	e7ea      	b.n	800a608 <__lshift+0xa4>
 800a632:	bf00      	nop
 800a634:	0800bd2c 	.word	0x0800bd2c
 800a638:	0800bdbc 	.word	0x0800bdbc

0800a63c <__mcmp>:
 800a63c:	b530      	push	{r4, r5, lr}
 800a63e:	6902      	ldr	r2, [r0, #16]
 800a640:	690c      	ldr	r4, [r1, #16]
 800a642:	1b12      	subs	r2, r2, r4
 800a644:	d10e      	bne.n	800a664 <__mcmp+0x28>
 800a646:	f100 0314 	add.w	r3, r0, #20
 800a64a:	3114      	adds	r1, #20
 800a64c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a650:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a654:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a658:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a65c:	42a5      	cmp	r5, r4
 800a65e:	d003      	beq.n	800a668 <__mcmp+0x2c>
 800a660:	d305      	bcc.n	800a66e <__mcmp+0x32>
 800a662:	2201      	movs	r2, #1
 800a664:	4610      	mov	r0, r2
 800a666:	bd30      	pop	{r4, r5, pc}
 800a668:	4283      	cmp	r3, r0
 800a66a:	d3f3      	bcc.n	800a654 <__mcmp+0x18>
 800a66c:	e7fa      	b.n	800a664 <__mcmp+0x28>
 800a66e:	f04f 32ff 	mov.w	r2, #4294967295
 800a672:	e7f7      	b.n	800a664 <__mcmp+0x28>

0800a674 <__mdiff>:
 800a674:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a678:	460c      	mov	r4, r1
 800a67a:	4606      	mov	r6, r0
 800a67c:	4611      	mov	r1, r2
 800a67e:	4620      	mov	r0, r4
 800a680:	4617      	mov	r7, r2
 800a682:	f7ff ffdb 	bl	800a63c <__mcmp>
 800a686:	1e05      	subs	r5, r0, #0
 800a688:	d110      	bne.n	800a6ac <__mdiff+0x38>
 800a68a:	4629      	mov	r1, r5
 800a68c:	4630      	mov	r0, r6
 800a68e:	f7ff fd0d 	bl	800a0ac <_Balloc>
 800a692:	b930      	cbnz	r0, 800a6a2 <__mdiff+0x2e>
 800a694:	4b39      	ldr	r3, [pc, #228]	; (800a77c <__mdiff+0x108>)
 800a696:	4602      	mov	r2, r0
 800a698:	f240 2132 	movw	r1, #562	; 0x232
 800a69c:	4838      	ldr	r0, [pc, #224]	; (800a780 <__mdiff+0x10c>)
 800a69e:	f000 fc0f 	bl	800aec0 <__assert_func>
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ac:	bfa4      	itt	ge
 800a6ae:	463b      	movge	r3, r7
 800a6b0:	4627      	movge	r7, r4
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	6879      	ldr	r1, [r7, #4]
 800a6b6:	bfa6      	itte	ge
 800a6b8:	461c      	movge	r4, r3
 800a6ba:	2500      	movge	r5, #0
 800a6bc:	2501      	movlt	r5, #1
 800a6be:	f7ff fcf5 	bl	800a0ac <_Balloc>
 800a6c2:	b920      	cbnz	r0, 800a6ce <__mdiff+0x5a>
 800a6c4:	4b2d      	ldr	r3, [pc, #180]	; (800a77c <__mdiff+0x108>)
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a6cc:	e7e6      	b.n	800a69c <__mdiff+0x28>
 800a6ce:	693e      	ldr	r6, [r7, #16]
 800a6d0:	60c5      	str	r5, [r0, #12]
 800a6d2:	6925      	ldr	r5, [r4, #16]
 800a6d4:	f107 0114 	add.w	r1, r7, #20
 800a6d8:	f104 0914 	add.w	r9, r4, #20
 800a6dc:	f100 0e14 	add.w	lr, r0, #20
 800a6e0:	f107 0210 	add.w	r2, r7, #16
 800a6e4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a6e8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a6ec:	46f2      	mov	sl, lr
 800a6ee:	2700      	movs	r7, #0
 800a6f0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a6f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a6f8:	fa1f f883 	uxth.w	r8, r3
 800a6fc:	fa17 f78b 	uxtah	r7, r7, fp
 800a700:	0c1b      	lsrs	r3, r3, #16
 800a702:	eba7 0808 	sub.w	r8, r7, r8
 800a706:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a70a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a70e:	fa1f f888 	uxth.w	r8, r8
 800a712:	141f      	asrs	r7, r3, #16
 800a714:	454d      	cmp	r5, r9
 800a716:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a71a:	f84a 3b04 	str.w	r3, [sl], #4
 800a71e:	d8e7      	bhi.n	800a6f0 <__mdiff+0x7c>
 800a720:	1b2b      	subs	r3, r5, r4
 800a722:	3b15      	subs	r3, #21
 800a724:	f023 0303 	bic.w	r3, r3, #3
 800a728:	3304      	adds	r3, #4
 800a72a:	3415      	adds	r4, #21
 800a72c:	42a5      	cmp	r5, r4
 800a72e:	bf38      	it	cc
 800a730:	2304      	movcc	r3, #4
 800a732:	4419      	add	r1, r3
 800a734:	4473      	add	r3, lr
 800a736:	469e      	mov	lr, r3
 800a738:	460d      	mov	r5, r1
 800a73a:	4565      	cmp	r5, ip
 800a73c:	d30e      	bcc.n	800a75c <__mdiff+0xe8>
 800a73e:	f10c 0203 	add.w	r2, ip, #3
 800a742:	1a52      	subs	r2, r2, r1
 800a744:	f022 0203 	bic.w	r2, r2, #3
 800a748:	3903      	subs	r1, #3
 800a74a:	458c      	cmp	ip, r1
 800a74c:	bf38      	it	cc
 800a74e:	2200      	movcc	r2, #0
 800a750:	441a      	add	r2, r3
 800a752:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a756:	b17b      	cbz	r3, 800a778 <__mdiff+0x104>
 800a758:	6106      	str	r6, [r0, #16]
 800a75a:	e7a5      	b.n	800a6a8 <__mdiff+0x34>
 800a75c:	f855 8b04 	ldr.w	r8, [r5], #4
 800a760:	fa17 f488 	uxtah	r4, r7, r8
 800a764:	1422      	asrs	r2, r4, #16
 800a766:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a76a:	b2a4      	uxth	r4, r4
 800a76c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a770:	f84e 4b04 	str.w	r4, [lr], #4
 800a774:	1417      	asrs	r7, r2, #16
 800a776:	e7e0      	b.n	800a73a <__mdiff+0xc6>
 800a778:	3e01      	subs	r6, #1
 800a77a:	e7ea      	b.n	800a752 <__mdiff+0xde>
 800a77c:	0800bd2c 	.word	0x0800bd2c
 800a780:	0800bdbc 	.word	0x0800bdbc

0800a784 <__ulp>:
 800a784:	b082      	sub	sp, #8
 800a786:	ed8d 0b00 	vstr	d0, [sp]
 800a78a:	9b01      	ldr	r3, [sp, #4]
 800a78c:	4912      	ldr	r1, [pc, #72]	; (800a7d8 <__ulp+0x54>)
 800a78e:	4019      	ands	r1, r3
 800a790:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a794:	2900      	cmp	r1, #0
 800a796:	dd05      	ble.n	800a7a4 <__ulp+0x20>
 800a798:	2200      	movs	r2, #0
 800a79a:	460b      	mov	r3, r1
 800a79c:	ec43 2b10 	vmov	d0, r2, r3
 800a7a0:	b002      	add	sp, #8
 800a7a2:	4770      	bx	lr
 800a7a4:	4249      	negs	r1, r1
 800a7a6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a7aa:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a7ae:	f04f 0200 	mov.w	r2, #0
 800a7b2:	f04f 0300 	mov.w	r3, #0
 800a7b6:	da04      	bge.n	800a7c2 <__ulp+0x3e>
 800a7b8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a7bc:	fa41 f300 	asr.w	r3, r1, r0
 800a7c0:	e7ec      	b.n	800a79c <__ulp+0x18>
 800a7c2:	f1a0 0114 	sub.w	r1, r0, #20
 800a7c6:	291e      	cmp	r1, #30
 800a7c8:	bfda      	itte	le
 800a7ca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a7ce:	fa20 f101 	lsrle.w	r1, r0, r1
 800a7d2:	2101      	movgt	r1, #1
 800a7d4:	460a      	mov	r2, r1
 800a7d6:	e7e1      	b.n	800a79c <__ulp+0x18>
 800a7d8:	7ff00000 	.word	0x7ff00000

0800a7dc <__b2d>:
 800a7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7de:	6905      	ldr	r5, [r0, #16]
 800a7e0:	f100 0714 	add.w	r7, r0, #20
 800a7e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a7e8:	1f2e      	subs	r6, r5, #4
 800a7ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f7ff fd52 	bl	800a298 <__hi0bits>
 800a7f4:	f1c0 0320 	rsb	r3, r0, #32
 800a7f8:	280a      	cmp	r0, #10
 800a7fa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a878 <__b2d+0x9c>
 800a7fe:	600b      	str	r3, [r1, #0]
 800a800:	dc14      	bgt.n	800a82c <__b2d+0x50>
 800a802:	f1c0 0e0b 	rsb	lr, r0, #11
 800a806:	fa24 f10e 	lsr.w	r1, r4, lr
 800a80a:	42b7      	cmp	r7, r6
 800a80c:	ea41 030c 	orr.w	r3, r1, ip
 800a810:	bf34      	ite	cc
 800a812:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a816:	2100      	movcs	r1, #0
 800a818:	3015      	adds	r0, #21
 800a81a:	fa04 f000 	lsl.w	r0, r4, r0
 800a81e:	fa21 f10e 	lsr.w	r1, r1, lr
 800a822:	ea40 0201 	orr.w	r2, r0, r1
 800a826:	ec43 2b10 	vmov	d0, r2, r3
 800a82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a82c:	42b7      	cmp	r7, r6
 800a82e:	bf3a      	itte	cc
 800a830:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a834:	f1a5 0608 	subcc.w	r6, r5, #8
 800a838:	2100      	movcs	r1, #0
 800a83a:	380b      	subs	r0, #11
 800a83c:	d017      	beq.n	800a86e <__b2d+0x92>
 800a83e:	f1c0 0c20 	rsb	ip, r0, #32
 800a842:	fa04 f500 	lsl.w	r5, r4, r0
 800a846:	42be      	cmp	r6, r7
 800a848:	fa21 f40c 	lsr.w	r4, r1, ip
 800a84c:	ea45 0504 	orr.w	r5, r5, r4
 800a850:	bf8c      	ite	hi
 800a852:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a856:	2400      	movls	r4, #0
 800a858:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a85c:	fa01 f000 	lsl.w	r0, r1, r0
 800a860:	fa24 f40c 	lsr.w	r4, r4, ip
 800a864:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a868:	ea40 0204 	orr.w	r2, r0, r4
 800a86c:	e7db      	b.n	800a826 <__b2d+0x4a>
 800a86e:	ea44 030c 	orr.w	r3, r4, ip
 800a872:	460a      	mov	r2, r1
 800a874:	e7d7      	b.n	800a826 <__b2d+0x4a>
 800a876:	bf00      	nop
 800a878:	3ff00000 	.word	0x3ff00000

0800a87c <__d2b>:
 800a87c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a880:	4689      	mov	r9, r1
 800a882:	2101      	movs	r1, #1
 800a884:	ec57 6b10 	vmov	r6, r7, d0
 800a888:	4690      	mov	r8, r2
 800a88a:	f7ff fc0f 	bl	800a0ac <_Balloc>
 800a88e:	4604      	mov	r4, r0
 800a890:	b930      	cbnz	r0, 800a8a0 <__d2b+0x24>
 800a892:	4602      	mov	r2, r0
 800a894:	4b25      	ldr	r3, [pc, #148]	; (800a92c <__d2b+0xb0>)
 800a896:	4826      	ldr	r0, [pc, #152]	; (800a930 <__d2b+0xb4>)
 800a898:	f240 310a 	movw	r1, #778	; 0x30a
 800a89c:	f000 fb10 	bl	800aec0 <__assert_func>
 800a8a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a8a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a8a8:	bb35      	cbnz	r5, 800a8f8 <__d2b+0x7c>
 800a8aa:	2e00      	cmp	r6, #0
 800a8ac:	9301      	str	r3, [sp, #4]
 800a8ae:	d028      	beq.n	800a902 <__d2b+0x86>
 800a8b0:	4668      	mov	r0, sp
 800a8b2:	9600      	str	r6, [sp, #0]
 800a8b4:	f7ff fd10 	bl	800a2d8 <__lo0bits>
 800a8b8:	9900      	ldr	r1, [sp, #0]
 800a8ba:	b300      	cbz	r0, 800a8fe <__d2b+0x82>
 800a8bc:	9a01      	ldr	r2, [sp, #4]
 800a8be:	f1c0 0320 	rsb	r3, r0, #32
 800a8c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a8c6:	430b      	orrs	r3, r1
 800a8c8:	40c2      	lsrs	r2, r0
 800a8ca:	6163      	str	r3, [r4, #20]
 800a8cc:	9201      	str	r2, [sp, #4]
 800a8ce:	9b01      	ldr	r3, [sp, #4]
 800a8d0:	61a3      	str	r3, [r4, #24]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	bf14      	ite	ne
 800a8d6:	2202      	movne	r2, #2
 800a8d8:	2201      	moveq	r2, #1
 800a8da:	6122      	str	r2, [r4, #16]
 800a8dc:	b1d5      	cbz	r5, 800a914 <__d2b+0x98>
 800a8de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a8e2:	4405      	add	r5, r0
 800a8e4:	f8c9 5000 	str.w	r5, [r9]
 800a8e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a8ec:	f8c8 0000 	str.w	r0, [r8]
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	b003      	add	sp, #12
 800a8f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8fc:	e7d5      	b.n	800a8aa <__d2b+0x2e>
 800a8fe:	6161      	str	r1, [r4, #20]
 800a900:	e7e5      	b.n	800a8ce <__d2b+0x52>
 800a902:	a801      	add	r0, sp, #4
 800a904:	f7ff fce8 	bl	800a2d8 <__lo0bits>
 800a908:	9b01      	ldr	r3, [sp, #4]
 800a90a:	6163      	str	r3, [r4, #20]
 800a90c:	2201      	movs	r2, #1
 800a90e:	6122      	str	r2, [r4, #16]
 800a910:	3020      	adds	r0, #32
 800a912:	e7e3      	b.n	800a8dc <__d2b+0x60>
 800a914:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a918:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a91c:	f8c9 0000 	str.w	r0, [r9]
 800a920:	6918      	ldr	r0, [r3, #16]
 800a922:	f7ff fcb9 	bl	800a298 <__hi0bits>
 800a926:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a92a:	e7df      	b.n	800a8ec <__d2b+0x70>
 800a92c:	0800bd2c 	.word	0x0800bd2c
 800a930:	0800bdbc 	.word	0x0800bdbc

0800a934 <__ratio>:
 800a934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a938:	468a      	mov	sl, r1
 800a93a:	4669      	mov	r1, sp
 800a93c:	4683      	mov	fp, r0
 800a93e:	f7ff ff4d 	bl	800a7dc <__b2d>
 800a942:	a901      	add	r1, sp, #4
 800a944:	4650      	mov	r0, sl
 800a946:	ec59 8b10 	vmov	r8, r9, d0
 800a94a:	ee10 6a10 	vmov	r6, s0
 800a94e:	f7ff ff45 	bl	800a7dc <__b2d>
 800a952:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a956:	f8da 2010 	ldr.w	r2, [sl, #16]
 800a95a:	eba3 0c02 	sub.w	ip, r3, r2
 800a95e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a962:	1a9b      	subs	r3, r3, r2
 800a964:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a968:	ec55 4b10 	vmov	r4, r5, d0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	ee10 0a10 	vmov	r0, s0
 800a972:	bfce      	itee	gt
 800a974:	464a      	movgt	r2, r9
 800a976:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a97a:	462a      	movle	r2, r5
 800a97c:	464f      	mov	r7, r9
 800a97e:	4629      	mov	r1, r5
 800a980:	bfcc      	ite	gt
 800a982:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a986:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800a98a:	ec47 6b17 	vmov	d7, r6, r7
 800a98e:	ec41 0b16 	vmov	d6, r0, r1
 800a992:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800a996:	b003      	add	sp, #12
 800a998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a99c <__copybits>:
 800a99c:	3901      	subs	r1, #1
 800a99e:	b570      	push	{r4, r5, r6, lr}
 800a9a0:	1149      	asrs	r1, r1, #5
 800a9a2:	6914      	ldr	r4, [r2, #16]
 800a9a4:	3101      	adds	r1, #1
 800a9a6:	f102 0314 	add.w	r3, r2, #20
 800a9aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a9ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a9b2:	1f05      	subs	r5, r0, #4
 800a9b4:	42a3      	cmp	r3, r4
 800a9b6:	d30c      	bcc.n	800a9d2 <__copybits+0x36>
 800a9b8:	1aa3      	subs	r3, r4, r2
 800a9ba:	3b11      	subs	r3, #17
 800a9bc:	f023 0303 	bic.w	r3, r3, #3
 800a9c0:	3211      	adds	r2, #17
 800a9c2:	42a2      	cmp	r2, r4
 800a9c4:	bf88      	it	hi
 800a9c6:	2300      	movhi	r3, #0
 800a9c8:	4418      	add	r0, r3
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	4288      	cmp	r0, r1
 800a9ce:	d305      	bcc.n	800a9dc <__copybits+0x40>
 800a9d0:	bd70      	pop	{r4, r5, r6, pc}
 800a9d2:	f853 6b04 	ldr.w	r6, [r3], #4
 800a9d6:	f845 6f04 	str.w	r6, [r5, #4]!
 800a9da:	e7eb      	b.n	800a9b4 <__copybits+0x18>
 800a9dc:	f840 3b04 	str.w	r3, [r0], #4
 800a9e0:	e7f4      	b.n	800a9cc <__copybits+0x30>

0800a9e2 <__any_on>:
 800a9e2:	f100 0214 	add.w	r2, r0, #20
 800a9e6:	6900      	ldr	r0, [r0, #16]
 800a9e8:	114b      	asrs	r3, r1, #5
 800a9ea:	4298      	cmp	r0, r3
 800a9ec:	b510      	push	{r4, lr}
 800a9ee:	db11      	blt.n	800aa14 <__any_on+0x32>
 800a9f0:	dd0a      	ble.n	800aa08 <__any_on+0x26>
 800a9f2:	f011 011f 	ands.w	r1, r1, #31
 800a9f6:	d007      	beq.n	800aa08 <__any_on+0x26>
 800a9f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a9fc:	fa24 f001 	lsr.w	r0, r4, r1
 800aa00:	fa00 f101 	lsl.w	r1, r0, r1
 800aa04:	428c      	cmp	r4, r1
 800aa06:	d10b      	bne.n	800aa20 <__any_on+0x3e>
 800aa08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d803      	bhi.n	800aa18 <__any_on+0x36>
 800aa10:	2000      	movs	r0, #0
 800aa12:	bd10      	pop	{r4, pc}
 800aa14:	4603      	mov	r3, r0
 800aa16:	e7f7      	b.n	800aa08 <__any_on+0x26>
 800aa18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa1c:	2900      	cmp	r1, #0
 800aa1e:	d0f5      	beq.n	800aa0c <__any_on+0x2a>
 800aa20:	2001      	movs	r0, #1
 800aa22:	e7f6      	b.n	800aa12 <__any_on+0x30>

0800aa24 <_calloc_r>:
 800aa24:	b513      	push	{r0, r1, r4, lr}
 800aa26:	434a      	muls	r2, r1
 800aa28:	4611      	mov	r1, r2
 800aa2a:	9201      	str	r2, [sp, #4]
 800aa2c:	f000 f85a 	bl	800aae4 <_malloc_r>
 800aa30:	4604      	mov	r4, r0
 800aa32:	b118      	cbz	r0, 800aa3c <_calloc_r+0x18>
 800aa34:	9a01      	ldr	r2, [sp, #4]
 800aa36:	2100      	movs	r1, #0
 800aa38:	f7fc fc98 	bl	800736c <memset>
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	b002      	add	sp, #8
 800aa40:	bd10      	pop	{r4, pc}
	...

0800aa44 <_free_r>:
 800aa44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa46:	2900      	cmp	r1, #0
 800aa48:	d048      	beq.n	800aadc <_free_r+0x98>
 800aa4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa4e:	9001      	str	r0, [sp, #4]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f1a1 0404 	sub.w	r4, r1, #4
 800aa56:	bfb8      	it	lt
 800aa58:	18e4      	addlt	r4, r4, r3
 800aa5a:	f000 fa7b 	bl	800af54 <__malloc_lock>
 800aa5e:	4a20      	ldr	r2, [pc, #128]	; (800aae0 <_free_r+0x9c>)
 800aa60:	9801      	ldr	r0, [sp, #4]
 800aa62:	6813      	ldr	r3, [r2, #0]
 800aa64:	4615      	mov	r5, r2
 800aa66:	b933      	cbnz	r3, 800aa76 <_free_r+0x32>
 800aa68:	6063      	str	r3, [r4, #4]
 800aa6a:	6014      	str	r4, [r2, #0]
 800aa6c:	b003      	add	sp, #12
 800aa6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa72:	f000 ba75 	b.w	800af60 <__malloc_unlock>
 800aa76:	42a3      	cmp	r3, r4
 800aa78:	d90b      	bls.n	800aa92 <_free_r+0x4e>
 800aa7a:	6821      	ldr	r1, [r4, #0]
 800aa7c:	1862      	adds	r2, r4, r1
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	bf04      	itt	eq
 800aa82:	681a      	ldreq	r2, [r3, #0]
 800aa84:	685b      	ldreq	r3, [r3, #4]
 800aa86:	6063      	str	r3, [r4, #4]
 800aa88:	bf04      	itt	eq
 800aa8a:	1852      	addeq	r2, r2, r1
 800aa8c:	6022      	streq	r2, [r4, #0]
 800aa8e:	602c      	str	r4, [r5, #0]
 800aa90:	e7ec      	b.n	800aa6c <_free_r+0x28>
 800aa92:	461a      	mov	r2, r3
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	b10b      	cbz	r3, 800aa9c <_free_r+0x58>
 800aa98:	42a3      	cmp	r3, r4
 800aa9a:	d9fa      	bls.n	800aa92 <_free_r+0x4e>
 800aa9c:	6811      	ldr	r1, [r2, #0]
 800aa9e:	1855      	adds	r5, r2, r1
 800aaa0:	42a5      	cmp	r5, r4
 800aaa2:	d10b      	bne.n	800aabc <_free_r+0x78>
 800aaa4:	6824      	ldr	r4, [r4, #0]
 800aaa6:	4421      	add	r1, r4
 800aaa8:	1854      	adds	r4, r2, r1
 800aaaa:	42a3      	cmp	r3, r4
 800aaac:	6011      	str	r1, [r2, #0]
 800aaae:	d1dd      	bne.n	800aa6c <_free_r+0x28>
 800aab0:	681c      	ldr	r4, [r3, #0]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	6053      	str	r3, [r2, #4]
 800aab6:	4421      	add	r1, r4
 800aab8:	6011      	str	r1, [r2, #0]
 800aaba:	e7d7      	b.n	800aa6c <_free_r+0x28>
 800aabc:	d902      	bls.n	800aac4 <_free_r+0x80>
 800aabe:	230c      	movs	r3, #12
 800aac0:	6003      	str	r3, [r0, #0]
 800aac2:	e7d3      	b.n	800aa6c <_free_r+0x28>
 800aac4:	6825      	ldr	r5, [r4, #0]
 800aac6:	1961      	adds	r1, r4, r5
 800aac8:	428b      	cmp	r3, r1
 800aaca:	bf04      	itt	eq
 800aacc:	6819      	ldreq	r1, [r3, #0]
 800aace:	685b      	ldreq	r3, [r3, #4]
 800aad0:	6063      	str	r3, [r4, #4]
 800aad2:	bf04      	itt	eq
 800aad4:	1949      	addeq	r1, r1, r5
 800aad6:	6021      	streq	r1, [r4, #0]
 800aad8:	6054      	str	r4, [r2, #4]
 800aada:	e7c7      	b.n	800aa6c <_free_r+0x28>
 800aadc:	b003      	add	sp, #12
 800aade:	bd30      	pop	{r4, r5, pc}
 800aae0:	24000204 	.word	0x24000204

0800aae4 <_malloc_r>:
 800aae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae6:	1ccd      	adds	r5, r1, #3
 800aae8:	f025 0503 	bic.w	r5, r5, #3
 800aaec:	3508      	adds	r5, #8
 800aaee:	2d0c      	cmp	r5, #12
 800aaf0:	bf38      	it	cc
 800aaf2:	250c      	movcc	r5, #12
 800aaf4:	2d00      	cmp	r5, #0
 800aaf6:	4606      	mov	r6, r0
 800aaf8:	db01      	blt.n	800aafe <_malloc_r+0x1a>
 800aafa:	42a9      	cmp	r1, r5
 800aafc:	d903      	bls.n	800ab06 <_malloc_r+0x22>
 800aafe:	230c      	movs	r3, #12
 800ab00:	6033      	str	r3, [r6, #0]
 800ab02:	2000      	movs	r0, #0
 800ab04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab06:	f000 fa25 	bl	800af54 <__malloc_lock>
 800ab0a:	4921      	ldr	r1, [pc, #132]	; (800ab90 <_malloc_r+0xac>)
 800ab0c:	680a      	ldr	r2, [r1, #0]
 800ab0e:	4614      	mov	r4, r2
 800ab10:	b99c      	cbnz	r4, 800ab3a <_malloc_r+0x56>
 800ab12:	4f20      	ldr	r7, [pc, #128]	; (800ab94 <_malloc_r+0xb0>)
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	b923      	cbnz	r3, 800ab22 <_malloc_r+0x3e>
 800ab18:	4621      	mov	r1, r4
 800ab1a:	4630      	mov	r0, r6
 800ab1c:	f000 f9a0 	bl	800ae60 <_sbrk_r>
 800ab20:	6038      	str	r0, [r7, #0]
 800ab22:	4629      	mov	r1, r5
 800ab24:	4630      	mov	r0, r6
 800ab26:	f000 f99b 	bl	800ae60 <_sbrk_r>
 800ab2a:	1c43      	adds	r3, r0, #1
 800ab2c:	d123      	bne.n	800ab76 <_malloc_r+0x92>
 800ab2e:	230c      	movs	r3, #12
 800ab30:	6033      	str	r3, [r6, #0]
 800ab32:	4630      	mov	r0, r6
 800ab34:	f000 fa14 	bl	800af60 <__malloc_unlock>
 800ab38:	e7e3      	b.n	800ab02 <_malloc_r+0x1e>
 800ab3a:	6823      	ldr	r3, [r4, #0]
 800ab3c:	1b5b      	subs	r3, r3, r5
 800ab3e:	d417      	bmi.n	800ab70 <_malloc_r+0x8c>
 800ab40:	2b0b      	cmp	r3, #11
 800ab42:	d903      	bls.n	800ab4c <_malloc_r+0x68>
 800ab44:	6023      	str	r3, [r4, #0]
 800ab46:	441c      	add	r4, r3
 800ab48:	6025      	str	r5, [r4, #0]
 800ab4a:	e004      	b.n	800ab56 <_malloc_r+0x72>
 800ab4c:	6863      	ldr	r3, [r4, #4]
 800ab4e:	42a2      	cmp	r2, r4
 800ab50:	bf0c      	ite	eq
 800ab52:	600b      	streq	r3, [r1, #0]
 800ab54:	6053      	strne	r3, [r2, #4]
 800ab56:	4630      	mov	r0, r6
 800ab58:	f000 fa02 	bl	800af60 <__malloc_unlock>
 800ab5c:	f104 000b 	add.w	r0, r4, #11
 800ab60:	1d23      	adds	r3, r4, #4
 800ab62:	f020 0007 	bic.w	r0, r0, #7
 800ab66:	1ac2      	subs	r2, r0, r3
 800ab68:	d0cc      	beq.n	800ab04 <_malloc_r+0x20>
 800ab6a:	1a1b      	subs	r3, r3, r0
 800ab6c:	50a3      	str	r3, [r4, r2]
 800ab6e:	e7c9      	b.n	800ab04 <_malloc_r+0x20>
 800ab70:	4622      	mov	r2, r4
 800ab72:	6864      	ldr	r4, [r4, #4]
 800ab74:	e7cc      	b.n	800ab10 <_malloc_r+0x2c>
 800ab76:	1cc4      	adds	r4, r0, #3
 800ab78:	f024 0403 	bic.w	r4, r4, #3
 800ab7c:	42a0      	cmp	r0, r4
 800ab7e:	d0e3      	beq.n	800ab48 <_malloc_r+0x64>
 800ab80:	1a21      	subs	r1, r4, r0
 800ab82:	4630      	mov	r0, r6
 800ab84:	f000 f96c 	bl	800ae60 <_sbrk_r>
 800ab88:	3001      	adds	r0, #1
 800ab8a:	d1dd      	bne.n	800ab48 <_malloc_r+0x64>
 800ab8c:	e7cf      	b.n	800ab2e <_malloc_r+0x4a>
 800ab8e:	bf00      	nop
 800ab90:	24000204 	.word	0x24000204
 800ab94:	24000208 	.word	0x24000208

0800ab98 <__ssputs_r>:
 800ab98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab9c:	688e      	ldr	r6, [r1, #8]
 800ab9e:	429e      	cmp	r6, r3
 800aba0:	4682      	mov	sl, r0
 800aba2:	460c      	mov	r4, r1
 800aba4:	4690      	mov	r8, r2
 800aba6:	461f      	mov	r7, r3
 800aba8:	d838      	bhi.n	800ac1c <__ssputs_r+0x84>
 800abaa:	898a      	ldrh	r2, [r1, #12]
 800abac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800abb0:	d032      	beq.n	800ac18 <__ssputs_r+0x80>
 800abb2:	6825      	ldr	r5, [r4, #0]
 800abb4:	6909      	ldr	r1, [r1, #16]
 800abb6:	eba5 0901 	sub.w	r9, r5, r1
 800abba:	6965      	ldr	r5, [r4, #20]
 800abbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800abc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800abc4:	3301      	adds	r3, #1
 800abc6:	444b      	add	r3, r9
 800abc8:	106d      	asrs	r5, r5, #1
 800abca:	429d      	cmp	r5, r3
 800abcc:	bf38      	it	cc
 800abce:	461d      	movcc	r5, r3
 800abd0:	0553      	lsls	r3, r2, #21
 800abd2:	d531      	bpl.n	800ac38 <__ssputs_r+0xa0>
 800abd4:	4629      	mov	r1, r5
 800abd6:	f7ff ff85 	bl	800aae4 <_malloc_r>
 800abda:	4606      	mov	r6, r0
 800abdc:	b950      	cbnz	r0, 800abf4 <__ssputs_r+0x5c>
 800abde:	230c      	movs	r3, #12
 800abe0:	f8ca 3000 	str.w	r3, [sl]
 800abe4:	89a3      	ldrh	r3, [r4, #12]
 800abe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abea:	81a3      	strh	r3, [r4, #12]
 800abec:	f04f 30ff 	mov.w	r0, #4294967295
 800abf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abf4:	6921      	ldr	r1, [r4, #16]
 800abf6:	464a      	mov	r2, r9
 800abf8:	f7ff fa4a 	bl	800a090 <memcpy>
 800abfc:	89a3      	ldrh	r3, [r4, #12]
 800abfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac06:	81a3      	strh	r3, [r4, #12]
 800ac08:	6126      	str	r6, [r4, #16]
 800ac0a:	6165      	str	r5, [r4, #20]
 800ac0c:	444e      	add	r6, r9
 800ac0e:	eba5 0509 	sub.w	r5, r5, r9
 800ac12:	6026      	str	r6, [r4, #0]
 800ac14:	60a5      	str	r5, [r4, #8]
 800ac16:	463e      	mov	r6, r7
 800ac18:	42be      	cmp	r6, r7
 800ac1a:	d900      	bls.n	800ac1e <__ssputs_r+0x86>
 800ac1c:	463e      	mov	r6, r7
 800ac1e:	4632      	mov	r2, r6
 800ac20:	6820      	ldr	r0, [r4, #0]
 800ac22:	4641      	mov	r1, r8
 800ac24:	f000 f97c 	bl	800af20 <memmove>
 800ac28:	68a3      	ldr	r3, [r4, #8]
 800ac2a:	6822      	ldr	r2, [r4, #0]
 800ac2c:	1b9b      	subs	r3, r3, r6
 800ac2e:	4432      	add	r2, r6
 800ac30:	60a3      	str	r3, [r4, #8]
 800ac32:	6022      	str	r2, [r4, #0]
 800ac34:	2000      	movs	r0, #0
 800ac36:	e7db      	b.n	800abf0 <__ssputs_r+0x58>
 800ac38:	462a      	mov	r2, r5
 800ac3a:	f000 f997 	bl	800af6c <_realloc_r>
 800ac3e:	4606      	mov	r6, r0
 800ac40:	2800      	cmp	r0, #0
 800ac42:	d1e1      	bne.n	800ac08 <__ssputs_r+0x70>
 800ac44:	6921      	ldr	r1, [r4, #16]
 800ac46:	4650      	mov	r0, sl
 800ac48:	f7ff fefc 	bl	800aa44 <_free_r>
 800ac4c:	e7c7      	b.n	800abde <__ssputs_r+0x46>
	...

0800ac50 <_svfiprintf_r>:
 800ac50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac54:	4698      	mov	r8, r3
 800ac56:	898b      	ldrh	r3, [r1, #12]
 800ac58:	061b      	lsls	r3, r3, #24
 800ac5a:	b09d      	sub	sp, #116	; 0x74
 800ac5c:	4607      	mov	r7, r0
 800ac5e:	460d      	mov	r5, r1
 800ac60:	4614      	mov	r4, r2
 800ac62:	d50e      	bpl.n	800ac82 <_svfiprintf_r+0x32>
 800ac64:	690b      	ldr	r3, [r1, #16]
 800ac66:	b963      	cbnz	r3, 800ac82 <_svfiprintf_r+0x32>
 800ac68:	2140      	movs	r1, #64	; 0x40
 800ac6a:	f7ff ff3b 	bl	800aae4 <_malloc_r>
 800ac6e:	6028      	str	r0, [r5, #0]
 800ac70:	6128      	str	r0, [r5, #16]
 800ac72:	b920      	cbnz	r0, 800ac7e <_svfiprintf_r+0x2e>
 800ac74:	230c      	movs	r3, #12
 800ac76:	603b      	str	r3, [r7, #0]
 800ac78:	f04f 30ff 	mov.w	r0, #4294967295
 800ac7c:	e0d1      	b.n	800ae22 <_svfiprintf_r+0x1d2>
 800ac7e:	2340      	movs	r3, #64	; 0x40
 800ac80:	616b      	str	r3, [r5, #20]
 800ac82:	2300      	movs	r3, #0
 800ac84:	9309      	str	r3, [sp, #36]	; 0x24
 800ac86:	2320      	movs	r3, #32
 800ac88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac90:	2330      	movs	r3, #48	; 0x30
 800ac92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ae3c <_svfiprintf_r+0x1ec>
 800ac96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac9a:	f04f 0901 	mov.w	r9, #1
 800ac9e:	4623      	mov	r3, r4
 800aca0:	469a      	mov	sl, r3
 800aca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aca6:	b10a      	cbz	r2, 800acac <_svfiprintf_r+0x5c>
 800aca8:	2a25      	cmp	r2, #37	; 0x25
 800acaa:	d1f9      	bne.n	800aca0 <_svfiprintf_r+0x50>
 800acac:	ebba 0b04 	subs.w	fp, sl, r4
 800acb0:	d00b      	beq.n	800acca <_svfiprintf_r+0x7a>
 800acb2:	465b      	mov	r3, fp
 800acb4:	4622      	mov	r2, r4
 800acb6:	4629      	mov	r1, r5
 800acb8:	4638      	mov	r0, r7
 800acba:	f7ff ff6d 	bl	800ab98 <__ssputs_r>
 800acbe:	3001      	adds	r0, #1
 800acc0:	f000 80aa 	beq.w	800ae18 <_svfiprintf_r+0x1c8>
 800acc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acc6:	445a      	add	r2, fp
 800acc8:	9209      	str	r2, [sp, #36]	; 0x24
 800acca:	f89a 3000 	ldrb.w	r3, [sl]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	f000 80a2 	beq.w	800ae18 <_svfiprintf_r+0x1c8>
 800acd4:	2300      	movs	r3, #0
 800acd6:	f04f 32ff 	mov.w	r2, #4294967295
 800acda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acde:	f10a 0a01 	add.w	sl, sl, #1
 800ace2:	9304      	str	r3, [sp, #16]
 800ace4:	9307      	str	r3, [sp, #28]
 800ace6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acea:	931a      	str	r3, [sp, #104]	; 0x68
 800acec:	4654      	mov	r4, sl
 800acee:	2205      	movs	r2, #5
 800acf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acf4:	4851      	ldr	r0, [pc, #324]	; (800ae3c <_svfiprintf_r+0x1ec>)
 800acf6:	f7f5 fafb 	bl	80002f0 <memchr>
 800acfa:	9a04      	ldr	r2, [sp, #16]
 800acfc:	b9d8      	cbnz	r0, 800ad36 <_svfiprintf_r+0xe6>
 800acfe:	06d0      	lsls	r0, r2, #27
 800ad00:	bf44      	itt	mi
 800ad02:	2320      	movmi	r3, #32
 800ad04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad08:	0711      	lsls	r1, r2, #28
 800ad0a:	bf44      	itt	mi
 800ad0c:	232b      	movmi	r3, #43	; 0x2b
 800ad0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad12:	f89a 3000 	ldrb.w	r3, [sl]
 800ad16:	2b2a      	cmp	r3, #42	; 0x2a
 800ad18:	d015      	beq.n	800ad46 <_svfiprintf_r+0xf6>
 800ad1a:	9a07      	ldr	r2, [sp, #28]
 800ad1c:	4654      	mov	r4, sl
 800ad1e:	2000      	movs	r0, #0
 800ad20:	f04f 0c0a 	mov.w	ip, #10
 800ad24:	4621      	mov	r1, r4
 800ad26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad2a:	3b30      	subs	r3, #48	; 0x30
 800ad2c:	2b09      	cmp	r3, #9
 800ad2e:	d94e      	bls.n	800adce <_svfiprintf_r+0x17e>
 800ad30:	b1b0      	cbz	r0, 800ad60 <_svfiprintf_r+0x110>
 800ad32:	9207      	str	r2, [sp, #28]
 800ad34:	e014      	b.n	800ad60 <_svfiprintf_r+0x110>
 800ad36:	eba0 0308 	sub.w	r3, r0, r8
 800ad3a:	fa09 f303 	lsl.w	r3, r9, r3
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	9304      	str	r3, [sp, #16]
 800ad42:	46a2      	mov	sl, r4
 800ad44:	e7d2      	b.n	800acec <_svfiprintf_r+0x9c>
 800ad46:	9b03      	ldr	r3, [sp, #12]
 800ad48:	1d19      	adds	r1, r3, #4
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	9103      	str	r1, [sp, #12]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	bfbb      	ittet	lt
 800ad52:	425b      	neglt	r3, r3
 800ad54:	f042 0202 	orrlt.w	r2, r2, #2
 800ad58:	9307      	strge	r3, [sp, #28]
 800ad5a:	9307      	strlt	r3, [sp, #28]
 800ad5c:	bfb8      	it	lt
 800ad5e:	9204      	strlt	r2, [sp, #16]
 800ad60:	7823      	ldrb	r3, [r4, #0]
 800ad62:	2b2e      	cmp	r3, #46	; 0x2e
 800ad64:	d10c      	bne.n	800ad80 <_svfiprintf_r+0x130>
 800ad66:	7863      	ldrb	r3, [r4, #1]
 800ad68:	2b2a      	cmp	r3, #42	; 0x2a
 800ad6a:	d135      	bne.n	800add8 <_svfiprintf_r+0x188>
 800ad6c:	9b03      	ldr	r3, [sp, #12]
 800ad6e:	1d1a      	adds	r2, r3, #4
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	9203      	str	r2, [sp, #12]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	bfb8      	it	lt
 800ad78:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad7c:	3402      	adds	r4, #2
 800ad7e:	9305      	str	r3, [sp, #20]
 800ad80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ae4c <_svfiprintf_r+0x1fc>
 800ad84:	7821      	ldrb	r1, [r4, #0]
 800ad86:	2203      	movs	r2, #3
 800ad88:	4650      	mov	r0, sl
 800ad8a:	f7f5 fab1 	bl	80002f0 <memchr>
 800ad8e:	b140      	cbz	r0, 800ada2 <_svfiprintf_r+0x152>
 800ad90:	2340      	movs	r3, #64	; 0x40
 800ad92:	eba0 000a 	sub.w	r0, r0, sl
 800ad96:	fa03 f000 	lsl.w	r0, r3, r0
 800ad9a:	9b04      	ldr	r3, [sp, #16]
 800ad9c:	4303      	orrs	r3, r0
 800ad9e:	3401      	adds	r4, #1
 800ada0:	9304      	str	r3, [sp, #16]
 800ada2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ada6:	4826      	ldr	r0, [pc, #152]	; (800ae40 <_svfiprintf_r+0x1f0>)
 800ada8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800adac:	2206      	movs	r2, #6
 800adae:	f7f5 fa9f 	bl	80002f0 <memchr>
 800adb2:	2800      	cmp	r0, #0
 800adb4:	d038      	beq.n	800ae28 <_svfiprintf_r+0x1d8>
 800adb6:	4b23      	ldr	r3, [pc, #140]	; (800ae44 <_svfiprintf_r+0x1f4>)
 800adb8:	bb1b      	cbnz	r3, 800ae02 <_svfiprintf_r+0x1b2>
 800adba:	9b03      	ldr	r3, [sp, #12]
 800adbc:	3307      	adds	r3, #7
 800adbe:	f023 0307 	bic.w	r3, r3, #7
 800adc2:	3308      	adds	r3, #8
 800adc4:	9303      	str	r3, [sp, #12]
 800adc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adc8:	4433      	add	r3, r6
 800adca:	9309      	str	r3, [sp, #36]	; 0x24
 800adcc:	e767      	b.n	800ac9e <_svfiprintf_r+0x4e>
 800adce:	fb0c 3202 	mla	r2, ip, r2, r3
 800add2:	460c      	mov	r4, r1
 800add4:	2001      	movs	r0, #1
 800add6:	e7a5      	b.n	800ad24 <_svfiprintf_r+0xd4>
 800add8:	2300      	movs	r3, #0
 800adda:	3401      	adds	r4, #1
 800addc:	9305      	str	r3, [sp, #20]
 800adde:	4619      	mov	r1, r3
 800ade0:	f04f 0c0a 	mov.w	ip, #10
 800ade4:	4620      	mov	r0, r4
 800ade6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adea:	3a30      	subs	r2, #48	; 0x30
 800adec:	2a09      	cmp	r2, #9
 800adee:	d903      	bls.n	800adf8 <_svfiprintf_r+0x1a8>
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d0c5      	beq.n	800ad80 <_svfiprintf_r+0x130>
 800adf4:	9105      	str	r1, [sp, #20]
 800adf6:	e7c3      	b.n	800ad80 <_svfiprintf_r+0x130>
 800adf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800adfc:	4604      	mov	r4, r0
 800adfe:	2301      	movs	r3, #1
 800ae00:	e7f0      	b.n	800ade4 <_svfiprintf_r+0x194>
 800ae02:	ab03      	add	r3, sp, #12
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	462a      	mov	r2, r5
 800ae08:	4b0f      	ldr	r3, [pc, #60]	; (800ae48 <_svfiprintf_r+0x1f8>)
 800ae0a:	a904      	add	r1, sp, #16
 800ae0c:	4638      	mov	r0, r7
 800ae0e:	f7fc fb47 	bl	80074a0 <_printf_float>
 800ae12:	1c42      	adds	r2, r0, #1
 800ae14:	4606      	mov	r6, r0
 800ae16:	d1d6      	bne.n	800adc6 <_svfiprintf_r+0x176>
 800ae18:	89ab      	ldrh	r3, [r5, #12]
 800ae1a:	065b      	lsls	r3, r3, #25
 800ae1c:	f53f af2c 	bmi.w	800ac78 <_svfiprintf_r+0x28>
 800ae20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae22:	b01d      	add	sp, #116	; 0x74
 800ae24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae28:	ab03      	add	r3, sp, #12
 800ae2a:	9300      	str	r3, [sp, #0]
 800ae2c:	462a      	mov	r2, r5
 800ae2e:	4b06      	ldr	r3, [pc, #24]	; (800ae48 <_svfiprintf_r+0x1f8>)
 800ae30:	a904      	add	r1, sp, #16
 800ae32:	4638      	mov	r0, r7
 800ae34:	f7fc fdc0 	bl	80079b8 <_printf_i>
 800ae38:	e7eb      	b.n	800ae12 <_svfiprintf_r+0x1c2>
 800ae3a:	bf00      	nop
 800ae3c:	0800bf1c 	.word	0x0800bf1c
 800ae40:	0800bf26 	.word	0x0800bf26
 800ae44:	080074a1 	.word	0x080074a1
 800ae48:	0800ab99 	.word	0x0800ab99
 800ae4c:	0800bf22 	.word	0x0800bf22

0800ae50 <nan>:
 800ae50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ae58 <nan+0x8>
 800ae54:	4770      	bx	lr
 800ae56:	bf00      	nop
 800ae58:	00000000 	.word	0x00000000
 800ae5c:	7ff80000 	.word	0x7ff80000

0800ae60 <_sbrk_r>:
 800ae60:	b538      	push	{r3, r4, r5, lr}
 800ae62:	4d06      	ldr	r5, [pc, #24]	; (800ae7c <_sbrk_r+0x1c>)
 800ae64:	2300      	movs	r3, #0
 800ae66:	4604      	mov	r4, r0
 800ae68:	4608      	mov	r0, r1
 800ae6a:	602b      	str	r3, [r5, #0]
 800ae6c:	f7f6 fd44 	bl	80018f8 <_sbrk>
 800ae70:	1c43      	adds	r3, r0, #1
 800ae72:	d102      	bne.n	800ae7a <_sbrk_r+0x1a>
 800ae74:	682b      	ldr	r3, [r5, #0]
 800ae76:	b103      	cbz	r3, 800ae7a <_sbrk_r+0x1a>
 800ae78:	6023      	str	r3, [r4, #0]
 800ae7a:	bd38      	pop	{r3, r4, r5, pc}
 800ae7c:	24000740 	.word	0x24000740

0800ae80 <strncmp>:
 800ae80:	b510      	push	{r4, lr}
 800ae82:	b16a      	cbz	r2, 800aea0 <strncmp+0x20>
 800ae84:	3901      	subs	r1, #1
 800ae86:	1884      	adds	r4, r0, r2
 800ae88:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ae8c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d103      	bne.n	800ae9c <strncmp+0x1c>
 800ae94:	42a0      	cmp	r0, r4
 800ae96:	d001      	beq.n	800ae9c <strncmp+0x1c>
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1f5      	bne.n	800ae88 <strncmp+0x8>
 800ae9c:	1a98      	subs	r0, r3, r2
 800ae9e:	bd10      	pop	{r4, pc}
 800aea0:	4610      	mov	r0, r2
 800aea2:	e7fc      	b.n	800ae9e <strncmp+0x1e>

0800aea4 <__ascii_wctomb>:
 800aea4:	b149      	cbz	r1, 800aeba <__ascii_wctomb+0x16>
 800aea6:	2aff      	cmp	r2, #255	; 0xff
 800aea8:	bf85      	ittet	hi
 800aeaa:	238a      	movhi	r3, #138	; 0x8a
 800aeac:	6003      	strhi	r3, [r0, #0]
 800aeae:	700a      	strbls	r2, [r1, #0]
 800aeb0:	f04f 30ff 	movhi.w	r0, #4294967295
 800aeb4:	bf98      	it	ls
 800aeb6:	2001      	movls	r0, #1
 800aeb8:	4770      	bx	lr
 800aeba:	4608      	mov	r0, r1
 800aebc:	4770      	bx	lr
	...

0800aec0 <__assert_func>:
 800aec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aec2:	4614      	mov	r4, r2
 800aec4:	461a      	mov	r2, r3
 800aec6:	4b09      	ldr	r3, [pc, #36]	; (800aeec <__assert_func+0x2c>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4605      	mov	r5, r0
 800aecc:	68d8      	ldr	r0, [r3, #12]
 800aece:	b14c      	cbz	r4, 800aee4 <__assert_func+0x24>
 800aed0:	4b07      	ldr	r3, [pc, #28]	; (800aef0 <__assert_func+0x30>)
 800aed2:	9100      	str	r1, [sp, #0]
 800aed4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aed8:	4906      	ldr	r1, [pc, #24]	; (800aef4 <__assert_func+0x34>)
 800aeda:	462b      	mov	r3, r5
 800aedc:	f000 f80e 	bl	800aefc <fiprintf>
 800aee0:	f000 fa84 	bl	800b3ec <abort>
 800aee4:	4b04      	ldr	r3, [pc, #16]	; (800aef8 <__assert_func+0x38>)
 800aee6:	461c      	mov	r4, r3
 800aee8:	e7f3      	b.n	800aed2 <__assert_func+0x12>
 800aeea:	bf00      	nop
 800aeec:	24000010 	.word	0x24000010
 800aef0:	0800bf2d 	.word	0x0800bf2d
 800aef4:	0800bf3a 	.word	0x0800bf3a
 800aef8:	0800bf68 	.word	0x0800bf68

0800aefc <fiprintf>:
 800aefc:	b40e      	push	{r1, r2, r3}
 800aefe:	b503      	push	{r0, r1, lr}
 800af00:	4601      	mov	r1, r0
 800af02:	ab03      	add	r3, sp, #12
 800af04:	4805      	ldr	r0, [pc, #20]	; (800af1c <fiprintf+0x20>)
 800af06:	f853 2b04 	ldr.w	r2, [r3], #4
 800af0a:	6800      	ldr	r0, [r0, #0]
 800af0c:	9301      	str	r3, [sp, #4]
 800af0e:	f000 f87d 	bl	800b00c <_vfiprintf_r>
 800af12:	b002      	add	sp, #8
 800af14:	f85d eb04 	ldr.w	lr, [sp], #4
 800af18:	b003      	add	sp, #12
 800af1a:	4770      	bx	lr
 800af1c:	24000010 	.word	0x24000010

0800af20 <memmove>:
 800af20:	4288      	cmp	r0, r1
 800af22:	b510      	push	{r4, lr}
 800af24:	eb01 0402 	add.w	r4, r1, r2
 800af28:	d902      	bls.n	800af30 <memmove+0x10>
 800af2a:	4284      	cmp	r4, r0
 800af2c:	4623      	mov	r3, r4
 800af2e:	d807      	bhi.n	800af40 <memmove+0x20>
 800af30:	1e43      	subs	r3, r0, #1
 800af32:	42a1      	cmp	r1, r4
 800af34:	d008      	beq.n	800af48 <memmove+0x28>
 800af36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af3e:	e7f8      	b.n	800af32 <memmove+0x12>
 800af40:	4402      	add	r2, r0
 800af42:	4601      	mov	r1, r0
 800af44:	428a      	cmp	r2, r1
 800af46:	d100      	bne.n	800af4a <memmove+0x2a>
 800af48:	bd10      	pop	{r4, pc}
 800af4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af52:	e7f7      	b.n	800af44 <memmove+0x24>

0800af54 <__malloc_lock>:
 800af54:	4801      	ldr	r0, [pc, #4]	; (800af5c <__malloc_lock+0x8>)
 800af56:	f000 bc09 	b.w	800b76c <__retarget_lock_acquire_recursive>
 800af5a:	bf00      	nop
 800af5c:	24000748 	.word	0x24000748

0800af60 <__malloc_unlock>:
 800af60:	4801      	ldr	r0, [pc, #4]	; (800af68 <__malloc_unlock+0x8>)
 800af62:	f000 bc04 	b.w	800b76e <__retarget_lock_release_recursive>
 800af66:	bf00      	nop
 800af68:	24000748 	.word	0x24000748

0800af6c <_realloc_r>:
 800af6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af6e:	4607      	mov	r7, r0
 800af70:	4614      	mov	r4, r2
 800af72:	460e      	mov	r6, r1
 800af74:	b921      	cbnz	r1, 800af80 <_realloc_r+0x14>
 800af76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800af7a:	4611      	mov	r1, r2
 800af7c:	f7ff bdb2 	b.w	800aae4 <_malloc_r>
 800af80:	b922      	cbnz	r2, 800af8c <_realloc_r+0x20>
 800af82:	f7ff fd5f 	bl	800aa44 <_free_r>
 800af86:	4625      	mov	r5, r4
 800af88:	4628      	mov	r0, r5
 800af8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af8c:	f000 fc54 	bl	800b838 <_malloc_usable_size_r>
 800af90:	42a0      	cmp	r0, r4
 800af92:	d20f      	bcs.n	800afb4 <_realloc_r+0x48>
 800af94:	4621      	mov	r1, r4
 800af96:	4638      	mov	r0, r7
 800af98:	f7ff fda4 	bl	800aae4 <_malloc_r>
 800af9c:	4605      	mov	r5, r0
 800af9e:	2800      	cmp	r0, #0
 800afa0:	d0f2      	beq.n	800af88 <_realloc_r+0x1c>
 800afa2:	4631      	mov	r1, r6
 800afa4:	4622      	mov	r2, r4
 800afa6:	f7ff f873 	bl	800a090 <memcpy>
 800afaa:	4631      	mov	r1, r6
 800afac:	4638      	mov	r0, r7
 800afae:	f7ff fd49 	bl	800aa44 <_free_r>
 800afb2:	e7e9      	b.n	800af88 <_realloc_r+0x1c>
 800afb4:	4635      	mov	r5, r6
 800afb6:	e7e7      	b.n	800af88 <_realloc_r+0x1c>

0800afb8 <__sfputc_r>:
 800afb8:	6893      	ldr	r3, [r2, #8]
 800afba:	3b01      	subs	r3, #1
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	b410      	push	{r4}
 800afc0:	6093      	str	r3, [r2, #8]
 800afc2:	da08      	bge.n	800afd6 <__sfputc_r+0x1e>
 800afc4:	6994      	ldr	r4, [r2, #24]
 800afc6:	42a3      	cmp	r3, r4
 800afc8:	db01      	blt.n	800afce <__sfputc_r+0x16>
 800afca:	290a      	cmp	r1, #10
 800afcc:	d103      	bne.n	800afd6 <__sfputc_r+0x1e>
 800afce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afd2:	f000 b94b 	b.w	800b26c <__swbuf_r>
 800afd6:	6813      	ldr	r3, [r2, #0]
 800afd8:	1c58      	adds	r0, r3, #1
 800afda:	6010      	str	r0, [r2, #0]
 800afdc:	7019      	strb	r1, [r3, #0]
 800afde:	4608      	mov	r0, r1
 800afe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afe4:	4770      	bx	lr

0800afe6 <__sfputs_r>:
 800afe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe8:	4606      	mov	r6, r0
 800afea:	460f      	mov	r7, r1
 800afec:	4614      	mov	r4, r2
 800afee:	18d5      	adds	r5, r2, r3
 800aff0:	42ac      	cmp	r4, r5
 800aff2:	d101      	bne.n	800aff8 <__sfputs_r+0x12>
 800aff4:	2000      	movs	r0, #0
 800aff6:	e007      	b.n	800b008 <__sfputs_r+0x22>
 800aff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800affc:	463a      	mov	r2, r7
 800affe:	4630      	mov	r0, r6
 800b000:	f7ff ffda 	bl	800afb8 <__sfputc_r>
 800b004:	1c43      	adds	r3, r0, #1
 800b006:	d1f3      	bne.n	800aff0 <__sfputs_r+0xa>
 800b008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b00c <_vfiprintf_r>:
 800b00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b010:	460d      	mov	r5, r1
 800b012:	b09d      	sub	sp, #116	; 0x74
 800b014:	4614      	mov	r4, r2
 800b016:	4698      	mov	r8, r3
 800b018:	4606      	mov	r6, r0
 800b01a:	b118      	cbz	r0, 800b024 <_vfiprintf_r+0x18>
 800b01c:	6983      	ldr	r3, [r0, #24]
 800b01e:	b90b      	cbnz	r3, 800b024 <_vfiprintf_r+0x18>
 800b020:	f000 fb06 	bl	800b630 <__sinit>
 800b024:	4b89      	ldr	r3, [pc, #548]	; (800b24c <_vfiprintf_r+0x240>)
 800b026:	429d      	cmp	r5, r3
 800b028:	d11b      	bne.n	800b062 <_vfiprintf_r+0x56>
 800b02a:	6875      	ldr	r5, [r6, #4]
 800b02c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b02e:	07d9      	lsls	r1, r3, #31
 800b030:	d405      	bmi.n	800b03e <_vfiprintf_r+0x32>
 800b032:	89ab      	ldrh	r3, [r5, #12]
 800b034:	059a      	lsls	r2, r3, #22
 800b036:	d402      	bmi.n	800b03e <_vfiprintf_r+0x32>
 800b038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b03a:	f000 fb97 	bl	800b76c <__retarget_lock_acquire_recursive>
 800b03e:	89ab      	ldrh	r3, [r5, #12]
 800b040:	071b      	lsls	r3, r3, #28
 800b042:	d501      	bpl.n	800b048 <_vfiprintf_r+0x3c>
 800b044:	692b      	ldr	r3, [r5, #16]
 800b046:	b9eb      	cbnz	r3, 800b084 <_vfiprintf_r+0x78>
 800b048:	4629      	mov	r1, r5
 800b04a:	4630      	mov	r0, r6
 800b04c:	f000 f960 	bl	800b310 <__swsetup_r>
 800b050:	b1c0      	cbz	r0, 800b084 <_vfiprintf_r+0x78>
 800b052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b054:	07dc      	lsls	r4, r3, #31
 800b056:	d50e      	bpl.n	800b076 <_vfiprintf_r+0x6a>
 800b058:	f04f 30ff 	mov.w	r0, #4294967295
 800b05c:	b01d      	add	sp, #116	; 0x74
 800b05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b062:	4b7b      	ldr	r3, [pc, #492]	; (800b250 <_vfiprintf_r+0x244>)
 800b064:	429d      	cmp	r5, r3
 800b066:	d101      	bne.n	800b06c <_vfiprintf_r+0x60>
 800b068:	68b5      	ldr	r5, [r6, #8]
 800b06a:	e7df      	b.n	800b02c <_vfiprintf_r+0x20>
 800b06c:	4b79      	ldr	r3, [pc, #484]	; (800b254 <_vfiprintf_r+0x248>)
 800b06e:	429d      	cmp	r5, r3
 800b070:	bf08      	it	eq
 800b072:	68f5      	ldreq	r5, [r6, #12]
 800b074:	e7da      	b.n	800b02c <_vfiprintf_r+0x20>
 800b076:	89ab      	ldrh	r3, [r5, #12]
 800b078:	0598      	lsls	r0, r3, #22
 800b07a:	d4ed      	bmi.n	800b058 <_vfiprintf_r+0x4c>
 800b07c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b07e:	f000 fb76 	bl	800b76e <__retarget_lock_release_recursive>
 800b082:	e7e9      	b.n	800b058 <_vfiprintf_r+0x4c>
 800b084:	2300      	movs	r3, #0
 800b086:	9309      	str	r3, [sp, #36]	; 0x24
 800b088:	2320      	movs	r3, #32
 800b08a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b08e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b092:	2330      	movs	r3, #48	; 0x30
 800b094:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b258 <_vfiprintf_r+0x24c>
 800b098:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b09c:	f04f 0901 	mov.w	r9, #1
 800b0a0:	4623      	mov	r3, r4
 800b0a2:	469a      	mov	sl, r3
 800b0a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0a8:	b10a      	cbz	r2, 800b0ae <_vfiprintf_r+0xa2>
 800b0aa:	2a25      	cmp	r2, #37	; 0x25
 800b0ac:	d1f9      	bne.n	800b0a2 <_vfiprintf_r+0x96>
 800b0ae:	ebba 0b04 	subs.w	fp, sl, r4
 800b0b2:	d00b      	beq.n	800b0cc <_vfiprintf_r+0xc0>
 800b0b4:	465b      	mov	r3, fp
 800b0b6:	4622      	mov	r2, r4
 800b0b8:	4629      	mov	r1, r5
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	f7ff ff93 	bl	800afe6 <__sfputs_r>
 800b0c0:	3001      	adds	r0, #1
 800b0c2:	f000 80aa 	beq.w	800b21a <_vfiprintf_r+0x20e>
 800b0c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0c8:	445a      	add	r2, fp
 800b0ca:	9209      	str	r2, [sp, #36]	; 0x24
 800b0cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f000 80a2 	beq.w	800b21a <_vfiprintf_r+0x20e>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b0dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0e0:	f10a 0a01 	add.w	sl, sl, #1
 800b0e4:	9304      	str	r3, [sp, #16]
 800b0e6:	9307      	str	r3, [sp, #28]
 800b0e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0ec:	931a      	str	r3, [sp, #104]	; 0x68
 800b0ee:	4654      	mov	r4, sl
 800b0f0:	2205      	movs	r2, #5
 800b0f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0f6:	4858      	ldr	r0, [pc, #352]	; (800b258 <_vfiprintf_r+0x24c>)
 800b0f8:	f7f5 f8fa 	bl	80002f0 <memchr>
 800b0fc:	9a04      	ldr	r2, [sp, #16]
 800b0fe:	b9d8      	cbnz	r0, 800b138 <_vfiprintf_r+0x12c>
 800b100:	06d1      	lsls	r1, r2, #27
 800b102:	bf44      	itt	mi
 800b104:	2320      	movmi	r3, #32
 800b106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b10a:	0713      	lsls	r3, r2, #28
 800b10c:	bf44      	itt	mi
 800b10e:	232b      	movmi	r3, #43	; 0x2b
 800b110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b114:	f89a 3000 	ldrb.w	r3, [sl]
 800b118:	2b2a      	cmp	r3, #42	; 0x2a
 800b11a:	d015      	beq.n	800b148 <_vfiprintf_r+0x13c>
 800b11c:	9a07      	ldr	r2, [sp, #28]
 800b11e:	4654      	mov	r4, sl
 800b120:	2000      	movs	r0, #0
 800b122:	f04f 0c0a 	mov.w	ip, #10
 800b126:	4621      	mov	r1, r4
 800b128:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b12c:	3b30      	subs	r3, #48	; 0x30
 800b12e:	2b09      	cmp	r3, #9
 800b130:	d94e      	bls.n	800b1d0 <_vfiprintf_r+0x1c4>
 800b132:	b1b0      	cbz	r0, 800b162 <_vfiprintf_r+0x156>
 800b134:	9207      	str	r2, [sp, #28]
 800b136:	e014      	b.n	800b162 <_vfiprintf_r+0x156>
 800b138:	eba0 0308 	sub.w	r3, r0, r8
 800b13c:	fa09 f303 	lsl.w	r3, r9, r3
 800b140:	4313      	orrs	r3, r2
 800b142:	9304      	str	r3, [sp, #16]
 800b144:	46a2      	mov	sl, r4
 800b146:	e7d2      	b.n	800b0ee <_vfiprintf_r+0xe2>
 800b148:	9b03      	ldr	r3, [sp, #12]
 800b14a:	1d19      	adds	r1, r3, #4
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	9103      	str	r1, [sp, #12]
 800b150:	2b00      	cmp	r3, #0
 800b152:	bfbb      	ittet	lt
 800b154:	425b      	neglt	r3, r3
 800b156:	f042 0202 	orrlt.w	r2, r2, #2
 800b15a:	9307      	strge	r3, [sp, #28]
 800b15c:	9307      	strlt	r3, [sp, #28]
 800b15e:	bfb8      	it	lt
 800b160:	9204      	strlt	r2, [sp, #16]
 800b162:	7823      	ldrb	r3, [r4, #0]
 800b164:	2b2e      	cmp	r3, #46	; 0x2e
 800b166:	d10c      	bne.n	800b182 <_vfiprintf_r+0x176>
 800b168:	7863      	ldrb	r3, [r4, #1]
 800b16a:	2b2a      	cmp	r3, #42	; 0x2a
 800b16c:	d135      	bne.n	800b1da <_vfiprintf_r+0x1ce>
 800b16e:	9b03      	ldr	r3, [sp, #12]
 800b170:	1d1a      	adds	r2, r3, #4
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	9203      	str	r2, [sp, #12]
 800b176:	2b00      	cmp	r3, #0
 800b178:	bfb8      	it	lt
 800b17a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b17e:	3402      	adds	r4, #2
 800b180:	9305      	str	r3, [sp, #20]
 800b182:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b268 <_vfiprintf_r+0x25c>
 800b186:	7821      	ldrb	r1, [r4, #0]
 800b188:	2203      	movs	r2, #3
 800b18a:	4650      	mov	r0, sl
 800b18c:	f7f5 f8b0 	bl	80002f0 <memchr>
 800b190:	b140      	cbz	r0, 800b1a4 <_vfiprintf_r+0x198>
 800b192:	2340      	movs	r3, #64	; 0x40
 800b194:	eba0 000a 	sub.w	r0, r0, sl
 800b198:	fa03 f000 	lsl.w	r0, r3, r0
 800b19c:	9b04      	ldr	r3, [sp, #16]
 800b19e:	4303      	orrs	r3, r0
 800b1a0:	3401      	adds	r4, #1
 800b1a2:	9304      	str	r3, [sp, #16]
 800b1a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1a8:	482c      	ldr	r0, [pc, #176]	; (800b25c <_vfiprintf_r+0x250>)
 800b1aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1ae:	2206      	movs	r2, #6
 800b1b0:	f7f5 f89e 	bl	80002f0 <memchr>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d03f      	beq.n	800b238 <_vfiprintf_r+0x22c>
 800b1b8:	4b29      	ldr	r3, [pc, #164]	; (800b260 <_vfiprintf_r+0x254>)
 800b1ba:	bb1b      	cbnz	r3, 800b204 <_vfiprintf_r+0x1f8>
 800b1bc:	9b03      	ldr	r3, [sp, #12]
 800b1be:	3307      	adds	r3, #7
 800b1c0:	f023 0307 	bic.w	r3, r3, #7
 800b1c4:	3308      	adds	r3, #8
 800b1c6:	9303      	str	r3, [sp, #12]
 800b1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ca:	443b      	add	r3, r7
 800b1cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ce:	e767      	b.n	800b0a0 <_vfiprintf_r+0x94>
 800b1d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1d4:	460c      	mov	r4, r1
 800b1d6:	2001      	movs	r0, #1
 800b1d8:	e7a5      	b.n	800b126 <_vfiprintf_r+0x11a>
 800b1da:	2300      	movs	r3, #0
 800b1dc:	3401      	adds	r4, #1
 800b1de:	9305      	str	r3, [sp, #20]
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	f04f 0c0a 	mov.w	ip, #10
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1ec:	3a30      	subs	r2, #48	; 0x30
 800b1ee:	2a09      	cmp	r2, #9
 800b1f0:	d903      	bls.n	800b1fa <_vfiprintf_r+0x1ee>
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d0c5      	beq.n	800b182 <_vfiprintf_r+0x176>
 800b1f6:	9105      	str	r1, [sp, #20]
 800b1f8:	e7c3      	b.n	800b182 <_vfiprintf_r+0x176>
 800b1fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1fe:	4604      	mov	r4, r0
 800b200:	2301      	movs	r3, #1
 800b202:	e7f0      	b.n	800b1e6 <_vfiprintf_r+0x1da>
 800b204:	ab03      	add	r3, sp, #12
 800b206:	9300      	str	r3, [sp, #0]
 800b208:	462a      	mov	r2, r5
 800b20a:	4b16      	ldr	r3, [pc, #88]	; (800b264 <_vfiprintf_r+0x258>)
 800b20c:	a904      	add	r1, sp, #16
 800b20e:	4630      	mov	r0, r6
 800b210:	f7fc f946 	bl	80074a0 <_printf_float>
 800b214:	4607      	mov	r7, r0
 800b216:	1c78      	adds	r0, r7, #1
 800b218:	d1d6      	bne.n	800b1c8 <_vfiprintf_r+0x1bc>
 800b21a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b21c:	07d9      	lsls	r1, r3, #31
 800b21e:	d405      	bmi.n	800b22c <_vfiprintf_r+0x220>
 800b220:	89ab      	ldrh	r3, [r5, #12]
 800b222:	059a      	lsls	r2, r3, #22
 800b224:	d402      	bmi.n	800b22c <_vfiprintf_r+0x220>
 800b226:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b228:	f000 faa1 	bl	800b76e <__retarget_lock_release_recursive>
 800b22c:	89ab      	ldrh	r3, [r5, #12]
 800b22e:	065b      	lsls	r3, r3, #25
 800b230:	f53f af12 	bmi.w	800b058 <_vfiprintf_r+0x4c>
 800b234:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b236:	e711      	b.n	800b05c <_vfiprintf_r+0x50>
 800b238:	ab03      	add	r3, sp, #12
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	462a      	mov	r2, r5
 800b23e:	4b09      	ldr	r3, [pc, #36]	; (800b264 <_vfiprintf_r+0x258>)
 800b240:	a904      	add	r1, sp, #16
 800b242:	4630      	mov	r0, r6
 800b244:	f7fc fbb8 	bl	80079b8 <_printf_i>
 800b248:	e7e4      	b.n	800b214 <_vfiprintf_r+0x208>
 800b24a:	bf00      	nop
 800b24c:	0800bf8c 	.word	0x0800bf8c
 800b250:	0800bfac 	.word	0x0800bfac
 800b254:	0800bf6c 	.word	0x0800bf6c
 800b258:	0800bf1c 	.word	0x0800bf1c
 800b25c:	0800bf26 	.word	0x0800bf26
 800b260:	080074a1 	.word	0x080074a1
 800b264:	0800afe7 	.word	0x0800afe7
 800b268:	0800bf22 	.word	0x0800bf22

0800b26c <__swbuf_r>:
 800b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26e:	460e      	mov	r6, r1
 800b270:	4614      	mov	r4, r2
 800b272:	4605      	mov	r5, r0
 800b274:	b118      	cbz	r0, 800b27e <__swbuf_r+0x12>
 800b276:	6983      	ldr	r3, [r0, #24]
 800b278:	b90b      	cbnz	r3, 800b27e <__swbuf_r+0x12>
 800b27a:	f000 f9d9 	bl	800b630 <__sinit>
 800b27e:	4b21      	ldr	r3, [pc, #132]	; (800b304 <__swbuf_r+0x98>)
 800b280:	429c      	cmp	r4, r3
 800b282:	d12b      	bne.n	800b2dc <__swbuf_r+0x70>
 800b284:	686c      	ldr	r4, [r5, #4]
 800b286:	69a3      	ldr	r3, [r4, #24]
 800b288:	60a3      	str	r3, [r4, #8]
 800b28a:	89a3      	ldrh	r3, [r4, #12]
 800b28c:	071a      	lsls	r2, r3, #28
 800b28e:	d52f      	bpl.n	800b2f0 <__swbuf_r+0x84>
 800b290:	6923      	ldr	r3, [r4, #16]
 800b292:	b36b      	cbz	r3, 800b2f0 <__swbuf_r+0x84>
 800b294:	6923      	ldr	r3, [r4, #16]
 800b296:	6820      	ldr	r0, [r4, #0]
 800b298:	1ac0      	subs	r0, r0, r3
 800b29a:	6963      	ldr	r3, [r4, #20]
 800b29c:	b2f6      	uxtb	r6, r6
 800b29e:	4283      	cmp	r3, r0
 800b2a0:	4637      	mov	r7, r6
 800b2a2:	dc04      	bgt.n	800b2ae <__swbuf_r+0x42>
 800b2a4:	4621      	mov	r1, r4
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	f000 f92e 	bl	800b508 <_fflush_r>
 800b2ac:	bb30      	cbnz	r0, 800b2fc <__swbuf_r+0x90>
 800b2ae:	68a3      	ldr	r3, [r4, #8]
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	60a3      	str	r3, [r4, #8]
 800b2b4:	6823      	ldr	r3, [r4, #0]
 800b2b6:	1c5a      	adds	r2, r3, #1
 800b2b8:	6022      	str	r2, [r4, #0]
 800b2ba:	701e      	strb	r6, [r3, #0]
 800b2bc:	6963      	ldr	r3, [r4, #20]
 800b2be:	3001      	adds	r0, #1
 800b2c0:	4283      	cmp	r3, r0
 800b2c2:	d004      	beq.n	800b2ce <__swbuf_r+0x62>
 800b2c4:	89a3      	ldrh	r3, [r4, #12]
 800b2c6:	07db      	lsls	r3, r3, #31
 800b2c8:	d506      	bpl.n	800b2d8 <__swbuf_r+0x6c>
 800b2ca:	2e0a      	cmp	r6, #10
 800b2cc:	d104      	bne.n	800b2d8 <__swbuf_r+0x6c>
 800b2ce:	4621      	mov	r1, r4
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	f000 f919 	bl	800b508 <_fflush_r>
 800b2d6:	b988      	cbnz	r0, 800b2fc <__swbuf_r+0x90>
 800b2d8:	4638      	mov	r0, r7
 800b2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2dc:	4b0a      	ldr	r3, [pc, #40]	; (800b308 <__swbuf_r+0x9c>)
 800b2de:	429c      	cmp	r4, r3
 800b2e0:	d101      	bne.n	800b2e6 <__swbuf_r+0x7a>
 800b2e2:	68ac      	ldr	r4, [r5, #8]
 800b2e4:	e7cf      	b.n	800b286 <__swbuf_r+0x1a>
 800b2e6:	4b09      	ldr	r3, [pc, #36]	; (800b30c <__swbuf_r+0xa0>)
 800b2e8:	429c      	cmp	r4, r3
 800b2ea:	bf08      	it	eq
 800b2ec:	68ec      	ldreq	r4, [r5, #12]
 800b2ee:	e7ca      	b.n	800b286 <__swbuf_r+0x1a>
 800b2f0:	4621      	mov	r1, r4
 800b2f2:	4628      	mov	r0, r5
 800b2f4:	f000 f80c 	bl	800b310 <__swsetup_r>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d0cb      	beq.n	800b294 <__swbuf_r+0x28>
 800b2fc:	f04f 37ff 	mov.w	r7, #4294967295
 800b300:	e7ea      	b.n	800b2d8 <__swbuf_r+0x6c>
 800b302:	bf00      	nop
 800b304:	0800bf8c 	.word	0x0800bf8c
 800b308:	0800bfac 	.word	0x0800bfac
 800b30c:	0800bf6c 	.word	0x0800bf6c

0800b310 <__swsetup_r>:
 800b310:	4b32      	ldr	r3, [pc, #200]	; (800b3dc <__swsetup_r+0xcc>)
 800b312:	b570      	push	{r4, r5, r6, lr}
 800b314:	681d      	ldr	r5, [r3, #0]
 800b316:	4606      	mov	r6, r0
 800b318:	460c      	mov	r4, r1
 800b31a:	b125      	cbz	r5, 800b326 <__swsetup_r+0x16>
 800b31c:	69ab      	ldr	r3, [r5, #24]
 800b31e:	b913      	cbnz	r3, 800b326 <__swsetup_r+0x16>
 800b320:	4628      	mov	r0, r5
 800b322:	f000 f985 	bl	800b630 <__sinit>
 800b326:	4b2e      	ldr	r3, [pc, #184]	; (800b3e0 <__swsetup_r+0xd0>)
 800b328:	429c      	cmp	r4, r3
 800b32a:	d10f      	bne.n	800b34c <__swsetup_r+0x3c>
 800b32c:	686c      	ldr	r4, [r5, #4]
 800b32e:	89a3      	ldrh	r3, [r4, #12]
 800b330:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b334:	0719      	lsls	r1, r3, #28
 800b336:	d42c      	bmi.n	800b392 <__swsetup_r+0x82>
 800b338:	06dd      	lsls	r5, r3, #27
 800b33a:	d411      	bmi.n	800b360 <__swsetup_r+0x50>
 800b33c:	2309      	movs	r3, #9
 800b33e:	6033      	str	r3, [r6, #0]
 800b340:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b344:	81a3      	strh	r3, [r4, #12]
 800b346:	f04f 30ff 	mov.w	r0, #4294967295
 800b34a:	e03e      	b.n	800b3ca <__swsetup_r+0xba>
 800b34c:	4b25      	ldr	r3, [pc, #148]	; (800b3e4 <__swsetup_r+0xd4>)
 800b34e:	429c      	cmp	r4, r3
 800b350:	d101      	bne.n	800b356 <__swsetup_r+0x46>
 800b352:	68ac      	ldr	r4, [r5, #8]
 800b354:	e7eb      	b.n	800b32e <__swsetup_r+0x1e>
 800b356:	4b24      	ldr	r3, [pc, #144]	; (800b3e8 <__swsetup_r+0xd8>)
 800b358:	429c      	cmp	r4, r3
 800b35a:	bf08      	it	eq
 800b35c:	68ec      	ldreq	r4, [r5, #12]
 800b35e:	e7e6      	b.n	800b32e <__swsetup_r+0x1e>
 800b360:	0758      	lsls	r0, r3, #29
 800b362:	d512      	bpl.n	800b38a <__swsetup_r+0x7a>
 800b364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b366:	b141      	cbz	r1, 800b37a <__swsetup_r+0x6a>
 800b368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b36c:	4299      	cmp	r1, r3
 800b36e:	d002      	beq.n	800b376 <__swsetup_r+0x66>
 800b370:	4630      	mov	r0, r6
 800b372:	f7ff fb67 	bl	800aa44 <_free_r>
 800b376:	2300      	movs	r3, #0
 800b378:	6363      	str	r3, [r4, #52]	; 0x34
 800b37a:	89a3      	ldrh	r3, [r4, #12]
 800b37c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b380:	81a3      	strh	r3, [r4, #12]
 800b382:	2300      	movs	r3, #0
 800b384:	6063      	str	r3, [r4, #4]
 800b386:	6923      	ldr	r3, [r4, #16]
 800b388:	6023      	str	r3, [r4, #0]
 800b38a:	89a3      	ldrh	r3, [r4, #12]
 800b38c:	f043 0308 	orr.w	r3, r3, #8
 800b390:	81a3      	strh	r3, [r4, #12]
 800b392:	6923      	ldr	r3, [r4, #16]
 800b394:	b94b      	cbnz	r3, 800b3aa <__swsetup_r+0x9a>
 800b396:	89a3      	ldrh	r3, [r4, #12]
 800b398:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b39c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3a0:	d003      	beq.n	800b3aa <__swsetup_r+0x9a>
 800b3a2:	4621      	mov	r1, r4
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	f000 fa07 	bl	800b7b8 <__smakebuf_r>
 800b3aa:	89a0      	ldrh	r0, [r4, #12]
 800b3ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3b0:	f010 0301 	ands.w	r3, r0, #1
 800b3b4:	d00a      	beq.n	800b3cc <__swsetup_r+0xbc>
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	60a3      	str	r3, [r4, #8]
 800b3ba:	6963      	ldr	r3, [r4, #20]
 800b3bc:	425b      	negs	r3, r3
 800b3be:	61a3      	str	r3, [r4, #24]
 800b3c0:	6923      	ldr	r3, [r4, #16]
 800b3c2:	b943      	cbnz	r3, 800b3d6 <__swsetup_r+0xc6>
 800b3c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b3c8:	d1ba      	bne.n	800b340 <__swsetup_r+0x30>
 800b3ca:	bd70      	pop	{r4, r5, r6, pc}
 800b3cc:	0781      	lsls	r1, r0, #30
 800b3ce:	bf58      	it	pl
 800b3d0:	6963      	ldrpl	r3, [r4, #20]
 800b3d2:	60a3      	str	r3, [r4, #8]
 800b3d4:	e7f4      	b.n	800b3c0 <__swsetup_r+0xb0>
 800b3d6:	2000      	movs	r0, #0
 800b3d8:	e7f7      	b.n	800b3ca <__swsetup_r+0xba>
 800b3da:	bf00      	nop
 800b3dc:	24000010 	.word	0x24000010
 800b3e0:	0800bf8c 	.word	0x0800bf8c
 800b3e4:	0800bfac 	.word	0x0800bfac
 800b3e8:	0800bf6c 	.word	0x0800bf6c

0800b3ec <abort>:
 800b3ec:	b508      	push	{r3, lr}
 800b3ee:	2006      	movs	r0, #6
 800b3f0:	f000 fa52 	bl	800b898 <raise>
 800b3f4:	2001      	movs	r0, #1
 800b3f6:	f7f6 fa07 	bl	8001808 <_exit>
	...

0800b3fc <__sflush_r>:
 800b3fc:	898a      	ldrh	r2, [r1, #12]
 800b3fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b402:	4605      	mov	r5, r0
 800b404:	0710      	lsls	r0, r2, #28
 800b406:	460c      	mov	r4, r1
 800b408:	d458      	bmi.n	800b4bc <__sflush_r+0xc0>
 800b40a:	684b      	ldr	r3, [r1, #4]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	dc05      	bgt.n	800b41c <__sflush_r+0x20>
 800b410:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b412:	2b00      	cmp	r3, #0
 800b414:	dc02      	bgt.n	800b41c <__sflush_r+0x20>
 800b416:	2000      	movs	r0, #0
 800b418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b41c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b41e:	2e00      	cmp	r6, #0
 800b420:	d0f9      	beq.n	800b416 <__sflush_r+0x1a>
 800b422:	2300      	movs	r3, #0
 800b424:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b428:	682f      	ldr	r7, [r5, #0]
 800b42a:	602b      	str	r3, [r5, #0]
 800b42c:	d032      	beq.n	800b494 <__sflush_r+0x98>
 800b42e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b430:	89a3      	ldrh	r3, [r4, #12]
 800b432:	075a      	lsls	r2, r3, #29
 800b434:	d505      	bpl.n	800b442 <__sflush_r+0x46>
 800b436:	6863      	ldr	r3, [r4, #4]
 800b438:	1ac0      	subs	r0, r0, r3
 800b43a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b43c:	b10b      	cbz	r3, 800b442 <__sflush_r+0x46>
 800b43e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b440:	1ac0      	subs	r0, r0, r3
 800b442:	2300      	movs	r3, #0
 800b444:	4602      	mov	r2, r0
 800b446:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b448:	6a21      	ldr	r1, [r4, #32]
 800b44a:	4628      	mov	r0, r5
 800b44c:	47b0      	blx	r6
 800b44e:	1c43      	adds	r3, r0, #1
 800b450:	89a3      	ldrh	r3, [r4, #12]
 800b452:	d106      	bne.n	800b462 <__sflush_r+0x66>
 800b454:	6829      	ldr	r1, [r5, #0]
 800b456:	291d      	cmp	r1, #29
 800b458:	d82c      	bhi.n	800b4b4 <__sflush_r+0xb8>
 800b45a:	4a2a      	ldr	r2, [pc, #168]	; (800b504 <__sflush_r+0x108>)
 800b45c:	40ca      	lsrs	r2, r1
 800b45e:	07d6      	lsls	r6, r2, #31
 800b460:	d528      	bpl.n	800b4b4 <__sflush_r+0xb8>
 800b462:	2200      	movs	r2, #0
 800b464:	6062      	str	r2, [r4, #4]
 800b466:	04d9      	lsls	r1, r3, #19
 800b468:	6922      	ldr	r2, [r4, #16]
 800b46a:	6022      	str	r2, [r4, #0]
 800b46c:	d504      	bpl.n	800b478 <__sflush_r+0x7c>
 800b46e:	1c42      	adds	r2, r0, #1
 800b470:	d101      	bne.n	800b476 <__sflush_r+0x7a>
 800b472:	682b      	ldr	r3, [r5, #0]
 800b474:	b903      	cbnz	r3, 800b478 <__sflush_r+0x7c>
 800b476:	6560      	str	r0, [r4, #84]	; 0x54
 800b478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b47a:	602f      	str	r7, [r5, #0]
 800b47c:	2900      	cmp	r1, #0
 800b47e:	d0ca      	beq.n	800b416 <__sflush_r+0x1a>
 800b480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b484:	4299      	cmp	r1, r3
 800b486:	d002      	beq.n	800b48e <__sflush_r+0x92>
 800b488:	4628      	mov	r0, r5
 800b48a:	f7ff fadb 	bl	800aa44 <_free_r>
 800b48e:	2000      	movs	r0, #0
 800b490:	6360      	str	r0, [r4, #52]	; 0x34
 800b492:	e7c1      	b.n	800b418 <__sflush_r+0x1c>
 800b494:	6a21      	ldr	r1, [r4, #32]
 800b496:	2301      	movs	r3, #1
 800b498:	4628      	mov	r0, r5
 800b49a:	47b0      	blx	r6
 800b49c:	1c41      	adds	r1, r0, #1
 800b49e:	d1c7      	bne.n	800b430 <__sflush_r+0x34>
 800b4a0:	682b      	ldr	r3, [r5, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d0c4      	beq.n	800b430 <__sflush_r+0x34>
 800b4a6:	2b1d      	cmp	r3, #29
 800b4a8:	d001      	beq.n	800b4ae <__sflush_r+0xb2>
 800b4aa:	2b16      	cmp	r3, #22
 800b4ac:	d101      	bne.n	800b4b2 <__sflush_r+0xb6>
 800b4ae:	602f      	str	r7, [r5, #0]
 800b4b0:	e7b1      	b.n	800b416 <__sflush_r+0x1a>
 800b4b2:	89a3      	ldrh	r3, [r4, #12]
 800b4b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4b8:	81a3      	strh	r3, [r4, #12]
 800b4ba:	e7ad      	b.n	800b418 <__sflush_r+0x1c>
 800b4bc:	690f      	ldr	r7, [r1, #16]
 800b4be:	2f00      	cmp	r7, #0
 800b4c0:	d0a9      	beq.n	800b416 <__sflush_r+0x1a>
 800b4c2:	0793      	lsls	r3, r2, #30
 800b4c4:	680e      	ldr	r6, [r1, #0]
 800b4c6:	bf08      	it	eq
 800b4c8:	694b      	ldreq	r3, [r1, #20]
 800b4ca:	600f      	str	r7, [r1, #0]
 800b4cc:	bf18      	it	ne
 800b4ce:	2300      	movne	r3, #0
 800b4d0:	eba6 0807 	sub.w	r8, r6, r7
 800b4d4:	608b      	str	r3, [r1, #8]
 800b4d6:	f1b8 0f00 	cmp.w	r8, #0
 800b4da:	dd9c      	ble.n	800b416 <__sflush_r+0x1a>
 800b4dc:	6a21      	ldr	r1, [r4, #32]
 800b4de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b4e0:	4643      	mov	r3, r8
 800b4e2:	463a      	mov	r2, r7
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	47b0      	blx	r6
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	dc06      	bgt.n	800b4fa <__sflush_r+0xfe>
 800b4ec:	89a3      	ldrh	r3, [r4, #12]
 800b4ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4f2:	81a3      	strh	r3, [r4, #12]
 800b4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4f8:	e78e      	b.n	800b418 <__sflush_r+0x1c>
 800b4fa:	4407      	add	r7, r0
 800b4fc:	eba8 0800 	sub.w	r8, r8, r0
 800b500:	e7e9      	b.n	800b4d6 <__sflush_r+0xda>
 800b502:	bf00      	nop
 800b504:	20400001 	.word	0x20400001

0800b508 <_fflush_r>:
 800b508:	b538      	push	{r3, r4, r5, lr}
 800b50a:	690b      	ldr	r3, [r1, #16]
 800b50c:	4605      	mov	r5, r0
 800b50e:	460c      	mov	r4, r1
 800b510:	b913      	cbnz	r3, 800b518 <_fflush_r+0x10>
 800b512:	2500      	movs	r5, #0
 800b514:	4628      	mov	r0, r5
 800b516:	bd38      	pop	{r3, r4, r5, pc}
 800b518:	b118      	cbz	r0, 800b522 <_fflush_r+0x1a>
 800b51a:	6983      	ldr	r3, [r0, #24]
 800b51c:	b90b      	cbnz	r3, 800b522 <_fflush_r+0x1a>
 800b51e:	f000 f887 	bl	800b630 <__sinit>
 800b522:	4b14      	ldr	r3, [pc, #80]	; (800b574 <_fflush_r+0x6c>)
 800b524:	429c      	cmp	r4, r3
 800b526:	d11b      	bne.n	800b560 <_fflush_r+0x58>
 800b528:	686c      	ldr	r4, [r5, #4]
 800b52a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d0ef      	beq.n	800b512 <_fflush_r+0xa>
 800b532:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b534:	07d0      	lsls	r0, r2, #31
 800b536:	d404      	bmi.n	800b542 <_fflush_r+0x3a>
 800b538:	0599      	lsls	r1, r3, #22
 800b53a:	d402      	bmi.n	800b542 <_fflush_r+0x3a>
 800b53c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b53e:	f000 f915 	bl	800b76c <__retarget_lock_acquire_recursive>
 800b542:	4628      	mov	r0, r5
 800b544:	4621      	mov	r1, r4
 800b546:	f7ff ff59 	bl	800b3fc <__sflush_r>
 800b54a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b54c:	07da      	lsls	r2, r3, #31
 800b54e:	4605      	mov	r5, r0
 800b550:	d4e0      	bmi.n	800b514 <_fflush_r+0xc>
 800b552:	89a3      	ldrh	r3, [r4, #12]
 800b554:	059b      	lsls	r3, r3, #22
 800b556:	d4dd      	bmi.n	800b514 <_fflush_r+0xc>
 800b558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b55a:	f000 f908 	bl	800b76e <__retarget_lock_release_recursive>
 800b55e:	e7d9      	b.n	800b514 <_fflush_r+0xc>
 800b560:	4b05      	ldr	r3, [pc, #20]	; (800b578 <_fflush_r+0x70>)
 800b562:	429c      	cmp	r4, r3
 800b564:	d101      	bne.n	800b56a <_fflush_r+0x62>
 800b566:	68ac      	ldr	r4, [r5, #8]
 800b568:	e7df      	b.n	800b52a <_fflush_r+0x22>
 800b56a:	4b04      	ldr	r3, [pc, #16]	; (800b57c <_fflush_r+0x74>)
 800b56c:	429c      	cmp	r4, r3
 800b56e:	bf08      	it	eq
 800b570:	68ec      	ldreq	r4, [r5, #12]
 800b572:	e7da      	b.n	800b52a <_fflush_r+0x22>
 800b574:	0800bf8c 	.word	0x0800bf8c
 800b578:	0800bfac 	.word	0x0800bfac
 800b57c:	0800bf6c 	.word	0x0800bf6c

0800b580 <std>:
 800b580:	2300      	movs	r3, #0
 800b582:	b510      	push	{r4, lr}
 800b584:	4604      	mov	r4, r0
 800b586:	e9c0 3300 	strd	r3, r3, [r0]
 800b58a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b58e:	6083      	str	r3, [r0, #8]
 800b590:	8181      	strh	r1, [r0, #12]
 800b592:	6643      	str	r3, [r0, #100]	; 0x64
 800b594:	81c2      	strh	r2, [r0, #14]
 800b596:	6183      	str	r3, [r0, #24]
 800b598:	4619      	mov	r1, r3
 800b59a:	2208      	movs	r2, #8
 800b59c:	305c      	adds	r0, #92	; 0x5c
 800b59e:	f7fb fee5 	bl	800736c <memset>
 800b5a2:	4b05      	ldr	r3, [pc, #20]	; (800b5b8 <std+0x38>)
 800b5a4:	6263      	str	r3, [r4, #36]	; 0x24
 800b5a6:	4b05      	ldr	r3, [pc, #20]	; (800b5bc <std+0x3c>)
 800b5a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b5aa:	4b05      	ldr	r3, [pc, #20]	; (800b5c0 <std+0x40>)
 800b5ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b5ae:	4b05      	ldr	r3, [pc, #20]	; (800b5c4 <std+0x44>)
 800b5b0:	6224      	str	r4, [r4, #32]
 800b5b2:	6323      	str	r3, [r4, #48]	; 0x30
 800b5b4:	bd10      	pop	{r4, pc}
 800b5b6:	bf00      	nop
 800b5b8:	0800b8d1 	.word	0x0800b8d1
 800b5bc:	0800b8f3 	.word	0x0800b8f3
 800b5c0:	0800b92b 	.word	0x0800b92b
 800b5c4:	0800b94f 	.word	0x0800b94f

0800b5c8 <_cleanup_r>:
 800b5c8:	4901      	ldr	r1, [pc, #4]	; (800b5d0 <_cleanup_r+0x8>)
 800b5ca:	f000 b8af 	b.w	800b72c <_fwalk_reent>
 800b5ce:	bf00      	nop
 800b5d0:	0800b509 	.word	0x0800b509

0800b5d4 <__sfmoreglue>:
 800b5d4:	b570      	push	{r4, r5, r6, lr}
 800b5d6:	1e4a      	subs	r2, r1, #1
 800b5d8:	2568      	movs	r5, #104	; 0x68
 800b5da:	4355      	muls	r5, r2
 800b5dc:	460e      	mov	r6, r1
 800b5de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b5e2:	f7ff fa7f 	bl	800aae4 <_malloc_r>
 800b5e6:	4604      	mov	r4, r0
 800b5e8:	b140      	cbz	r0, 800b5fc <__sfmoreglue+0x28>
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	e9c0 1600 	strd	r1, r6, [r0]
 800b5f0:	300c      	adds	r0, #12
 800b5f2:	60a0      	str	r0, [r4, #8]
 800b5f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b5f8:	f7fb feb8 	bl	800736c <memset>
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	bd70      	pop	{r4, r5, r6, pc}

0800b600 <__sfp_lock_acquire>:
 800b600:	4801      	ldr	r0, [pc, #4]	; (800b608 <__sfp_lock_acquire+0x8>)
 800b602:	f000 b8b3 	b.w	800b76c <__retarget_lock_acquire_recursive>
 800b606:	bf00      	nop
 800b608:	2400074c 	.word	0x2400074c

0800b60c <__sfp_lock_release>:
 800b60c:	4801      	ldr	r0, [pc, #4]	; (800b614 <__sfp_lock_release+0x8>)
 800b60e:	f000 b8ae 	b.w	800b76e <__retarget_lock_release_recursive>
 800b612:	bf00      	nop
 800b614:	2400074c 	.word	0x2400074c

0800b618 <__sinit_lock_acquire>:
 800b618:	4801      	ldr	r0, [pc, #4]	; (800b620 <__sinit_lock_acquire+0x8>)
 800b61a:	f000 b8a7 	b.w	800b76c <__retarget_lock_acquire_recursive>
 800b61e:	bf00      	nop
 800b620:	24000747 	.word	0x24000747

0800b624 <__sinit_lock_release>:
 800b624:	4801      	ldr	r0, [pc, #4]	; (800b62c <__sinit_lock_release+0x8>)
 800b626:	f000 b8a2 	b.w	800b76e <__retarget_lock_release_recursive>
 800b62a:	bf00      	nop
 800b62c:	24000747 	.word	0x24000747

0800b630 <__sinit>:
 800b630:	b510      	push	{r4, lr}
 800b632:	4604      	mov	r4, r0
 800b634:	f7ff fff0 	bl	800b618 <__sinit_lock_acquire>
 800b638:	69a3      	ldr	r3, [r4, #24]
 800b63a:	b11b      	cbz	r3, 800b644 <__sinit+0x14>
 800b63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b640:	f7ff bff0 	b.w	800b624 <__sinit_lock_release>
 800b644:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b648:	6523      	str	r3, [r4, #80]	; 0x50
 800b64a:	4b13      	ldr	r3, [pc, #76]	; (800b698 <__sinit+0x68>)
 800b64c:	4a13      	ldr	r2, [pc, #76]	; (800b69c <__sinit+0x6c>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	62a2      	str	r2, [r4, #40]	; 0x28
 800b652:	42a3      	cmp	r3, r4
 800b654:	bf04      	itt	eq
 800b656:	2301      	moveq	r3, #1
 800b658:	61a3      	streq	r3, [r4, #24]
 800b65a:	4620      	mov	r0, r4
 800b65c:	f000 f820 	bl	800b6a0 <__sfp>
 800b660:	6060      	str	r0, [r4, #4]
 800b662:	4620      	mov	r0, r4
 800b664:	f000 f81c 	bl	800b6a0 <__sfp>
 800b668:	60a0      	str	r0, [r4, #8]
 800b66a:	4620      	mov	r0, r4
 800b66c:	f000 f818 	bl	800b6a0 <__sfp>
 800b670:	2200      	movs	r2, #0
 800b672:	60e0      	str	r0, [r4, #12]
 800b674:	2104      	movs	r1, #4
 800b676:	6860      	ldr	r0, [r4, #4]
 800b678:	f7ff ff82 	bl	800b580 <std>
 800b67c:	68a0      	ldr	r0, [r4, #8]
 800b67e:	2201      	movs	r2, #1
 800b680:	2109      	movs	r1, #9
 800b682:	f7ff ff7d 	bl	800b580 <std>
 800b686:	68e0      	ldr	r0, [r4, #12]
 800b688:	2202      	movs	r2, #2
 800b68a:	2112      	movs	r1, #18
 800b68c:	f7ff ff78 	bl	800b580 <std>
 800b690:	2301      	movs	r3, #1
 800b692:	61a3      	str	r3, [r4, #24]
 800b694:	e7d2      	b.n	800b63c <__sinit+0xc>
 800b696:	bf00      	nop
 800b698:	0800bb14 	.word	0x0800bb14
 800b69c:	0800b5c9 	.word	0x0800b5c9

0800b6a0 <__sfp>:
 800b6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6a2:	4607      	mov	r7, r0
 800b6a4:	f7ff ffac 	bl	800b600 <__sfp_lock_acquire>
 800b6a8:	4b1e      	ldr	r3, [pc, #120]	; (800b724 <__sfp+0x84>)
 800b6aa:	681e      	ldr	r6, [r3, #0]
 800b6ac:	69b3      	ldr	r3, [r6, #24]
 800b6ae:	b913      	cbnz	r3, 800b6b6 <__sfp+0x16>
 800b6b0:	4630      	mov	r0, r6
 800b6b2:	f7ff ffbd 	bl	800b630 <__sinit>
 800b6b6:	3648      	adds	r6, #72	; 0x48
 800b6b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b6bc:	3b01      	subs	r3, #1
 800b6be:	d503      	bpl.n	800b6c8 <__sfp+0x28>
 800b6c0:	6833      	ldr	r3, [r6, #0]
 800b6c2:	b30b      	cbz	r3, 800b708 <__sfp+0x68>
 800b6c4:	6836      	ldr	r6, [r6, #0]
 800b6c6:	e7f7      	b.n	800b6b8 <__sfp+0x18>
 800b6c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b6cc:	b9d5      	cbnz	r5, 800b704 <__sfp+0x64>
 800b6ce:	4b16      	ldr	r3, [pc, #88]	; (800b728 <__sfp+0x88>)
 800b6d0:	60e3      	str	r3, [r4, #12]
 800b6d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b6d6:	6665      	str	r5, [r4, #100]	; 0x64
 800b6d8:	f000 f847 	bl	800b76a <__retarget_lock_init_recursive>
 800b6dc:	f7ff ff96 	bl	800b60c <__sfp_lock_release>
 800b6e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b6e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b6e8:	6025      	str	r5, [r4, #0]
 800b6ea:	61a5      	str	r5, [r4, #24]
 800b6ec:	2208      	movs	r2, #8
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b6f4:	f7fb fe3a 	bl	800736c <memset>
 800b6f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b6fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b700:	4620      	mov	r0, r4
 800b702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b704:	3468      	adds	r4, #104	; 0x68
 800b706:	e7d9      	b.n	800b6bc <__sfp+0x1c>
 800b708:	2104      	movs	r1, #4
 800b70a:	4638      	mov	r0, r7
 800b70c:	f7ff ff62 	bl	800b5d4 <__sfmoreglue>
 800b710:	4604      	mov	r4, r0
 800b712:	6030      	str	r0, [r6, #0]
 800b714:	2800      	cmp	r0, #0
 800b716:	d1d5      	bne.n	800b6c4 <__sfp+0x24>
 800b718:	f7ff ff78 	bl	800b60c <__sfp_lock_release>
 800b71c:	230c      	movs	r3, #12
 800b71e:	603b      	str	r3, [r7, #0]
 800b720:	e7ee      	b.n	800b700 <__sfp+0x60>
 800b722:	bf00      	nop
 800b724:	0800bb14 	.word	0x0800bb14
 800b728:	ffff0001 	.word	0xffff0001

0800b72c <_fwalk_reent>:
 800b72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b730:	4606      	mov	r6, r0
 800b732:	4688      	mov	r8, r1
 800b734:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b738:	2700      	movs	r7, #0
 800b73a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b73e:	f1b9 0901 	subs.w	r9, r9, #1
 800b742:	d505      	bpl.n	800b750 <_fwalk_reent+0x24>
 800b744:	6824      	ldr	r4, [r4, #0]
 800b746:	2c00      	cmp	r4, #0
 800b748:	d1f7      	bne.n	800b73a <_fwalk_reent+0xe>
 800b74a:	4638      	mov	r0, r7
 800b74c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b750:	89ab      	ldrh	r3, [r5, #12]
 800b752:	2b01      	cmp	r3, #1
 800b754:	d907      	bls.n	800b766 <_fwalk_reent+0x3a>
 800b756:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b75a:	3301      	adds	r3, #1
 800b75c:	d003      	beq.n	800b766 <_fwalk_reent+0x3a>
 800b75e:	4629      	mov	r1, r5
 800b760:	4630      	mov	r0, r6
 800b762:	47c0      	blx	r8
 800b764:	4307      	orrs	r7, r0
 800b766:	3568      	adds	r5, #104	; 0x68
 800b768:	e7e9      	b.n	800b73e <_fwalk_reent+0x12>

0800b76a <__retarget_lock_init_recursive>:
 800b76a:	4770      	bx	lr

0800b76c <__retarget_lock_acquire_recursive>:
 800b76c:	4770      	bx	lr

0800b76e <__retarget_lock_release_recursive>:
 800b76e:	4770      	bx	lr

0800b770 <__swhatbuf_r>:
 800b770:	b570      	push	{r4, r5, r6, lr}
 800b772:	460e      	mov	r6, r1
 800b774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b778:	2900      	cmp	r1, #0
 800b77a:	b096      	sub	sp, #88	; 0x58
 800b77c:	4614      	mov	r4, r2
 800b77e:	461d      	mov	r5, r3
 800b780:	da07      	bge.n	800b792 <__swhatbuf_r+0x22>
 800b782:	2300      	movs	r3, #0
 800b784:	602b      	str	r3, [r5, #0]
 800b786:	89b3      	ldrh	r3, [r6, #12]
 800b788:	061a      	lsls	r2, r3, #24
 800b78a:	d410      	bmi.n	800b7ae <__swhatbuf_r+0x3e>
 800b78c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b790:	e00e      	b.n	800b7b0 <__swhatbuf_r+0x40>
 800b792:	466a      	mov	r2, sp
 800b794:	f000 f902 	bl	800b99c <_fstat_r>
 800b798:	2800      	cmp	r0, #0
 800b79a:	dbf2      	blt.n	800b782 <__swhatbuf_r+0x12>
 800b79c:	9a01      	ldr	r2, [sp, #4]
 800b79e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b7a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b7a6:	425a      	negs	r2, r3
 800b7a8:	415a      	adcs	r2, r3
 800b7aa:	602a      	str	r2, [r5, #0]
 800b7ac:	e7ee      	b.n	800b78c <__swhatbuf_r+0x1c>
 800b7ae:	2340      	movs	r3, #64	; 0x40
 800b7b0:	2000      	movs	r0, #0
 800b7b2:	6023      	str	r3, [r4, #0]
 800b7b4:	b016      	add	sp, #88	; 0x58
 800b7b6:	bd70      	pop	{r4, r5, r6, pc}

0800b7b8 <__smakebuf_r>:
 800b7b8:	898b      	ldrh	r3, [r1, #12]
 800b7ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7bc:	079d      	lsls	r5, r3, #30
 800b7be:	4606      	mov	r6, r0
 800b7c0:	460c      	mov	r4, r1
 800b7c2:	d507      	bpl.n	800b7d4 <__smakebuf_r+0x1c>
 800b7c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7c8:	6023      	str	r3, [r4, #0]
 800b7ca:	6123      	str	r3, [r4, #16]
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	6163      	str	r3, [r4, #20]
 800b7d0:	b002      	add	sp, #8
 800b7d2:	bd70      	pop	{r4, r5, r6, pc}
 800b7d4:	ab01      	add	r3, sp, #4
 800b7d6:	466a      	mov	r2, sp
 800b7d8:	f7ff ffca 	bl	800b770 <__swhatbuf_r>
 800b7dc:	9900      	ldr	r1, [sp, #0]
 800b7de:	4605      	mov	r5, r0
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	f7ff f97f 	bl	800aae4 <_malloc_r>
 800b7e6:	b948      	cbnz	r0, 800b7fc <__smakebuf_r+0x44>
 800b7e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ec:	059a      	lsls	r2, r3, #22
 800b7ee:	d4ef      	bmi.n	800b7d0 <__smakebuf_r+0x18>
 800b7f0:	f023 0303 	bic.w	r3, r3, #3
 800b7f4:	f043 0302 	orr.w	r3, r3, #2
 800b7f8:	81a3      	strh	r3, [r4, #12]
 800b7fa:	e7e3      	b.n	800b7c4 <__smakebuf_r+0xc>
 800b7fc:	4b0d      	ldr	r3, [pc, #52]	; (800b834 <__smakebuf_r+0x7c>)
 800b7fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800b800:	89a3      	ldrh	r3, [r4, #12]
 800b802:	6020      	str	r0, [r4, #0]
 800b804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b808:	81a3      	strh	r3, [r4, #12]
 800b80a:	9b00      	ldr	r3, [sp, #0]
 800b80c:	6163      	str	r3, [r4, #20]
 800b80e:	9b01      	ldr	r3, [sp, #4]
 800b810:	6120      	str	r0, [r4, #16]
 800b812:	b15b      	cbz	r3, 800b82c <__smakebuf_r+0x74>
 800b814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b818:	4630      	mov	r0, r6
 800b81a:	f000 f8d1 	bl	800b9c0 <_isatty_r>
 800b81e:	b128      	cbz	r0, 800b82c <__smakebuf_r+0x74>
 800b820:	89a3      	ldrh	r3, [r4, #12]
 800b822:	f023 0303 	bic.w	r3, r3, #3
 800b826:	f043 0301 	orr.w	r3, r3, #1
 800b82a:	81a3      	strh	r3, [r4, #12]
 800b82c:	89a0      	ldrh	r0, [r4, #12]
 800b82e:	4305      	orrs	r5, r0
 800b830:	81a5      	strh	r5, [r4, #12]
 800b832:	e7cd      	b.n	800b7d0 <__smakebuf_r+0x18>
 800b834:	0800b5c9 	.word	0x0800b5c9

0800b838 <_malloc_usable_size_r>:
 800b838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b83c:	1f18      	subs	r0, r3, #4
 800b83e:	2b00      	cmp	r3, #0
 800b840:	bfbc      	itt	lt
 800b842:	580b      	ldrlt	r3, [r1, r0]
 800b844:	18c0      	addlt	r0, r0, r3
 800b846:	4770      	bx	lr

0800b848 <_raise_r>:
 800b848:	291f      	cmp	r1, #31
 800b84a:	b538      	push	{r3, r4, r5, lr}
 800b84c:	4604      	mov	r4, r0
 800b84e:	460d      	mov	r5, r1
 800b850:	d904      	bls.n	800b85c <_raise_r+0x14>
 800b852:	2316      	movs	r3, #22
 800b854:	6003      	str	r3, [r0, #0]
 800b856:	f04f 30ff 	mov.w	r0, #4294967295
 800b85a:	bd38      	pop	{r3, r4, r5, pc}
 800b85c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b85e:	b112      	cbz	r2, 800b866 <_raise_r+0x1e>
 800b860:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b864:	b94b      	cbnz	r3, 800b87a <_raise_r+0x32>
 800b866:	4620      	mov	r0, r4
 800b868:	f000 f830 	bl	800b8cc <_getpid_r>
 800b86c:	462a      	mov	r2, r5
 800b86e:	4601      	mov	r1, r0
 800b870:	4620      	mov	r0, r4
 800b872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b876:	f000 b817 	b.w	800b8a8 <_kill_r>
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d00a      	beq.n	800b894 <_raise_r+0x4c>
 800b87e:	1c59      	adds	r1, r3, #1
 800b880:	d103      	bne.n	800b88a <_raise_r+0x42>
 800b882:	2316      	movs	r3, #22
 800b884:	6003      	str	r3, [r0, #0]
 800b886:	2001      	movs	r0, #1
 800b888:	e7e7      	b.n	800b85a <_raise_r+0x12>
 800b88a:	2400      	movs	r4, #0
 800b88c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b890:	4628      	mov	r0, r5
 800b892:	4798      	blx	r3
 800b894:	2000      	movs	r0, #0
 800b896:	e7e0      	b.n	800b85a <_raise_r+0x12>

0800b898 <raise>:
 800b898:	4b02      	ldr	r3, [pc, #8]	; (800b8a4 <raise+0xc>)
 800b89a:	4601      	mov	r1, r0
 800b89c:	6818      	ldr	r0, [r3, #0]
 800b89e:	f7ff bfd3 	b.w	800b848 <_raise_r>
 800b8a2:	bf00      	nop
 800b8a4:	24000010 	.word	0x24000010

0800b8a8 <_kill_r>:
 800b8a8:	b538      	push	{r3, r4, r5, lr}
 800b8aa:	4d07      	ldr	r5, [pc, #28]	; (800b8c8 <_kill_r+0x20>)
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	4604      	mov	r4, r0
 800b8b0:	4608      	mov	r0, r1
 800b8b2:	4611      	mov	r1, r2
 800b8b4:	602b      	str	r3, [r5, #0]
 800b8b6:	f7f5 ff97 	bl	80017e8 <_kill>
 800b8ba:	1c43      	adds	r3, r0, #1
 800b8bc:	d102      	bne.n	800b8c4 <_kill_r+0x1c>
 800b8be:	682b      	ldr	r3, [r5, #0]
 800b8c0:	b103      	cbz	r3, 800b8c4 <_kill_r+0x1c>
 800b8c2:	6023      	str	r3, [r4, #0]
 800b8c4:	bd38      	pop	{r3, r4, r5, pc}
 800b8c6:	bf00      	nop
 800b8c8:	24000740 	.word	0x24000740

0800b8cc <_getpid_r>:
 800b8cc:	f7f5 bf84 	b.w	80017d8 <_getpid>

0800b8d0 <__sread>:
 800b8d0:	b510      	push	{r4, lr}
 800b8d2:	460c      	mov	r4, r1
 800b8d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8d8:	f000 f894 	bl	800ba04 <_read_r>
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	bfab      	itete	ge
 800b8e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b8e2:	89a3      	ldrhlt	r3, [r4, #12]
 800b8e4:	181b      	addge	r3, r3, r0
 800b8e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b8ea:	bfac      	ite	ge
 800b8ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800b8ee:	81a3      	strhlt	r3, [r4, #12]
 800b8f0:	bd10      	pop	{r4, pc}

0800b8f2 <__swrite>:
 800b8f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8f6:	461f      	mov	r7, r3
 800b8f8:	898b      	ldrh	r3, [r1, #12]
 800b8fa:	05db      	lsls	r3, r3, #23
 800b8fc:	4605      	mov	r5, r0
 800b8fe:	460c      	mov	r4, r1
 800b900:	4616      	mov	r6, r2
 800b902:	d505      	bpl.n	800b910 <__swrite+0x1e>
 800b904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b908:	2302      	movs	r3, #2
 800b90a:	2200      	movs	r2, #0
 800b90c:	f000 f868 	bl	800b9e0 <_lseek_r>
 800b910:	89a3      	ldrh	r3, [r4, #12]
 800b912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b91a:	81a3      	strh	r3, [r4, #12]
 800b91c:	4632      	mov	r2, r6
 800b91e:	463b      	mov	r3, r7
 800b920:	4628      	mov	r0, r5
 800b922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b926:	f000 b817 	b.w	800b958 <_write_r>

0800b92a <__sseek>:
 800b92a:	b510      	push	{r4, lr}
 800b92c:	460c      	mov	r4, r1
 800b92e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b932:	f000 f855 	bl	800b9e0 <_lseek_r>
 800b936:	1c43      	adds	r3, r0, #1
 800b938:	89a3      	ldrh	r3, [r4, #12]
 800b93a:	bf15      	itete	ne
 800b93c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b93e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b942:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b946:	81a3      	strheq	r3, [r4, #12]
 800b948:	bf18      	it	ne
 800b94a:	81a3      	strhne	r3, [r4, #12]
 800b94c:	bd10      	pop	{r4, pc}

0800b94e <__sclose>:
 800b94e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b952:	f000 b813 	b.w	800b97c <_close_r>
	...

0800b958 <_write_r>:
 800b958:	b538      	push	{r3, r4, r5, lr}
 800b95a:	4d07      	ldr	r5, [pc, #28]	; (800b978 <_write_r+0x20>)
 800b95c:	4604      	mov	r4, r0
 800b95e:	4608      	mov	r0, r1
 800b960:	4611      	mov	r1, r2
 800b962:	2200      	movs	r2, #0
 800b964:	602a      	str	r2, [r5, #0]
 800b966:	461a      	mov	r2, r3
 800b968:	f7f5 ff75 	bl	8001856 <_write>
 800b96c:	1c43      	adds	r3, r0, #1
 800b96e:	d102      	bne.n	800b976 <_write_r+0x1e>
 800b970:	682b      	ldr	r3, [r5, #0]
 800b972:	b103      	cbz	r3, 800b976 <_write_r+0x1e>
 800b974:	6023      	str	r3, [r4, #0]
 800b976:	bd38      	pop	{r3, r4, r5, pc}
 800b978:	24000740 	.word	0x24000740

0800b97c <_close_r>:
 800b97c:	b538      	push	{r3, r4, r5, lr}
 800b97e:	4d06      	ldr	r5, [pc, #24]	; (800b998 <_close_r+0x1c>)
 800b980:	2300      	movs	r3, #0
 800b982:	4604      	mov	r4, r0
 800b984:	4608      	mov	r0, r1
 800b986:	602b      	str	r3, [r5, #0]
 800b988:	f7f5 ff81 	bl	800188e <_close>
 800b98c:	1c43      	adds	r3, r0, #1
 800b98e:	d102      	bne.n	800b996 <_close_r+0x1a>
 800b990:	682b      	ldr	r3, [r5, #0]
 800b992:	b103      	cbz	r3, 800b996 <_close_r+0x1a>
 800b994:	6023      	str	r3, [r4, #0]
 800b996:	bd38      	pop	{r3, r4, r5, pc}
 800b998:	24000740 	.word	0x24000740

0800b99c <_fstat_r>:
 800b99c:	b538      	push	{r3, r4, r5, lr}
 800b99e:	4d07      	ldr	r5, [pc, #28]	; (800b9bc <_fstat_r+0x20>)
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	4608      	mov	r0, r1
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	602b      	str	r3, [r5, #0]
 800b9aa:	f7f5 ff7c 	bl	80018a6 <_fstat>
 800b9ae:	1c43      	adds	r3, r0, #1
 800b9b0:	d102      	bne.n	800b9b8 <_fstat_r+0x1c>
 800b9b2:	682b      	ldr	r3, [r5, #0]
 800b9b4:	b103      	cbz	r3, 800b9b8 <_fstat_r+0x1c>
 800b9b6:	6023      	str	r3, [r4, #0]
 800b9b8:	bd38      	pop	{r3, r4, r5, pc}
 800b9ba:	bf00      	nop
 800b9bc:	24000740 	.word	0x24000740

0800b9c0 <_isatty_r>:
 800b9c0:	b538      	push	{r3, r4, r5, lr}
 800b9c2:	4d06      	ldr	r5, [pc, #24]	; (800b9dc <_isatty_r+0x1c>)
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	4608      	mov	r0, r1
 800b9ca:	602b      	str	r3, [r5, #0]
 800b9cc:	f7f5 ff7b 	bl	80018c6 <_isatty>
 800b9d0:	1c43      	adds	r3, r0, #1
 800b9d2:	d102      	bne.n	800b9da <_isatty_r+0x1a>
 800b9d4:	682b      	ldr	r3, [r5, #0]
 800b9d6:	b103      	cbz	r3, 800b9da <_isatty_r+0x1a>
 800b9d8:	6023      	str	r3, [r4, #0]
 800b9da:	bd38      	pop	{r3, r4, r5, pc}
 800b9dc:	24000740 	.word	0x24000740

0800b9e0 <_lseek_r>:
 800b9e0:	b538      	push	{r3, r4, r5, lr}
 800b9e2:	4d07      	ldr	r5, [pc, #28]	; (800ba00 <_lseek_r+0x20>)
 800b9e4:	4604      	mov	r4, r0
 800b9e6:	4608      	mov	r0, r1
 800b9e8:	4611      	mov	r1, r2
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	602a      	str	r2, [r5, #0]
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	f7f5 ff74 	bl	80018dc <_lseek>
 800b9f4:	1c43      	adds	r3, r0, #1
 800b9f6:	d102      	bne.n	800b9fe <_lseek_r+0x1e>
 800b9f8:	682b      	ldr	r3, [r5, #0]
 800b9fa:	b103      	cbz	r3, 800b9fe <_lseek_r+0x1e>
 800b9fc:	6023      	str	r3, [r4, #0]
 800b9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ba00:	24000740 	.word	0x24000740

0800ba04 <_read_r>:
 800ba04:	b538      	push	{r3, r4, r5, lr}
 800ba06:	4d07      	ldr	r5, [pc, #28]	; (800ba24 <_read_r+0x20>)
 800ba08:	4604      	mov	r4, r0
 800ba0a:	4608      	mov	r0, r1
 800ba0c:	4611      	mov	r1, r2
 800ba0e:	2200      	movs	r2, #0
 800ba10:	602a      	str	r2, [r5, #0]
 800ba12:	461a      	mov	r2, r3
 800ba14:	f7f5 ff02 	bl	800181c <_read>
 800ba18:	1c43      	adds	r3, r0, #1
 800ba1a:	d102      	bne.n	800ba22 <_read_r+0x1e>
 800ba1c:	682b      	ldr	r3, [r5, #0]
 800ba1e:	b103      	cbz	r3, 800ba22 <_read_r+0x1e>
 800ba20:	6023      	str	r3, [r4, #0]
 800ba22:	bd38      	pop	{r3, r4, r5, pc}
 800ba24:	24000740 	.word	0x24000740

0800ba28 <_init>:
 800ba28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba2a:	bf00      	nop
 800ba2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba2e:	bc08      	pop	{r3}
 800ba30:	469e      	mov	lr, r3
 800ba32:	4770      	bx	lr

0800ba34 <_fini>:
 800ba34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba36:	bf00      	nop
 800ba38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba3a:	bc08      	pop	{r3}
 800ba3c:	469e      	mov	lr, r3
 800ba3e:	4770      	bx	lr
